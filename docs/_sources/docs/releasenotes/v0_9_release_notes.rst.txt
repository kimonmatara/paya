*************************
Version 0.9 Release Notes
*************************

========================
General Breaking Changes
========================

.. warning::

    Version 0.9 of Paya introduces changes that may break rigging code written in 0.8. These changes were necessary to
    clarify workflows, unify method interfaces and ringfence unpatched PyMEL scripts. Please read through these release
    notes carefully to understand where to perform refactoring if needed.

Non-Automatic Patching
----------------------

Paya no longer automatically patches PyMEL as soon as :mod:`paya.runtime` is loaded. Patching must instead be started
and stopped using :meth:`paya.runtime.start` and :meth:`paya.runtime.stop`, respectively, or, better yet, managed via
new context-manager functionality on the :mod:`paya.runtime` object itself. The older behaviour is still available via
a configuration flag. See :doc:`Importing and Patching` for details.

.. admonition:: Background

    This change was made to better ringfence external scripts that rely on unpatched PyMEL.

Persistent Native Units
-----------------------

As of version 0.9, all Paya methods will automatically switch Maya to native units before running, and switch it back to
the original user setting when they're done. The older behaviour is still available via a configuration flag. See
:doc:`Working with Native Units` for more details.


.. admonition:: Background

    Paya wants you to rig with Maya configured for centimeters and radians. Before version 0.9 this was not sufficiently
    signalled to newcomers, leading to unexpected results when different units were used.

Consistent Sampler Method Behaviour
-----------------------------------

As of version 0.9, :term:`sampler methods <sampler method>` across shapes and plugs will always default to a
:term:`static` (value) return unless *plug=True* is explicitly requested or another argument is passed-in as a plug.
See :doc:`Static vs Dynamic Sampling` for more details.

.. admonition:: Background

    Before version 0.9, sampler methods on **shape** classes defaulted to :term:`static` returns (i.e. values), while
    their counterparts on namesake **plug** classes defaulted to :term:`dynamic` returns (i.e. live outputs). This
    made it less intuitive to predict default behaviour:

    .. tabs::

        .. tab:: Version 0.9 (Now)

            .. code-block:: python

                shape = r.PyNode('curve1').getShape()
                print(shape.pointAtParam(0.5))
                # Result: [-18.055226981265214, 0.0, 3.430571513891263]

                output = shape.attr('worldSpace')
                print(output.pointAtParam(0.5))
                # Result: [-18.055226981265214, 0.0, 3.430571513891263]

                # To get a plug output, pass plug=True in both cases:
                print(shape.pointAtParam(0.5, plug=True))
                # Result: NPCI.position
                print(output.pointAtParam(0.5, plug=True))
                # Result: NPCI.position

        .. tab:: Version 0.8 (Before)

            .. code-block:: python

                shape = r.PyNode('curve1').getShape()
                print(shape.pointAtParam(0.5))
                # Result: [-18.055226981265214, 0.0, 3.430571513891263]

                output = shape.attr('worldSpace')
                print(output.pointAtParam(0.5))
                # Result: NPCI.position

==================================================
Breaking Changes to NURBS and Bezier Curve Methods
==================================================

Spun-Off Overloads
------------------

Further to the changes described above, some PyMEL methods on NURBS and Bezier curve shapes that were previously
overloaded with features such as dynamic output (via a *plug/p* option) have been reverted, and the added functionality
separated off. Specifically:

.. list-table::
    :header-rows: 1
    :widths: 50 50

    *   - PyMEL Method
        - Paya Variant
    *   - :meth:`~pymel.core.nodetypes.NurbsCurve.closestPoint`
        - :meth:`~paya.runtime.nodes.NurbsCurve.nearestPoint`
    *   - :meth:`~pymel.core.nodetypes.NurbsCurve.getCVs`
        - :meth:`~paya.runtime.nodes.NurbsCurve.getControlVerts`
    *   - :meth:`~pymel.core.nodetypes.NurbsCurve.findParamFromLength`
        - :meth:`~paya.runtime.nodes.NurbsCurve.paramAtLength`
    *   - :meth:`~pymel.core.nodetypes.NurbsCurve.findLengthFromParam`
        - :meth:`~paya.runtime.nodes.NurbsCurve.lengthAtParam`
    *   - :meth:`~pymel.core.nodetypes.NurbsCurve.getPointAtParam`
        - :meth:`~paya.runtime.nodes.NurbsCurve.pointAtParam`
    *   - :meth:`~pymel.core.nodetypes.NurbsCurve.getParamAtPoint`
        - :meth:`~paya.runtime.nodes.NurbsCurve.paramAtPoint`
    *   - :meth:`~pymel.core.nodetypes.NurbsCurve.normal`
        - :meth:`~paya.runtime.nodes.NurbsCurve.normalAtParam`
    *   - :meth:`~pymel.core.nodetypes.NurbsCurve.tangent`
        - :meth:`~paya.runtime.nodes.NurbsCurve.tangentAtParam`

.. admonition:: Background

    This change was made because it was becoming very complicated to maintain 'combination' argument signatures on
    overloaded methods across shape and plug implementations.

Dropped Support for Full Components in Arguments
------------------------------------------------

Geometry methods no longer accept full component arguments (for example instances of
:class:`~paya.runtime.comps.NurbsCurveParameter` or string representations such as ``curve1.u[0.532]``). Pass
:class:`float` or :class:`int` instead:

.. tabs::

    .. tab:: Version 0.9 (Now)

        .. code-block:: python

            param = curve.u[0.5] # yields NurbsCurveParameter instance
            point = curve.pointAtParam(param) # fails with TypeError
            point = curve.pointAtParam(0.5) # works

    .. tab:: Version 0.8 (Before)

        .. code-block:: python

            param = curve.u[0.5] # yields NurbsCurveParameter instance
            point = curve.pointAtParam(param) # works
            point = curve.pointAtParam(0.5) # also works

.. admonition:: Background

    This change was made to prevent expensive checks to disambiguate between string representations of components and
    attributes (where both could be used), and because such methods expect fully local information (e.g. the index of a
    CV on the current curve) anyway.

Other Breaking Changes on NURBS and Bezier Curves
-------------------------------------------------

-   ``distributeAimingMatrices()`` has been removed; use
    :meth:`distributeMatrices(... chain=True) <paya.runtime.plugs.NurbsCurve.distributeMatrices>` instead
-   ``fitChain()`` has been removed; use :meth:`distributeJoints(... chain=True) <paya.runtime.plugs.NurbsCurve.distributeJoints>`
    instead

============
New Features
============

NURBS and Bezier Curves
-----------------------

Parallel Transport
^^^^^^^^^^^^^^^^^^

Version 0.9 includes implementations for **parallel transport** inspired by a
`Houdini tutorial by Manuel Casasola Merkle <https://www.sidefx.com/tutorials/parallel-transport/>`_, itself based on
`paper by A. Hanson and Hui Ma <https://www.semanticscholar.org/paper/Parallel-Transport-Approach-to-Curve-Framing-Hanson-Ma/ed416d01742e5e704357538c6817312ca6d8cb38?p2df>`_.

Parallel transport can be leveraged using a new workflow based on a up vector samplers. These are configured once per
curve, and picked up implicitly by methods such as :meth:`~paya.runtime.plugs.NurbsCurve.matrixAtParam` or
:meth:`~paya.runtime.plugs.NurbsCurve.distributeMatrices`. See :doc:`Up Vector Sampling` for more details.

General
^^^^^^^

Here's a breakdown of all new methods and features on NURBS and Bezier curve shapes and plugs:

    *   API / PyMEL methods that deal with curve lengths, such as :meth:`pymel.core.nodetypes.NurbsCurve.length`, always
        run in local space. Paya counterparts, on the other hand, such as :meth:`~paya.runtime.nodes.paramAtLength` or
        the overloaded :meth:`~paya.runtime.nodes.NurbsCurve.length` are space-aware: When called on a shape, a
        *worldSpace* keyword argument is made available; when called on a plug, the space is determined by the choice of
        plug (for example, ``.local`` or ``.worldSpace`` on :class:`nurbsCurve <paya.runtime.nodes.NurbsCurve>` nodes).

    *   New methods have been added to configure up vector samplers:
        :meth:`~paya.runtime.nodes.NurbsCurve.createUpVectorSampler`
        :meth:`~paya.runtime.nodes.NurbsCurve.getUpVectorSamplers`
        :meth:`~paya.runtime.nodes.NurbsCurve.getDefaultUpVectorSampler`
        :meth:`~paya.runtime.nodes.NurbsCurve.clearUpVectorSamplers`

    *   Compound :term:`sampler methods <sampler method>` such as :meth:`~paya.runtime.plugs.matrixAtParam` or
        :meth:`~paya.runtime.plugs.distributeMatrices` will now use a default up vector sampler if one has been
        configured. New *upVectorSampler/ups* and *defaultToNormal/dtn* options have been added to override this default
        behaviour.

    *   Discrete up-vector sampling operations are also available for lower-level hacking:
        :meth:`~paya.runtime.nodes.NurbsCurve.upVectorAtParam`
        :meth:`~paya.runtime.nodes.NurbsCurve.upVectorAtPoint`
        :meth:`~paya.runtime.nodes.NurbsCurve.upVectorAtFraction`
        :meth:`~paya.runtime.nodes.NurbsCurve.upVectorAtLength`

    *   Anchor-aware :term:`sampler methods <sampler method>` on :class:`~paya.runtime.plugs.BezierCurve` now include:
        :meth:`~paya.runtime.plugs.BezierCurve.paramAtAnchor`
        :meth:`~paya.runtime.plugs.BezierCurve.paramsAtAnchors`
        :meth:`~paya.runtime.plugs.BezierCurve.getCVAtAnchor`
        :meth:`~paya.runtime.plugs.BezierCurve.getCVsAtAnchor`
        :meth:`~paya.runtime.plugs.BezierCurve.pointAtAnchor`
        :meth:`~paya.runtime.plugs.BezierCurve.getControlVerts`
        :meth:`~paya.runtime.plugs.BezierCurve.matrixAtAnchor`

    *   Anchor-aware :term:`editor methods <editor method>` on :class:`~paya.runtime.plugs.BezierCurve` now include:
        :meth:`~paya.runtime.plugs.BezierCurve.inbetweenAnchors`
        :meth:`~paya.runtime.plugs.BezierCurve.subdivideAnchors`

    *   A new :meth:`~paya.runtime.plugs.NurbsCurve.insertKnot` method has been added to
        :class:`~paya.runtime.plugs.NurbsCurve`.

    *   A *dispCV/dcv=True* option has been added to :meth:`~paya.runtime.plugs.NurbsCurve.createShape` on
        :class:`paya.runtime.plugs.NurbsCurve` and to :meth:`~paya.runtime.nodes.NurbsCurve.create` on
        :class:`~paya.runtime.nodes.NurbsCurve`.

Miscellaneous Additions
-----------------------

*   A ``pn`` shorthand has been added for :class:`pymel.core.general.PyNode` on :mod:`paya.runtime`, allowing you to
    write ``loc = r.pn('locator1')``` instead of ``loc = r.PyNode('locator1')``.

==========
Bugs Fixed
==========

*   :term:`Editor methods <editor method>` on :class:`~paya.runtime.nodes.NurbsCurve` and
    :class:`~paya.runtime.nodes.BezierCurve` create intermediate shapes when the type changes between NURBS and Bezier
*   :meth:`paya.runtime.data.Vector.angle` returns :class:`float` instead of :class:`~paya.runtime.data.Angle`
*   :meth:`paya.runtime.plugs.Vector.get` sometimes returns :class:`tuple` instead of
    :class:`~paya.runtime.nodes.Vector`
*   :meth:`paya.runtime.nodes.BezierCurve.create` creates unexpected shapes because the generated knot list is not
    suitable for a Bezier curve
*   :meth:`paya.runtime.plugs.Math1D.acos` leads to excessive error warnings when the input range is outside
    0.0 -> 1.0
