********************
Recommended Workflow
********************

Paya is carefully authored to overload, rather than override, PyMEL classes. Despite this, there's always a risk the
patch will interfere with external scripts that expect unmodified PyMEL. For this reason, care should be taken to
**restrict patching to rigging contexts** when using Paya in a studio pipeline.

The best way to do this is:

1.  Develop your rig-building scripts using :mod:`paya.runtime` as a swap-in for :mod:`pymel.core`, ignoring patch state
    altogether.

2.  Call the rigging scripts inside a :mod:`paya.runtime` context block.

For example, suppose you've written a script to build a character rig, and must call that script as part of a bigger
asset build. The rigging script might live inside a module called ``buildCuby.py`` and look like this:

.. code-block:: python

    import paya.runtime as r

    def buildCuby():
        cube = r.polyCube(constructionHistory=False)[0]
        control = r.createControl(keyable=['translate', 'rotate'])
        control.attr('worldMatrix').applyViaOpm(cube)

And the top-level, pipelined sequence might look like this:

.. code-block:: python

    import studioPipeline
    import paya.runtime
    from myBuildScripts.buildCuby import buildCuby

    studioPipeline.setAsset('cuby')
    studioPipeline.initBuild()

    with paya.runtime:
        buildCuby()

    studioPipeline.publishAsset()


.. note::

    Using :mod:`paya.runtime` as a context manager is preferable in such situations because it guarantees that patching
    will be reverted even if ``buildCuby()`` itself errors in the meantime. To get the same with
    :meth:`~paya.runtime.start` / :meth:`~paya.runtime.stop`, you'd have to use ``try... finally``:

    .. code-block:: python

        import studioPipeline
        import paya.runtime
        from myBuildScripts.buildCuby import buildCuby

        studioPipeline.setAsset('cuby')
        studioPipeline.initBuild()

        paya.runtime.start()

        try:
            buildCuby()

        finally:
            paya.runtime.stop()

        # Any errors from buildCuby() are raised here, after stop().
        studioPipeline.publishAsset()