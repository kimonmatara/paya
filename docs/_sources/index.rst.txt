Paya: PyMEL for Riggers
=======================

Paya is an object-oriented toolkit for Maya riggers. Unlike other libraries, it doesn't re-wrap ``maya.cmds`` or the
`OpenMaya <https://help.autodesk.com/view/MAYAUL/2023/ENU/?guid=Maya_SDK_Maya_Python_API_html>`_ API. Instead, it adds
functionality to `PyMEL <https://help.autodesk.com/view/MAYAUL/2022/ENU/?guid=__PyMel_index_html>`_ types at runtime
for an integrated and familiar experience.

Included is the most comprehensive, and intuitive, implementation of :doc:`maths rigging using Python operators
<maths_rigging>` available anywhere, with over 100 methods for linear algebra, trigonometry and more.

Customisation is easy, and goes far beyond PyMEL's
`virtual classes <https://github.com/LumaPictures/pymel/blob/master/examples/customClasses.py>`_ system to add support
for attribute (including subtype), component and data types with true inheritance for the first time.

.. admonition:: New in version 0.7

    *   :ref:`A concise, Pythonic interface for managing blend shape targets <blend_shapes>`, including tangent- and
        transform- space, inverted correctives and more. Never use :func:`~pymel.core.animation.blendShape` again!
    *   A new :meth:`~paya.runtime.plugs.Math1D.combine` method on scalar attributes leverages ``combinationShape``
        nodes
    *   :doc:`And more <whats_new>`!


Example: Rigging a Radial Repulsor
----------------------------------

.. image:: repulsor.gif

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            from random import uniform
            import paya.runtime as r
            from paya.util import pad

            def createRadialRepulsor(
                    repulseRadius=3.5,
                    swarmRadius=5,
                    numBees=60,
                    beeRadius=0.2
            ):
                repLoc = r.spaceLocator(n='repulsion_centre_LOCT')
                repLoc.addAttr('repulseRadius', min=0, dv=repulseRadius, k=True)
                repulseRadius = repLoc.attr('repulseRadius')
                repCentre = repLoc.attr('worldPosition')

                for i in range(numBees):
                    sphere = r.polySphere(
                        ch=False,
                        radius=beeRadius,
                        n='collider_{}_NRSF'.format(pad(i+1, 3))
                    )[0]

                    initPosition = r.data.Point([
                        uniform(-1, 1),
                        uniform(-1, 1),
                        uniform(-1, 1)
                    ]).normal() * uniform(0, swarmRadius)

                    vector = initPosition - repCentre
                    vector = vector.normal() * vector.length().max(repulseRadius)
                    (repCentre + vector) >> sphere.attr('t')

    .. tab:: PyMEL

        .. code-block:: python

            from random import uniform
            import pymel.core as p

            def createRadialRepulsor(
                    repulseRadius=3.5,
                    swarmRadius=5,
                    numBees=60,
                    beeRadius=0.2
            ):
                repLoc = p.spaceLocator(n='repulsion_centre_LOCT')
                repLoc.addAttr('repulseRadius', min=0, dv=repulseRadius, k=True)
                repulseRadius = repLoc.attr('repulseRadius')
                repCentre = repLoc.attr('worldPosition')

                for i in range(numBees):
                    num = str(i+1)
                    num = '0'*(3-len(num)) + num

                    sphere = r.polySphere(
                        ch=False,
                        radius=beeRadius,
                        n='collider_{}_NRSF'.format(num)
                    )[0]

                    initPosition = p.datatypes.Point([
                        uniform(-1, 1),
                        uniform(-1, 1),
                        uniform(-1, 1)
                    ]).normal() * uniform(0, swarmRadius)

                    pma = p.createNode('plusMinusAverage')
                    pma.attr('operation').set(2)

                    pma.attr('input3D')[0].set(initPosition)
                    repCentre >> pma.attr('input3D')[1]

                    vector = pma.attr('output3D')

                    db = p.createNode('distanceBetween')
                    vector >> db.attr('point2')
                    mag = db.attr('distance')

                    mdv = p.createNode('multiplyDivide')
                    mdv.attr('operation').set(2)

                    vector >> mdv.attr('input1')

                    for child in mdv.attr('input2').getChildren():
                        mag >> child

                    vector = mdv.attr('output')

                    cond = p.createNode('condition')
                    mag >> cond.attr('firstTerm')
                    repulseRadius >> cond.attr('secondTerm')
                    cond.attr('operation').set(2)

                    mag >> cond.attr('colorIfTrueR')
                    repulseRadius >> cond.attr('colorIfFalseR')
                    mag = cond.attr('outColorR')

                    mdv = p.createNode('multiplyDivide')
                    vector >> mdv.attr('input1')

                    for child in mdv.attr('input2').getChildren():
                        mag >> child

                    vector = mdv.attr('output')

                    pma = p.createNode('plusMinusAverage')
                    repCentre >> pma.attr('input3D')[0]
                    vector >> pma.attr('input3D')[1]

                    pma.attr('output3D') >> sphere.attr('t')


.. toctree::
    :hidden:

    What's New <whats_new>
    Getting Started <getting_started>

.. toctree::
    :caption: Rigging
    :hidden:

    Maths <maths_rigging>
    Joint Chains <joint_chains>
    IK Handles <ik>
    deformers
    Controls <controls>
    User Attributes <user_attrs>
    Node Names <naming_nodes>

.. toctree::
    :caption: Customisation
    :hidden:

    Adding Your Own Methods <adding_oo_functionality>
    Package Configuration <package_config>
    Sugar and Style <sugar_and_style>

.. toctree::
    :caption: Appendices
    :hidden:

    Types <types_index>
    Modules <paya>
    implementation
    glossary
    licence
    author