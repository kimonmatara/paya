####################################
Adding Object-Oriented Functionality
####################################

=================================
Determining Which Class to Target
=================================

Background
----------

PyMEL and Paya represent Maya values, nodes, components and attributes as Python
`objects <https://en.wikipedia.org/wiki/Object_(computer_science)>`_ with callable
`methods <https://en.wikipedia.org/wiki/Method_(computer_programming)>`_. Every object is an instance of a
`class <https://en.wikipedia.org/wiki/Class_(computer_programming)>`_. This class implements functionality specific to
that object type and inherits more general functionality from ancestor classes.

In the following example, the :class:`~pymel.core.general.PyNode` constructor returns an instance of class
:class:`~pymel.core.nodetypes.Joint`. The method :meth:`~pymel.core.nodetypes.DagNode.getParent` is then called on that
instance to retrieve the parent:

.. code-block:: python

    import pyme.core as p
    joint2 = p.PyNode('joint2')
    joint1 = joint2.getParent()

The method :meth:`~pymel.core.nodetypes.DagNode.getParent` is not implemented on :class:`~pymel.core.nodetypes.Joint`
but rather on :class:`~pymel.core.nodetypes.DagNode`, a more general class that every Maya transform and shape type
inherits from. This is why the method can be called on lots of different objects besides joints:

.. code-block:: python

    import pyme.core as p
    shape = p.PyNode('pCube1Shape')
    transform = shape.getParent()

This type of inheritance will inform your choice of class to customise.

Inspecting Inheritance
----------------------

When you to call a method on an object, Python determines which classes that object inherits from and traverses them to
find an implementation. One way to inspect this inheritance is to pass ``inherited = True`` to the standard Maya
:func:`~pymel.core.general.nodeType` command:

.. code-block:: python

    print(joint1.nodeType(inherited=True))
    # ['containerBase', 'entity', 'dagNode', 'transform', 'joint']

For a deeper inspection that also works on components, attributes and data objects, you must access the ``__mro__``
attribute on the object's class. Try the following with PyMEL unpatched:

.. code-block:: python

    cube = p.PyNode('pCube1')
    vertex = cube.vtx[12]
    cls = vertex.__class__ # this also works: cls = type(vertex)
    mro = cls.__mro__
    print(mro)
    # (<class 'pymel.core.general.MeshVertex'>, <class 'pymel.core.general.MItComponent1D'>, <class 'pymel.core.general.MItComponent'>, <class 'pymel.core.general.Component1D'>, <class 'pymel.core.general.DiscreteComponent'>, <class 'pymel.core.general.DimensionedComponent'>, <class 'pymel.core.general.Component'>, <class 'pymel.core.general.PyNode'>, <class 'pymel.util.utilitytypes.proxyClass.<locals>.Proxy'>, <class 'object'>)

Notice the following differences from :func:`~pymel.core.general.nodeType`:

    * Actual classes are returned, rather than mere type names
    * The order is reversed, with more specific classes first and more general ones last
    * The list is longer and includes more esoteric types such as :class:`~pymel.core.nodetypes.DependNode`

When PyMEL has been :doc:`patched <importing_and_patching>` by Paya, the ``__mro__`` listing is expanded, with almost
every PyMEL class 'shadowed' by a Paya namesake:

.. code-block:: python

    import paya.runtime as r
    r.start()

    cls = vertex.__class__
    mro = cls.__mro__
    print(mro)
    # (<class 'paya.comptypes.meshVertex.MeshVertex'>, <class 'pymel.core.general.MeshVertex'>, <class 'paya.comptypes.mItComponent1D.MItComponent1D'>, <class 'pymel.core.general.MItComponent1D'>, <class 'paya.comptypes.mItComponent.MItComponent'>, <class 'pymel.core.general.MItComponent'>, <class 'paya.comptypes.component1D.Component1D'>, <class 'pymel.core.general.Component1D'>, <class 'paya.comptypes.discreteComponent.DiscreteComponent'>, <class 'pymel.core.general.DiscreteComponent'>, <class 'paya.comptypes.dimensionedComponent.DimensionedComponent'>, <class 'pymel.core.general.DimensionedComponent'>, <class 'paya.comptypes.component.Component'>, <class 'pymel.core.general.Component'>, <class 'pymel.core.general.PyNode'>, <class 'pymel.util.utilitytypes.proxyClass.<locals>.Proxy'>, <class 'object'>)

These custom Paya classes are where you will be adding your custom functionality.

.. _template_classes:

================
Template Classes
================

Each Paya class is defined inside a module under a *class pool* directory. The name of the module is the uncapitalized
name of the class. For example, :class:`paya.plugtypes.matrix.Matrix` is defined inside ``matrix.py`` under the
``paya/plugtypes`` class pool for attributes.

These modules should not be imported directly. The 'template' classes they contain are rebuilt by Paya to enforce
correct inheritance and then assigned to PyMEL objects on-the-fly; these 'final' classes can be retrieved via the
:ref:`class pool accessors <class pools>` instead.

Where a template class doesn't exist, Paya will automatically create a 'dummy' class for insertion into the method
resolution order.

To implement a new method, all you need to do is add it to a template class. Instance methods, class methods, static
methods, magic methods, descriptors and properties are all supported.

.. note::

    .. _Importing Template Classes:

    Template classes simplify authoring, because developers don't have to assign base classes and metaclasses manually.
    The downside is that :func:`super` will no longer work: To call a superclass method, the correct ancestor must be
    sourced via the :ref:`class pool accessors <class pools>` so that the long form can be used instead:

    .. code-block:: python

        import paya.runtime as r

        class Transform:

            def getParent(self, *args, **kwargs):
                result = r.nodes.DagNode.getParent(self, *args, **kwargs)
                print("The parent is: {}".format(result))
                return result

Example: An Object-Oriented Implementation of pointPosition()
-------------------------------------------------------------

Suppose you want to reimplement :func:`~pymel.core.general.pointPosition` as an object-oriented method on all point-like
PyMEL components. In our earlier examples, we discovered that vertices inherit from
:class:`~pymel.core.general.DiscreteComponent`, which sounds like what we need. So, here's what to do:

1.  Start ``paya/comptypes/discreteComponent.py`` if it doesn't already exist
2.  Edit it so it looks something like this:

    .. code-block:: python

        import paya.runtime as r

        class DiscreteComponent:

            def getPosition(self, world=False):
                """
                Returns the position of this component.
                """
                return r.pointPosition(self, world=world)

That's it!

=========
Reloading
=========

To ensure your method appears on any new PyMEL / Paya object instances:

1.  Make sure you're running PyMEL / Paya in *patched* mode
2.  Call :meth:`~paya.runtime.Runtime.rehash` on :mod:`paya.runtime` to clear the class buffers

    .. code-block:: python

        import paya.runtime as r
        r.rehash()
        # Purged class pool paya.nodes.
        # Purged class pool paya.plugs.
        # Purged class pool paya.comps.
        # Purged class pool paya.data.

        vertex = r.PyNode('pCube1').vtx[15]
        print(vertex.getPosition(world=True))
        # [-0.5, 0.5, 0.5]


.. _bracketing:

==========
Bracketing
==========

Recall that, once patched, PyMEL will continue to return Paya classes until :meth:`~paya.runtime.Runtime.stop` is
called. This isn't noticeable with the standard Paya distribution, but if you add methods that override standard PyMEL
behaviours, you may break external pipeline scripts.

In such cases, you should consider 'bracketing' your rigging code with paired calls to
:meth:`~paya.runtime.Runtime.start` and :meth:`~paya.runtime.Runtime.stop`. Here's an example top-level build call with
dummy module names:

.. code-block:: python

    import pymel.core as p
    import paya.runtime as r
    import studioPipeline

    r.start()

    try:
        import makeBipedRig from myRiggingLib
        makeBipedRig()

    finally:
        r.stop()

    studioPipeline.publishAsset()