**********
IK Handles
**********

===================
Creating IK Handles
===================

Paya provides a few different constructors in addition to the standard PyMEL :func:`~pymel.core.animation.ikHandle`
command. The first is :meth:`paya.runtime.nodes.IkHandle.create`, which takes the same arguments and supports
managed names:

.. code-block:: python

    with r.Name('leg'):
        r.nodes.IkHandle.create(sj='joint1', ee='joint5')

    # leg_KHDL

You can also call :meth:`~paya.lib.skel.Chain.createIkHandle` on :class:`~paya.lib.skel.Chain` instances. This defaults
to ``ikSCsolver`` for two-joint chains and ``ikRPsolver`` for longer ones:

.. code-block:: python

    chain = r.PyNode('joint1').chainFromHere()
    chain.createIkHandle()

A 'plural' form, :meth:`~paya.lib.skel.Chain.createIkHandles` can be used to create one SC handle for each bone in a
chain. The IK handles will be numbered; prefixes and padding can be specified via :class:`~paya.lib.name.Name` blocks:

.. code-block:: python

    with r.Name('leg', padding=2):
        print(chain.createIkHandles())

    # [nt.IkHandle('leg_001_KHDL'), nt.IkHandle('leg_002_KHDL')]

===================================
Preventing Lockout on Inline Chains
===================================

Use :meth:`~paya.lib.skel.Chain.autoPreferredAngle` to prevent lockout when IK is applied to inline chains. The method
requires an ``upAxis`` hint:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            chain = r.PyNode('_1_JOIN').chainFromHere()
            chain.autoPreferredAngle('x')
            ikh = chain.createIkHandle()

    .. tab:: Viewport

        .. figure:: ikLockout.gif
            :align: center

============
Pole Vectors
============

The :meth:`~paya.runtime.nodes.IkHandle.setPolePoint` method on :class:`~paya.runtime.nodes.IkHandle` is an
alternative to :func:`~pymel.core.animation.poleVectorConstraint` that works with point attributes and implements
``maintainOffset``:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            loc, ikh = r.ls(sl=1)
            ikh.setPolePoint(loc.attr('worldPosition'), maintainOffset=True)

    .. tab:: Viewport

        .. figure:: pv_with_offset.gif
            :align: center

To get non-jumping pole vector defaults for complex non-planar chains, use :meth:`~paya.lib.skel.Chain.getPolePoint`:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            ikh = r.ls(sl=1)[0]
            chain = ikh.chain()

            userLoc = r.nodes.Locator.createNode().getParent()
            userLoc.attr('translate').set(chain.getPolePoint(distance=17))
            polePoint = userLoc.attr('worldPosition')

            ikh.setPolePoint(polePoint)

    .. tab:: Viewport

        .. figure:: getPolePoint.gif
            :align: center

============
Spline Twist
============

Use :meth:`~paya.runtime.nodes.IkHandle.setTwistVectors` on :class:`~paya.runtime.nodes.IkHandle` to quickly
enable and configure start / end twist on spline handles. This pairs well with axis properties on Paya
:class:`~paya.runtime.plugs.Matrix` attributes:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            ikh = r.PyNode('KHDL')

            cube1 = r.PyNode('pCube1')
            cube2= r.PyNode('pCube2')

            ikh.setTwistVectors(cube1.attr('wm').y, cube2.attr('wm').y, 'x')

    .. tab:: Viewport

        .. figure:: twistVecs.gif
            :align: center