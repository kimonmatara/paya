*********
Deformers
*********

=======
General
=======

Constructors
------------

Maya doesn't provide a consistent API to create deformers. Some, like ``skinCluster``, have their own commands; others,
like the non-linear variants, use :func:`~pymel.core.animation.deformer`; still others, like ``proximityWrap``, use
special classes.

To get around this, consistent ``create()`` constructors are being rolled out across all deformers in Paya. As at
**version 0.8**, these are available on :class:`skinCluster <paya.runtime.nodes.SkinCluster>`,
:class:`blendShape <paya.runtime.nodes.BlendShape>`, :class:`curveWarp <paya.runtime.nodes.CurveWarp`
and :class:`cluster <paya.runtime.nodes.Cluster>` deformers. Stay tuned for more.

Retrieving Deformers
--------------------

Use :meth:`~paya.runtime.nodes.GeometryFilter.getFromGeo` to find all deformers of a particular type on a shape. This
is more reliable than :func:`~pymel.core.general.listHistory` (or the :meth:`history` method) as it excludes deformers
in the dependency graph that don't directly affect the shape:

.. code-block:: python

    skins = r.nodes.SkinCluster.getFromGeo('bodyShape1')
    print(skins)
    # [nt.SkinCluster('skinCluster1')]

.. _deformer weight management:

Loading / Dumping Weights
-------------------------

The standard way in Maya to dump and load per-component deformer weights is the
:func:`~pymel.internal.pmcmds.deformerWeights` command. Although this is fast, its flag interface is quirky and often
leads to unwanted deformers and shapes being processed.

To get around this, Paya's :mod:`paya.lib.xmlweights` module offers two functional wrappers,
:func:`~paya.lib.xmlweights.load` and :func:`~paya.lib.xmlweights.dump`. These take simpler path arguments, and ensure
that only requested deformers and shapes are processed.

Paya deformer instances carry matched :meth:`~paya.runtime.nodes.GeometryFilter.loadWeights` and
:meth:`~paya.runtime.nodes.GeometryFilter.dumpWeights` methods with additional perks, such as reliable inclusion
of DQ blend weights.

Here's an example:

.. code-block:: python

    filePath = 'C:/Users/user/Desktop/skin.xml'

    skin1 = r.nodes.SkinCluster.getFromGeo('body1')[0]
    skin1.dumpWeights(filePath)

    skin2 = r.nodes.SkinCluster.getFromGeo('body2')[0]
    skin2.loadWeights(filePath)

.. note::

    Paya's methods only support XML files. This is because calling :func:`~pymel.internal.pmcmds.deformerWeights` in
    JSON mode sometimes leads to crashes.

Copying Weights
---------------

Paya's :meth:`~paya.runtime.nodes.GeoemtryFilter.copyWeightsFrom` method unifies various options from
Maya's :func:`~pymel.internal.pmcmds.deformerWeights`, :func:`~pymel.internal.pmcmds.copyDeformerWeights` and
:func:`~pymel.internal.pmcmds.copySkinWeights` commands into a single interface, automatically using the correct
implementation:

.. code-block:: python

    skin2.copyWeightsFrom(skin1, method='index') # uses XML, includes DQ blend weights
    skin2.copyWeightsFrom(skin1, method='closestPoint') # uses copySkinWeights()
    blendShape2.copyWeightsFrom(blendShape1, method='uv') # uses copyDeformerWeights()

===========
SkinCluster
===========

.. _skinCluster constructor:

Constructor
-----------

The skinCluster constructor confers several advantages over :func:`~pymel.core.animation.skinCluster`:

-   Influences and geometry can be passed via positional arguments, in any order and level of listing; alternatively
    they can be passed via the ``influence`` and ``geometry`` keyword arguments
-   A ``multi`` option to generate skinClusters across several passed geometries with the same arguments
-   More useful defaults (for example, ``toSelectedBones=True``)
-   Managed naming, including a ``nameFromGeo`` option

Here's an example:

.. code-block:: python

    influences = r.ls(type='joint')
    meshes = r.ls(type='mesh)

    skins = r.nodes.SkinCluster.create(
        influences, meshes, maximumInfluences=2, multi=True)

Copying
-------

Use :meth:`~paya.runtime.nodes.SkinCluster.copyTo` to copy skinClusters between geometries. This replicates all relevant
node configuration, including inputs for ``dqsScale``, and gives you the same options for weight copying as
:meth:`~paya.runtime.nodes.GeometryFilter.copyWeightsFrom`:

.. code-block:: python

    skin1 = r.nodes.SkinCluster.getFromGeo('body')[0]
    skin2 = skin1.copyTo('jacket', destUVSet='rigUVs')  # uv mode with an explicit destination map
    skin3 = skin1.copyTo('body_thin', method='index')
    skin4 = skin1.copyTo('hair', weights=False) # omit weights, but copy configuration

.. _blend_shapes:

==========
BlendShape
==========

Constructor
-----------

The :meth:`~paya.runtime.nodes.BlendShape.create` constructor on :class:`~paya.runtime.nodes.BlendShape` is a wrapper
for the :func:`~pymel.core.animation.blendShape` command with the following added perks:

    - Managed naming
    - Two added keyword arguments, ``pre`` and ``post``, for quicker configuration of common deformation orders.

Although you can use the usual positional and keyword arguments to add targets immediately, it might be easier to add
them afterwards using the methods and interfaces described further down. Here's how to initialise a blend shape node
around a base mesh:

.. code-block:: python

    base = 'head_DMSH'
    bsn = r.nodes.BlendShape.create(base, pre=True) # for pre-skin shapes
    bsn = r.nodes.BlendShape.create(base, post=True) # for tangent- or transform- space shapes


Adding Targets
--------------

A comprehensive, Pythonic interface for editing blend shape targets is available through the
:class:`.targets <paya.lib.bsnboltons.Targets>` / ``.t`` attribute.

Here are a few ways to add targets:

.. code-block:: python

    target = bsn.targets.add('L_smile_DMSH')
    target = bsn.targets.add('L_smile_DMSH', alias='L_smile')
    bsn.targets['L_smile'] = 'L_smile_DMSH' # same thing as above

See :meth:`~paya.lib.bsnboltons.Targets.add` for additional options.

Retrieving Targets
------------------

Target-specific functionality is available on :class:`~paya.lib.bsnboltons.Target` instances. These are returned by
the :meth:`~paya.lib.bsnboltons.Targets.add` method, and can also be retrieved in the following ways:

.. code-block:: python

    target = bsn.targets['L_smile'] # by alias
    target = bsn.targets[0] # by logical index (tallies with the .weight attribute)
    target = list(bsn.targets)[0] # by physical index

    # Iterate
    for target in bsn.targets:
        # do something

    # List
    targets = list(bsn.targets)

Removing Targets
----------------

Here are a few ways to remove targets:

.. code-block:: python

    bsn.targets.removeByLogicalIndex(0)
    del(bsn.targets[0]) # same thing

    bsn.targets.removeByPhysicalIndex(0)

    bsn.targets.removeByLabel('L_smile')
    del(bsn.targets['L_smile']) # same thing

    # Remove all
    bsn.targets.clear()

See :meth:`~paya.lib.bsnboltons.Targets.removeByLogicalIndex`, :meth:`~paya.lib.bsnboltons.Targets.removeByPhysicalIndex`,
:meth:`~paya.lib.bsnboltons.Targets.removeByLabel` and :meth:`~paya.lib.bsnboltons.Targets.clear` for more
information.

Editing Aliases
---------------

Target aliases can be edited using simple assignment:

.. code-block:: python

    target = bsn.targets['L_smile']
    target.alias = 'L_grin'

You may have to re-invoke tool panes to update the Maya UI afterwards.

Inverting Pre-Deformation Correctives
-------------------------------------

Pre-deformation corrective shapes that were sculpted at-pose (for example, on a duplicate of bound geometry) can be
inverted into bind pose using the :meth:`~paya.runtime.nodes.SkinCluster.invertShape` method. Note that the skinCluster
must be in a posed state when this is run:

.. code-block:: python

    skinnedGeo = 'L_leg_DMSH'
    skin = r.nodes.SkinCluster.getFromGeo(skinnedGeo)[0]

    # Create a pre-deformation blendShape node
    bsn = r.nodes.BlendShape.create(skinnedGeo, pre=True)

    # Invert the sculpt against the skinCluster, add the inversion as
    # a target
    sculpt = 'L_knee_sculpt_DMSH'
    inverted = skin.invertShape(sculpt).getParent()

    bsn.targets.add(inverted, initWeight=1.0)
    r.delete(inverted)

Post-Deformation Targets
------------------------

Post-deformation targets can only be configured if the blend shape node was constructed using ``post=True`` or the
(counterintuitively named) Maya flag ``before=True``. When this is the case, then:

    -   If a transform node was specified via the ``transform`` keyword argument, the target will be configured as a
        *transform-space* target
    -   Otherwise, the target will default to *tangent-space*

For example:

.. code-block:: python

    print(bsn.inPostMode())
    # True

    target = bsn.targets.add('L_smile_DMSH') # tangent-space
    target = bsn.targets.add('L_smile_DMSH', transform='L_mouth_JOIN') # transform-space

Transforms can be reassigned afterwards:

.. code-block:: python

    target.transform = 'L_mouth_002_JOIN'

Flipping Targets
----------------

Use the :meth:`~paya.lib.bsnboltons.Target.flip` method to flip targets:

.. code-block:: python

    target = bsn.targets['L_smile']

    # By topology
    target.flip(symmetryEdge=455)

    # Object-space
    target.flip() # defaults to object X

See :meth:`~paya.lib.bsnboltons.Target.flip` for more options.

Adding Inbetweens
-----------------

Inbetweens can be added using the :meth:`~paya.lib.bsnboltons.Target.add` method on :class:`~paya.lib.bsnboltons.Target`,
or by assigning to values:

.. code-block:: python

    target = bsn.targets['L_smile']

    tween = target.add(0.5, 'L_half_smile_DMSH')
    target[0.5] = 'L_half_smile_DMSH' # same thing

See :meth:`~paya.lib.bsnboltons.Target.add` for more options and information.

Retrieving Inbetweens
---------------------

Inbetweens are represented by instances of :class:`~paya.lib.bsnboltons.Subtarget`, and can be retrieved thus:

.. code-block:: python

    # By value
    print(target.values()))
    # [0.5, 1.0]

    tween = target[0.5]

    # By logical index (if you know what you're doing)
    tween = target[5500]

    # By physical index
    tween = list(target)[0]

Removing Inbetweens
-------------------

Here's how to remove inbetweens:

.. code-block:: python

    # By value
    target.removeByValue(0.5)
    del(target[0.5])

    # By logical index (if you know what you're doing)
    target.removeByLogicalIndex(5500)
    del(target[5500])

    # By physical index
    target.removeByPhysicalIndex(0)

    # Clear all
    target.clearInbetweens()

Retrieving Target Geometry
--------------------------

Target geometry can be retrieved using the :meth:`~paya.lib.bsnboltons.Subtarget.getShape` method, or via the ``.shape``
property, on :class:`~paya.lib.bsnboltons.Subtarget` instances. To get the main geometry for a target, you'll have to
access the 'inbetween' at value 1.0:

.. code-block:: python

    target = bsn.targets['L_smile']

    # Via property
    shape = target[1.0].shape

    # Via explicit getter
    shape = target[1.0].getShape()

    print(shape)
    # L_smile_DMSHShape

.. note::

    The return value will be ``None`` if the geometry was deleted, or if the blend shape node is in *post-deformation*
    mode.

To force-regenerate missing geometry, pass ``create=True`` to :meth:`~paya.lib.bsnboltons.Subtarget.getShape`.

Assigning Target Geometry
-------------------------

To swap out target geometry use :meth:`~paya.lib.bsnboltons.Subtarget.setShape`, or simply assign to the property:

.. code-block:: python

    target[1.0].setShape('L_smile_variant_DMSHShape')
    target[1.0].shape = 'L_smile_variant_DMSHShape'

    # Assigning the transform-level of a geometry also works:
    target[1.0].shape = 'L_smile_variant_DMSH'

.. note::

    Geometry assignments are not live (connected) when the blend shape node is in *post-deformation* mode.

=======
Cluster
=======

Constructor
-----------

The standard :meth:`~paya.runtime.nodes.Cluster.create` constructor on :class:`~paya.runtime.nodes.Cluster` does a
smarter and cleaner job of handle-swapping than the standard :func:`~pymel.core.animation.cluster` command:

.. tabs::

    .. tab:: Viewport

        .. figure:: cluster_handle_swap.gif
            :align: center

    .. tab:: Paya

        .. code-block:: python

            handle, geo = r.ls(sl=True)
            r.nodes.Cluster.create(geo, handle=handle, maintainOffset=True)


Other Points of Access
----------------------

Look for component methods that allow you to create clusters in-context, such as
:meth:`~paya.runtime.comps.NurbsCurveCV.cluster` on :class:`~paya.runtime.comps.NurbsCurveCV`.

Swapping Out Weighted Nodes (User Handles)
------------------------------------------

Two methods on :class:`~paya.runtime.nodes.Cluster`, :meth:`~paya.runtime.nodes.Cluster.getHandle` and
:meth:`~paya.runtime.nodes.Cluster.setHandle`, offer a variety of options to perform handle (weighted node) swapping
cleanly.

Normalizing Deformations
------------------------

Use :meth:`~paya.runtime.nodes.Cluster.normalize` to reset geometry offsets:

.. tabs::

    .. tab:: Viewport

        .. figure:: cluster_norm.gif
            :align: center

    .. tab:: Paya

        .. code-block:: python

            cluster = r.nodes.Cluster.getFromGeo('pSphere1')[0]
            cluster.normalize()

=========
CurveWarp
=========

Constructor
-----------

The standard :meth:`~paya.runtime.nodes.CurveWarp.create` constructor on :class:`~paya.runtime.nodes.CurveWarp` is
probably the cleanest and easiest way to initialise the deformer via script in Maya:

.. tabs::

    .. tab:: Viewport

        .. figure:: curve_warp.gif
            :align: center

    .. tab:: Paya

        .. code-block:: python

            curve, geo = r.ls(sl=True) # order doesn't matter
            cw = r.nodes.CurveWarp.create(curve, geo)