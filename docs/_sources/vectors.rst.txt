*******
Vectors
*******

================
Relevant Classes
================

.. list-table::
    :header-rows: 1
    :widths: 200 200

    *   - Static
        - Dynamic
    *   - N/A
        - :class:`paya.runtime.plugs.Math3D`
    *   - :class:`paya.runtime.data.Vector`
        - :class:`paya.runtime.plugs.Vector`

===========================
Getting Vectors from Points
===========================

A vector can be obtained through the elementwise subtraction of a start point from an end point. This can be performed
in a single statement, as long as one of the operands is a PyMEL data or attribute instance (recall :doc:`Operator
Basics <operator_basics>`):

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            startPoint = [0, 10.5, 2.0]
            endPoint = r.PyNode('locator1').attr('worldPosition')

            vector = endPoint - startPoint

    .. tab:: Graph

        .. figure:: point_subtraction.png
            :align: center

Note that the following version, using :func:`xform`, won't work:

.. code-block:: python

    startPoint = r.xform('locator1', rotatePivot=True, worldSpace=True)
    endPoint = r.xform('locator2', rotatePivot=True, worldSpace=True)

    vector = endPoint-startPoint
    // TypeError: unsupported operand type(s) for -: 'list' and 'list'

This is because :func:`xform` returns a simple :class:`list`. To get around this you could subtract each of the list
members yourself or, more simply, cast either of the returns into :class:`~paya.runtime.data.Point`:

.. code-block:: python

    startPoint = r.xform('locator1', rotatePivot=True, worldSpace=True)
    endPoint = r.data.Point(r.xform('locator2', rotatePivot=True, worldSpace=True))

    vector = endPoint-startPoint

============================================
Getting Vectors from Matrices and Transforms
============================================

The quickest way to extract a matrix axis as a vector is to use Paya's :term:`universal` axis properties:

.. code-block:: python

    xVector = locator.getMatrix().x # static
    xVector = locator.attr('matrix').x # dynamic

To get the translation component, use ``.translate`` / ``.t``. On data classes this returns an instance of
:class:`~paya.runtime.data.Point`:

.. code-block:: python

    position = locator.getMatrix().t

The properties are implemented using a :term:`universal` :func:`getAxis` method, which can be called directly to specify
a **negative** axis:

.. code-block:: python

    negativeXVector = locator.attr('worldMatrix').getAxis('-x')

    # Equivalent to:
    # locator.attr('worldMatrix').x *-1


.. tip::

    The :func:`getAxis` method merely multiplies the vector representation of an axis by the matrix:

    .. code-block:: python

        matrix = locator.getMatrix(worldSpace=True)
        xVector = [1, 0, 0] * matrix

==============================
Controlling Length (Magnitude)
==============================

Use the :term:`universal` :func:`length` to get the magnitude of a vector. If the vector was derived from two points,
this will be the distance between them, for example:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            pointA = r.PyNode('locator1').attr('worldPosition')
            pointB = r.PyNode('locator2').attr('worldPosition')

            distance = (pointB-pointA).length()

    .. tab:: Graph

        .. figure:: vec_len_graph.png
            :align: center

To get a **unit** vector (meaning, a vector that has been *normalized* to a length of 1.0), you could divide a vector
by its length, or more simply use the :term:`universal` :func:`normal` method:


.. tabs::

    .. tab:: Paya

        .. code-block:: python

            vec = pointB-pointA
            vecN = vec / vec.length()

            # or:
            vecN = vec.normal()

    .. tab:: Graph

        .. figure:: vec_norm_graph.png
            :align: center

This is commonly followed by setting the length to something else:

.. code-block:: python

    vec = vec.normal() * 3.5


=============
Cross Product
=============

The cross product of two vectors is a vector that's perpendicular to both. It's useful for tasks such as orienting
chains. Use Paya's :term:`universal` :func:`cross` method to get a cross product:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            vec1 = loc1.attr('worldMatrix').y
            vec2 = loc2.attr('worldMatrix').y
            crossProduct = vec1.cross(vec2)

    .. tab:: Graph

        .. figure:: cross_product_graph.png
            :align: center

===========
Dot Product
===========

The **dot product** of two normalized (*unit*) vectors is a float value in the range of -1.0 to 1.0, typically used
to compare directions: When the dot product is -1.0, the two vectors are **opposed**; when it's 0.0, they are
**perpendicular**; when it's 1.0, they are **aligned**.

To get the dot product, use Paya's :func:`dot` method. Note that, if the vectors are non-normalized, the dot product
**won't** be in the -1.0 to 1.0 range. To correct this, you could normalize the vectors:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            dot = vec1.normal().dot(vec2.normal())

    .. tab:: Graph

        .. figure:: dot_explicit_norm_graph.png
            :align: center

A better way is to pass ``normalize=True`` to the method (only available in Paya). This isn't just a convenience: where
attributes are involved, it will use the ``normalizeOutputs`` option of the ``vectorProduct`` node to reduce graph
complexity:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            dot = vec1.dot(vec2, normalize=True)

    .. tab:: Graph

        .. figure:: dot_implicit_norm_graph.png
            :align: center

================
Measuring Angles
================

Use the :term:`universal` :func:`angle` method to get an unsigned, 0-180 angle between two vectors:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            angle = vec1.angle(vec2)

    .. tab:: Graph

        .. figure:: angle_via_ab.png
            :align: center

========================
Addition and Subtraction
========================

Vector addition has a couple of special uses in rigging. Firstly, it can be used to get a direct route from two
'stepwise' vectors:

.. code-block:: python

    vec1 = pointB-pointA
    vec2 = pointC-pointB

    vec3 = vec1 + vec2


.. figure:: direct_route_vec.png
    :align: center

    Schematic

Secondly, where the vectors are normalized, it can be used to find their **bisector**:

.. code-block:: python

    vec1 = pointB-pointA
    vec2 = pointC-pointA

    vec3 = vec1.normal() + vec2.normal()

.. figure:: bisecting_vector.png
    :align: center

    Schematic

Subtraction can be swapped-in for addition where you would otherwise have to reverse one of the vectors to get the
intended result. Consider a variant of the bisector example where one of the input vectors is facing the wrong way:

.. code-block:: python

    vec1 = pointB-pointA
    vec2 = pointA-pointC # not as we'd like it

    # One way to compensate
    vec3 = vec1 + (vec2 * -1)

    # More succinct, fewer nodes:
    vec3 = vec1 - vec2

.. figure:: inverted_bisector.png
    :align: center

    Schematic