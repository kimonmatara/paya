##########
Node Names
##########

======
Basics
======

Maya node names in production pipelines typically look like this: ``root_GRP``, ``L_arm_01_CTRL`` and so on. In other
words, several descriptive **prefixes**, followed by a **type suffix**, joined with underscores. Paya methods generate
names in this style by default.

Type suffixes are defined in a dictionary loaded from ``paya/lib/suffixes.json`` on startup. The suffix for rig controls
is mapped to a special key, ``payaControl``. The rest are mapped to node types, and largely derived from the four-
letter 'tags' in Maya's `Node Index <https://help.autodesk.com/view/MAYAUL/2023/ENU/?guid=__Nodes_index_html>`_.

Prefixes can be specified via ``name/n`` arguments, but it's better to construct them hierarchically using the
:class:`~paya.lib.names.Name` context manager on :mod:`paya.runtime`:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            def buildLegChain(points):
                for i, point in enumerate(points):
                    with r.Name(i+1, padding=3):
                        r.nodes.Locator.createNode()

            leftPoints = map(r.data.Point, [
                [0.0, 10.0, 0.0]
                [0.0, 5.0, 2.5]
                [0.0, 0.0, 0.0]
            ])

            mirrorMatrix = r.createMatrix(
                'x', [-1, 0, 0], 'y', [0, 1, 0], 'z', [0, 0, 1])

            rightPoints = [leftPoint ^ mirrorMatrix for leftPoint in leftPoints]

            for side, points in zip('LR', (leftPoints, rightPoints)):
                with r.Name(side, 'leg'):
                    buildLegChain(points)

    .. tab:: Result

        .. figure:: generated_names.png
            :align: center

The :class:`~paya.lib.names.Name` context manager confers the following advantages:

-   Logical name construction
-   Cuts across function scopes, removing the need to pass names around
-   Propagates to utility nodes, making dependency graphs easier to analyse
-   Allows you to specify padding for integer name elements

.. note::

    Type suffixes and the :class:`~paya.lib.names.Name` context manager are ignored by standard Maya commands:

    .. code-block:: python

        with r.Name('eye'):
            r.nodes.Joint.createNode() # Paya constructor flavour of createNode()
            # eye_JOIN

            r.createNode('joint') # Standard command doesn't manage names
            # joint1

    To use Paya-style node names with standard Maya commands, call
    :meth:`~paya.runtime.nodes.DependNode.makeName` on a relevant node type and pass the result along:

    .. code-block:: python

        with r.Name('eye'):
            name = r.nodes.Joint.makeName()
            r.createNode('joint', n=name)
            # eye_JOIN

    Pass ``control=True`` to :meth:`~paya.runtime.nodes.DependNode.makeName` to apply the suffix for rig
    controls.

====================
Modify Type Suffixes
====================

Paya type suffixes can be modified by editing ``paya/lib/suffixes.json`` directly. Changes won't be picked up until
:meth:`paya.lib.suffixes.load` is called or Maya is restarted. You can also edit the file indirectly like this:

1.  Manually rename some nodes in your scene using your preferred suffixes.
2.  Make sure that rig controls carry controller tags. (This will be the case by default if the controls were generated
    using :meth:`~paya.lib.controls.createControl`.)

3.  Call :meth:`paya.lib.suffixes.learnFromScene()`
4.  Call :meth:`paya.lib.suffixes.dump`

=======================
Disable Name Management
=======================

To disable type suffixes and / or :class:`~paya.lib.name.Name` blocks temporarily, use the 'override' functionality of
:mod:`paya.config` to set the ``suffixNodes`` and ``inheritNames`` keys:

.. code-block:: python

    import paya.config as config

    with config(suffixNodes=False, inheritNames=False):
        r.nodes.Joint.createNode()

To make the change permanent, edit ``paya/config.json`` directly and restart Maya.