****************
Drawing Controls
****************

======
Method
======

Paya's :class:`~paya.runtime.nodes.Transform` class provides a special constructor
for controls, :meth:`~paya.runtime.nodes.Transform.createControl`. For convenience, this is also available
directly on :mod:`paya.runtime`:

.. code-block:: python

    import paya.runtime as r

    r.nodes.Transform.createControl
    # Same as:
    r.createControl

Here's a rundown of the method's arguments:

=========
Arguments
=========

:name/n: ``None``, :class:`str`, :class:`int` or :class:`list`

    One or more prefixes for the control's name. Prefixes may also be inherited from :class:`~paya.lib.names.Name`
    blocks. The Paya suffix for rig controls will be applied automatically. See :doc:`Node Names <naming_nodes>` for
    more information.

:worldMatrix/wm: ``None``, :class:`list` or :class:`~paya.runtime.data.Matrix`; defaults to ``None``

    The matrix to apply to the offset group. This will define the control's 'zeroed' pose. You can take world matrices
    from other objects (for example, layout locators) or create them yourself.

    To take a world matrix from another object, use
    :meth:`Transform.getMatrix(worldSpace=True) <pymel.core.nodetypes.Transform.getMatrix>`. Particular attention
    should be given to *scale*. Inherited scale can be easy to miss, and will be carried over to the control. If this
    isn't intentional (for example, to create fully-mirrored controls), it can be hard to correct after the rig has
    received animation. To discard scale, use :meth:`Matrix.pick() <paya.runtime.data.Matrix.pick>`:

    .. code-block:: python

        layoutLoc = r.PyNode('L_foot_guide_LOCT')
        controlMatrix = layoutLoc.getMatrix(worldSpace=True).pick(scale=False)
        # Pass along to createControl() from here

    To create a matrix from scratch, use :func:`paya.runtime.createMatrix() <paya.lib.mathops.createMatrix>`. See
    :ref:`Creating Matrices <creating_matrices>` for more information.

:keyable/k, channelBox/cb: :class:`list` of :class:`str`; both default to ``[]``

    These arguments define which standard Maya attributes will be made available for keying or setting in the Channel
    Box. They take lists of short or long names, for example ``['tx', 'rotateOrder']``. Omitting both arguments will
    lead to an empty Channel Box; this can be useful if you plan to use the control solely for options and sliders that
    will be added afterwards.

:rotateOrder/k: :class:`int` or :class:`str`; defaults to ``'xyz'``

    The control's rotate order on build.

:shape/sh: :class:`str` or ``None``; defaults to ``'cube'``

    A library shape for the control. Use
    :meth:`paya.runtime.controlShapes.keys() <dict.keys>` to get a list of available shapes:

    .. code-block:: python

        print(sorted(r.controlShapesLibrary.keys()))
        # ['circle', 'cube', 'locator', 'lollipop', ...

:size/sz: :class:`float`; defaults to ``1.0``

    A scaling factor for the control shape.

:color/col: :class:`int` or :class:`None`; defaults to ``None``

    An override color index for the control shape. If this is omitted, no color will be applied.

:offsetGroups/og: ``None`` or :class:`str` or :class:`list` of :class:`str`; defaults to ``'offset'``

    A string or list of strings specifying the suffixes, and number, of transformationally-matched offset groups. Pass
    ``None`` to create a control with no offset groups.

:under/u: ``None``, :class:`str` or :class:`~paya.runtime.nodes.Transform`; defaults to ``None``

    An optional parent for the topmost offset group.

:pickWalkParent/pwp: ``None``, :class:`str` or :class:`~paya.runtime.nodes.Transform`; defaults to ``None``

    A node to shift to when the 'up' arrow key is pressed with the main control selected. Allows animators
    to skip offset groups when pick-walking complex hierarchies.

:asControl/ac: :class:`bool`, defaults to ``True``

    Set this to ``False`` to create a regular empty group instead of a control.

=======
Example
=======

In the following example, a custom matrix is used to create a control that's flat against the ground plane, but angled
along the foot of a leg chain:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            anklePoint = r.PyNode('joint3').getWorldPosition()
            toePoint = r.PyNode('joint5').getWorldPosition()
            ballPoint = r.PyNode('joint4').getWorldPosition()

            aimVec = [0, 1, 0]
            upVec = toePoint-anklePoint

            ctMatrix = r.createMatrix(
                'y', aimVec, 'z', upVec,
                translate=ballPoint
                )

            # Discard scale information
            ctMatrix = ctMatrix.pick(translate=True, rotate=True)

            with r.Name('R_foot_roll'):
                r.createControl(
                    worldMatrix=ctMatrix,
                    keyable=['t', 'r', 'ro'],
                    shape='sphere'
                    )

    .. tab:: Viewport

        .. figure:: ctrl_matrix.gif
            :align: center


    .. tab:: Outliner

        .. figure:: ctrl_hierarchy.png
            :align: center