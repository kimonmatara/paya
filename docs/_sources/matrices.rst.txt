********
Matrices
********

================
Relevant Classes
================

.. list-table::
    :header-rows: 1
    :widths: 200 200

    *   - Static
        - Dynamic
    *   - :class:`paya.runtime.data.Matrix`
        - :class:`paya.runtime.plugs.Matrix`

===========
Multiplying
===========

Static and dynamic matrices can be multiplied using the :term:`universal` ``*`` operator. Recall from :doc:`Operator
Basics <operator_basics>` that at least one of the operands must be an instance of
:class:`~pymel.core.general.Attribute` or :class:`~pymel.core.datatypes.Matrix`:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            driver1 = r.PyNode('locator1')
            driver2 = r.PyNode('locator2')
            driven = r.PyNode('pCube1')

            matrix = driver1.attr('worldMatrix') * driver2.attr('worldMatrix')
            matrix >>  driven.attr('offsetParentMatrix')

    .. tab:: Viewport

        .. figure:: mults_viewport.gif
            :align: center

=========
Inverting
=========

Use the :term:`universal` :func:`inverse` method to reverse a transformation:

.. code-block:: python

    matrix3 = matrix1 * matrix2
    matrix1 = matrix3 * matrix2.inverse()

.. _applying_matrices:

========
Applying
========

The most performant way in Maya to apply a matrix to a transform node is to set, or connect, the node's
``offsetParentMatrix`` input. This also has the advantage of leaving the SRT channels free for editing:

.. tabs::

    .. tab:: PyMEL / Paya

        .. code-block:: python

            driver = r.spaceLocator()
            driven = r.polyCube(ch=False)[0]

            driver.attr('worldMatrix') >> driven.attr('offsetParentMatrix')

    .. tab:: Viewport

        .. figure:: opm_drive.gif
            :align: center

.. _selective_application:

To modify SRT channels selectively via decomposition, use the :term:`universal` method
:meth:`~paya.runtime.plugs.Matrix.decomposeAndApply`. By default this accounts for ``rotateAxis`` and, on joints
only, ``jointOrient`` and ``inverseScale``. In the following example ``rotateAxis`` compensation is disabled for a
simpler network:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            driver.attr('worldMatrix').decomposeAndApply(
                driven,
                translate=True,
                rotate=True,
                compensateRotateAxis=False
                )

    .. tab:: Graph

            .. figure:: decomp_graph.png
                :align: center

=========
Filtering
=========

To quickly configure and connect a ``pickMatrix`` node, use :meth:`~paya.runtime.plugs.Matrix.pick`. This has also
been implemented on data classes. Here's a variant of the earlier :ref:`selective-application <selective_application>`
example without matrix decomposition:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            translationMatrix = locator1.attr('worldMatrix').pick(translate=True)
            rotationMatrix = locator2.attr('worldMatrix').pick(rotate=True)
            combinedMatrix = rotationMatrix * translationMatrix

            combinedMatrix >> cube.attr('offsetParentMatrix')

    .. tab:: Graph

        .. figure:: pickmatrix_graph.png
            :align: center

    .. tab:: Viewport

        .. figure:: decomp.gif
            :align: center

==========
Offsetting
==========

Use :meth:`~paya.runtime.plugs.Matrix.asOffset` to preserve relative pose when applying a dynamic matrix to a
transform. This is functionally the same as the ``maintainOffset`` option on Maya's constraints:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            initialPose = cube.getMatrix(worldSpace=True)
            matrix = initialPose * loc.attr('worldMatrix').asOffset()

            decomposition = matrix.decompose(ro=cube.attr('rotateOrder'))
            decomposition['translate'] >> cube.attr('translate')
            decomposition['rotate'] >> cube.attr('rotate')

    .. tab:: Graph

        .. figure:: maintainOffset_graph.png
            :align: center

    .. tab:: Viewport

        .. figure:: maintainOffset.gif
            :align: center

.. tip::
    *   When using a direct connection into ``offsetParentMatrix`` instead of decomposition, the above example won't
        work as-is. This is because the driven object's local transformation will be applied twice: once through
        ``initialPose``, and again by the untouched SRT channels themselves. To get around this, you could reset the
        driven object's local matrix to zero-out the SRT channels:

        .. code-block:: python

            loc.setMatrix(r.data.Matrix()) # identity matrix
            matrix >> loc.attr('offsetParentMatrix')

        Alternatively, you could 'dodge' the SRT channels by incorporating an inversion of the driven object's local
        matrix into the driver matrix:

        .. code-block:: python

            matrix = cube.getMatrix().inverse(
                ) * initialPose * loc.attr('worldMatrix').asOffset()

            matrix >> cube.attr('offsetParentMatrix')

    *   For polymorphic parity, ``asOffset`` has also been implemented on :class:`paya.runtime.data.Matrix`, where
        it merely returns an identity ('null') matrix.

    *   On the dynamic class, the expansion of :meth:`~paya.runtime.plugs.Matrix.asOffset` is:

        .. code-block:: python

            self.get().inverse() * self


.. _creating_matrices:

========
Creating
========

To create static or dynamic matrices from vectors and points, use the :term:`universal`
:func:`~paya.lib.mathops.createMatrix` function. Available on :mod:`paya.lib.mathops` as well as the top-level
:mod:`paya.runtime` interface, it's designed to use as few nodes and operations as possible.

Orthogonal Construction
-----------------------

An orthogonal matrix can be constructed by passing two *axis*:*vector* pairs as four arguments to
:func:`~paya.lib.mathops.createMatrix`. The first pair can be thought of as the 'aim', with the second as the 'up'.
Translation can be specified via the ``translate`` / ``t`` keyword argument, and there are additional options to control
the lengths of the second and third axis vectors:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            aim = locator1.attr('worldPosition')
            up = locator2.attr('worldPosition')

            matrix = r.createMatrix('z', aim, 'x', up).pick(r=True)
            matrix >> cube.attr('offsetParentMatrix')

    .. tab:: Graph

        .. figure:: ortho_matrix_graph.png
            :align: center

    .. tab:: Viewport

        .. figure:: ortho_matrix.gif
            :align: center


Explicit Assembly
-----------------

To specify a matrix completely, pass three *axis*:*vector* pairs (i.e. six arguments) to
:func:`~paya.lib.mathops.createMatrix` instead. If the input vectors are not orthogonal, the result will be a shear
matrix:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            cube = r.PyNode('pCube1')
            zVector = r.PyNode('locator1').attr('worldPosition')
            xVector = r.PyNode('locator2').attr('worldPosition')
            yVector = [0, 1, 0]

            matrix = r.createMatrix('z', zVector, 'x', xVector, 'y', yVector)

            matrix >> cube.attr('offsetParentMatrix')

    .. tab:: Graph

        .. figure:: shear_matrix.png
            :align: center

    .. tab:: Viewport

        .. figure:: shear_matrix.gif
            :align: center

.. tip::

    To quickly create scale-only matrices with simpler arguments, use the convenience function
    :func:`~paya.lib.mathops.createScaleMatrix`, also available on :mod:`paya.runtime`.

=============
Quick Testing
=============

To quickly test a matrix, call :func:`createLocator` / :func:`cl` on any static matrix or matrix attribute. This will
create a locator to represent the matrix:

.. code-block:: python

    loc = matrix.createLocator()