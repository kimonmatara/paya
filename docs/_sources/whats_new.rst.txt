##########
What's New
##########

*************
Version 0.5.2
*************

*   Added ``clockNormal`` option to :meth:`data.Vector.angle() <paya.runtime.data.Vector.angle>` and
    :meth:`plugs.Vector.angle() <paya.runtime.plugs.Vector.angle>` for 360 angle calcs
*   *Removed* ``axisAngle`` / ``euler`` options from :meth:`plugs.Vector.angle() <paya.runtime.plugs.Vector.angle>` for
    simplicity and parity with the data version
*   Fixed a bug on :meth:`plugs.Vector.dot() <paya.runtime.plugs.Vector.dot>` when called with ``normalize=True``
*   Documentation refactored to rationalise class links; many broken links fixed


------

*************
Version 0.5.1
*************

General Changes
===============

In deference to the Python tenet of `Flat is Better than Nested <https://peps.python.org/pep-0020/>`_, the
``ControlShapesManager`` class has been removed, and the ``controlShapes`` attribute on
:class:`~paya.runtime.nodes.Transform` nodes replaced by regular methods such as
:meth:`Transform.setCtShapes() <paya.runtime.nodes.Transform.setCtShapes>`. See :doc:`Controls <controls>` for
updated information.

------

***********
Version 0.5
***********

Additions to paya.runtime
=========================

*   ``controlShapesLibrary`` (instance of :class:`~paya.lib.controls.ControlShapesLibrary`)
*   :func:`~paya.lib.controls.createControl`

Additions to Node Types
=======================

*   On :class:`~paya.runtime.nodes.DependNode`:

    :meth:`~paya.runtime.nodes.DependNode.basename`
    :attr:`~paya.runtime.nodes.DependNode.attrSections`
    :meth:`~paya.runtime.nodes.DependNode.addAttr` (overload)
    :meth:`~paya.runtime.nodes.DependNode.maskAnimAttrs`
    :meth:`~paya.runtime.nodes.DependNode.reorderAttrs`
    :meth:`~paya.runtime.nodes.DependNode.getReorderableAttrs`
    :meth:`~paya.runtime.nodes.DependNode.getReorderableAttrNames`
    :meth:`~paya.runtime.nodes.DependNode.addSectionAttr`
    :meth:`~paya.runtime.nodes.DependNode.getSectionAttrs`
    :meth:`~paya.runtime.nodes.DependNode.getAttrSectionMembership`

*   On :class:`~paya.runtime.nodes.DagNode`:

    :meth:`~paya.runtime.nodes.DagNode.getWorldMatrix`
    :meth:`~paya.runtime.nodes.DagNode.getWorldPosition`
    :meth:`~paya.runtime.nodes.DagNode.basename`
    :meth:`~paya.runtime.nodes.DagNode.isControl`
    :meth:`~paya.runtime.nodes.DagNode.setPickWalkParent`
    :meth:`~paya.runtime.nodes.DagNode.getPickWalkParent`

*   On :class:`~paya.runtime.nodes.Transform`:
    :meth:`~paya.runtime.nodes.Transform.create`
    :meth:`~paya.runtime.nodes.Transform.releaseSRT`
    :meth:`~paya.runtime.nodes.Transform.createOffsetGroups`
    ``controlShapes/cs`` (instance of :class:`~paya.lib.controls.ControlShapesManager`)
    :meth:`~paya.runtime.nodes.Transform.conformShapeNames`

*   On :class:`~paya.runtime.nodes.Locator`:
    :meth:`~paya.runtime.nodes.Locator.macro`
    :meth:`~paya.runtime.nodes.Locator.createFromMacro`

*   On :class:`~paya.runtime.nodes.NurbsCurve`:
    :meth:`~paya.runtime.nodes.NurbsCurve.macro`
    :meth:`~paya.runtime.nodes.NurbsCurve.createFromMacro`

Additions to Plug Types
=======================

*   On :class:`~paya.runtime.plugs.Attribute`:
    :meth:`~paya.runtime.plugs.Attribute.lock` (overload)
    :meth:`~paya.runtime.plugs.Attribute.unlock` (overload)
    :meth:`~paya.runtime.plugs.Attribute.hide`
    :meth:`~paya.runtime.plugs.Attribute.show`
    :meth:`~paya.runtime.plugs.Attribute.disable`
    :meth:`~paya.runtime.plugs.Attribute.enable`
    :meth:`~paya.runtime.plugs.Attribute.sendAbove`
    :meth:`~paya.runtime.plugs.Attribute.sendBelow`
    :meth:`~paya.runtime.plugs.Attribute.isAnimatableDynamic`
    :meth:`~paya.runtime.plugs.Attribute.release`

Additions to General Classes
============================

*   On :class:`~paya.lib.controls.ControlShapesLibrary`:
    :meth:`~paya.lib.controls.ControlShapesLibrary.load`
    :meth:`~paya.lib.controls.ControlShapesLibrary.dump`
    :meth:`~paya.lib.controls.ControlShapesLibrary.applyToControls`
    :meth:`~paya.lib.controls.ControlShapesLibrary.addFromControl`
    (plus magic methods)

*   On :class:`~paya.lib.controls.ControlShapesManager`:
    :meth:`~paya.lib.controls.ControlShapesManager.copyTo`
    :meth:`~paya.lib.controls.ControlShapesManager.getColor`
    :meth:`~paya.lib.controls.ControlShapesManager.setColor`
    :meth:`~paya.lib.controls.ControlShapesManager.clearColor`
    :meth:`~paya.lib.controls.ControlShapesManager.clear`
    :meth:`~paya.lib.controls.ControlShapesManager.scale`
    :meth:`~paya.lib.controls.ControlShapesManager.rotate`
    :meth:`~paya.lib.controls.ControlShapesManager.setFromLib`
    :meth:`~paya.lib.controls.ControlShapesManager.addToLib`
    :meth:`~paya.lib.controls.ControlShapesManager.cycle`
    (plus magic methods)

*   On :class:`~paya.lib.attrs.Section`:
    :meth:`~paya.lib.attrs.Section.sendAbove`
    :meth:`~paya.lib.attrs.Section.sendBelow`
    :meth:`~paya.lib.attrs.Section.collect`
    (plus magic methods)

*   On :class:`~paya.lib.attrs.Sections`:
    :meth:`~paya.lib.attrs.Sections.names`
    :meth:`~paya.lib.attrs.Sections.add`
    :meth:`~paya.lib.attrs.Sections.clear`
    (plus magic methods)

------

*************
Version 0.4.3
*************

Bugs Fixed
==========

*   :meth:`paya.runtime.nodes.DependNode.makeName` ignores ``name/n`` arguments

-----

*************
Version 0.4.2
*************

General Changes
===============

*   :meth:`paya.runtime.plugs.Matrix.decomposeAndApply` and :meth:`paya.runtime.data.Matrix.decomposeAndApply`
    escape into simpler / faster implementations when no ``rotateAxis``, ``jointOrient``, ``inverseScale`` or pivot
    compensations are requested or required

-----

*************
Version 0.4.1
*************

General Changes
===============

*   Smarter defaults handling on :meth:`paya.runtime.nodes.IkHandle.create`
*   Added :doc:`IK Handles <ik>` section to documentation
*   Removed :meth:`~paya.lib.skel.Chain` subclasses to simplify

Bugs Fixed
==========

*   :meth:`~paya.lib.skel.Chain.createFromCurve` fails with error about missing 'override' object
*   Missing :meth:`~paya.lib.skel.Chain.createIkHandle`
*   :meth:`~paya.lib.skel.Chain.orient` does not return ``self``

-----

***********
Version 0.4
***********

General Changes
===============

*   Naming arguments on :meth:`~paya.runtime.nodes.DependNode.createNode` and elsewhere have been simplified,
    with many moved into :mod:`paya.config` instead.

Additions to Modules
====================

*   Added :mod:`paya.config`
*   Added :mod:`paya.lib.skel`, including :class:`~paya.lib.skel.Chain` and subclasses

Additions to Data Types
=======================

*   On :class:`~paya.runtime.data.Vector`:
    :meth:`~paya.runtime.data.Vector.rotateByAxisAngle`
    :meth:`~paya.runtime.data.Vector.asScaleMatrix`

*   On :class:`~paya.runtime.data.Matrix`:
    :meth:`~paya.runtime.data.Matrix.decomposeAndApply`

Additions / Changes to Plug Types
=================================

*   On :class:`~paya.runtime.plugs.Attribute`:
    :meth:`~paya.runtime.plugs.Attribute.release`

*   On :class:`~paya.runtime.plugs.Compound`:
    :meth:`~paya.runtime.plugs.Compound.release`
    :meth:`~paya.runtime.plugs.Compound.splitInputs`

*   On :class:`~paya.runtime.plugs.Vector`:
    :meth:`~paya.runtime.plugs.Vector.rotateByAxisAngle`

*   On :class:`~paya.runtime.plugs.Angle`:
    :meth:`~paya.runtime.plugs.Angle.set`

*   On :class:`~paya.runtime.plugs.EulerRotation`:
    :meth:`~paya.runtime.plugs.EulerRotation.set` now auto-converts units when the value is an
    :class:`~paya.runtime.data.EulerRotation`; added
    :meth:`~paya.runtime.plugs.EulerRotation.asRotateMatrix`

*   On :class:`~paya.runtime.plugs.Matrix`:
    :meth:`~paya.runtime.plugs.Matrix.decomposeAndApply`

Additions to Node Types
=======================

*   On :class:`~paya.runtime.nodes.Transform`:
    :meth:`~paya.runtime.nodes.Transform.releaseSRT`
    :meth:`~paya.runtime.nodes.Transform.getWorldMatrix`
    :meth:`~paya.runtime.nodes.Transform.getWorldPosition`
    :meth:`~paya.runtime.nodes.Transform.getRotateAxisMatrix`

*   On :class:`~paya.runtime.nodes.Joint`:
    :meth:`~paya.runtime.nodes.Joint.skinClusters`
    :meth:`~paya.runtime.nodes.Joint.ikHandles`
    :meth:`~paya.runtime.nodes.Joint.chainFromHere`
    :meth:`~paya.runtime.nodes.Joint.getJointOrientMatrix`

*   On :class:`~paya.runtime.nodes.IkHandle`:
    :meth:`~paya.runtime.nodes.IkHandle.create`
    :meth:`~paya.runtime.nodes.IkHandle.getEndJoint`
    :meth:`~paya.runtime.nodes.IkHandle.getJointList` (overload for ``includeTip``)
    :meth:`~paya.runtime.nodes.IkHandle.chain`
    :meth:`~paya.runtime.nodes.IkHandle.setTwistVectors`
    :meth:`~paya.runtime.nodes.IkHandle.setPolePoint`

*   On :class:`~paya.runtime.nodes.NurbsCurve`:
    :meth:`~paya.runtime.nodes.NurbsCurve.takeClosestPoint`
    :meth:`~paya.runtime.nodes.NurbsCurve.takePointAtParam`
    :meth:`~paya.runtime.nodes.NurbsCurve.takeParamAtFraction`
    :meth:`~paya.runtime.nodes.NurbsCurve.takePointAtFraction`
    :meth:`~paya.runtime.nodes.NurbsCurve.distributePoints`

Additions to General Classes
============================

*   On :class:`~paya.lib.skel.Chain`:
    :meth:`~paya.lib.skel.Chain.getFromStartEnd`
    :meth:`~paya.lib.skel.Chain.getFromRoot`
    :meth:`~paya.lib.skel.Chain.createFromMatrices`
    :meth:`~paya.lib.skel.Chain.createFromPoints`
    :meth:`~paya.lib.skel.Chain.createFromCurve`
    :meth:`~paya.lib.skel.Chain.createFromCurve`
    :meth:`~paya.lib.skel.Chain.orient`
    :meth:`~paya.lib.skel.Chain.bones`
    :meth:`~paya.lib.skel.Chain.vectors`
    :meth:`~paya.lib.skel.Chain.points`
    :meth:`~paya.lib.skel.Chain.contiguous`
    :meth:`~paya.lib.skel.Chain.roots`
    :meth:`~paya.lib.skel.Chain.length`
    :meth:`~paya.lib.skel.Chain.subdivideAtRatios`
    :meth:`~paya.lib.skel.Chain.skinClusters`
    :meth:`~paya.lib.skel.Chain.ikHandles`
    :meth:`~paya.lib.skel.Chain.downAxis`
    :meth:`~paya.lib.skel.Chain.duplicate`
    :meth:`~paya.lib.skel.Chain.rename`
    :meth:`~paya.lib.skel.Chain.compose`
    :meth:`~paya.lib.skel.Chain.explode`
    :meth:`~paya.lib.skel.Chain.appendChain`
    :meth:`~paya.lib.skel.Chain.getPolePoint`
    :meth:`~paya.lib.skel.Chain.autoPreferredAngle`
    :meth:`~paya.lib.skel.Chain.reset`
    :meth:`~paya.lib.skel.Chain.createIkHandle`
    :meth:`~paya.lib.skel.Chain.createIkHandles`

*   On :class:`~paya.lib.skel.Bone`:
    :meth:`~paya.lib.skel.Bone.subdivide`

----

***********
Version 0.3
***********

General Changes
===============

The abstract plug tree has been reworked to make names more intuitive and to better support angles
and euler rotations.

Bugs Fixed
==========

*   Contextual naming misapplied when
    :meth:`~paya.runtime.nodes.DependNode.createNode` is used for shapes
*   Some :term:`universal` operators don't work properly when called on
    :class:`paya.runtime.data.Point` rather than :class:`paya.runtime.data.Vector`

Additions to Modules
====================

*   On :mod:`paya.lib.mathops`: :func:`~paya.lib.mathops.createMatrix` :func:`~paya.lib.mathops.asValue`

Additions to Node Types
=======================

*   On :class:`~paya.runtime.nodes.FourByFourMatrix`:
    :meth:`~paya.runtime.nodes.FourByFourMatrix.getAxis`
    :meth:`~paya.runtime.nodes.FourByFourMatrix.getX`
    :meth:`~paya.runtime.nodes.FourByFourMatrix.getY`
    :meth:`~paya.runtime.nodes.FourByFourMatrix.getZ`
    :meth:`~paya.runtime.nodes.FourByFourMatrix.getTranslate`
    :attr:`translate/t`
    :attr:`x` :attr:`y` :attr:`z`

*   On :class:`~paya.runtime.nodes.Shape`: :meth:`~paya.runtime.nodes.Shape.createNode`

Additions to Plug Types
=======================

*   On :class:`~paya.runtime.plugs.Attribute`:
    :meth:`~paya.runtime.plugs.Attribute.plugType`

*   On :class:`~paya.runtime.plugs.Angle`:
    :meth:`~paya.runtime.plugs.Angle.get`

*   On :class:`~paya.runtime.plugs.Compound`:
    :meth:`~paya.runtime.plugs.Compound.__iter__`

*   On :class:`~paya.runtime.plugs.Enum`:
    :meth:`~paya.runtime.plugs.Enum.put`

*   On :class:`~paya.runtime.plugs.EulerRotation`:
    :meth:`~paya.runtime.plugs.EulerRotation.get`
    :meth:`~paya.runtime.plugs.EulerRotation.isRotateChannel`
    :meth:`~paya.runtime.plugs.EulerRotation.asQuaternion`
    :meth:`~paya.runtime.plugs.EulerRotation.asRotateMatrix`

*   On :class:`~paya.runtime.plugs.Math1D`:
    :meth:`~paya.runtime.plugs.Math1D.sqrt`
    :meth:`~paya.runtime.plugs.Math1D.__neg__`
    :meth:`~paya.runtime.plugs.Math1D.abs`
    :meth:`~paya.runtime.plugs.Math1D.cycle`
    :meth:`~paya.runtime.plugs.Math1D.remap`
    :meth:`~paya.runtime.plugs.Math1D.clamp`
    :meth:`~paya.runtime.plugs.Math1D.minClamp`
    :meth:`~paya.runtime.plugs.Math1D.min`
    :meth:`~paya.runtime.plugs.Math1D.eq`
    :meth:`~paya.runtime.plugs.Math1D.ne`
    :meth:`~paya.runtime.plugs.Math1D.gt`
    :meth:`~paya.runtime.plugs.Math1D.ge`
    :meth:`~paya.runtime.plugs.Math1D.lt`
    :meth:`~paya.runtime.plugs.Math1D.le`
    :meth:`~paya.runtime.plugs.Math1D.choose`
    :meth:`~paya.runtime.plugs.Math1D.blend`
    :meth:`~paya.runtime.plugs.Math1D.unaryExpr`
    :meth:`~paya.runtime.plugs.Math1D.degrees`
    :meth:`~paya.runtime.plugs.Math1D.radians`
    :meth:`~paya.runtime.plugs.Math1D.cos`
    :meth:`~paya.runtime.plugs.Math1D.sin`
    :meth:`~paya.runtime.plugs.Math1D.tan`
    :meth:`~paya.runtime.plugs.Math1D.acos`
    :meth:`~paya.runtime.plugs.Math1D.asin`
    :meth:`~paya.runtime.plugs.Math1D.atan`
    :meth:`~paya.runtime.plugs.Math1D.atTime`

*   On :class:`~paya.runtime.plugs.Math3D`:
    :meth:`~paya.runtime.plugs.Math3D.get`
    :meth:`~paya.runtime.plugs.Math3D.blend`

*   On :class:`~paya.runtime.plugs.Matrix`:
    :meth:`~paya.runtime.plugs.Matrix.createLocator`
    :meth:`~paya.runtime.plugs.Matrix.pick`
    :meth:`~paya.runtime.plugs.Matrix.inverse`
    :meth:`~paya.runtime.plugs.Matrix.asOffset`
    :meth:`~paya.runtime.plugs.Matrix.getAxis`
    :meth:`~paya.runtime.plugs.Matrix.getX`
    :meth:`~paya.runtime.plugs.Matrix.getY`
    :meth:`~paya.runtime.plugs.Matrix.getZ`
    :meth:`~paya.runtime.plugs.Matrix.getTranslate`
    :attr:`x` :attr:`y` :attr:`z` :attr:`translate/t`
    :meth:`~paya.runtime.plugs.Matrix.transpose`
    :meth:`~paya.runtime.plugs.Matrix.decompose`
    :meth:`~paya.runtime.plugs.Matrix.hold`
    :meth:`~paya.runtime.plugs.Matrix.asEulerRotation`
    :meth:`~paya.runtime.plugs.Matrix.asQuaternion`

*   On :class:`~paya.runtime.plugs.Quaternion`:
    :meth:`~paya.runtime.plugs.Quaternion.inverse`
    :meth:`~paya.runtime.plugs.Quaternion.normal`
    :meth:`~paya.runtime.plugs.Quaternion.conjugate`
    :meth:`~paya.runtime.plugs.Quaternion.blend`
    :meth:`~paya.runtime.plugs.Quaternion.asEulerRotation`
    :meth:`~paya.runtime.plugs.Quaternion.asAxisAngle`
    :meth:`~paya.runtime.plugs.Quaternion.asRotateMatrix`

*   On :class:`~paya.runtime.plugs.String`:
    :meth:`~paya.runtime.plugs.String.put`

*   On :class:`~paya.runtime.plugs.Vector`:
    :meth:`~paya.runtime.plugs.Vector.dot`
    :meth:`~paya.runtime.plugs.Vector.length`
    :meth:`~paya.runtime.plugs.Vector.normal`
    :meth:`~paya.runtime.plugs.Vector.cross`
    :meth:`~paya.runtime.plugs.Vector.angle`
    :meth:`~paya.runtime.plugs.Vector.asTranslateMatrix`
    :meth:`~paya.runtime.plugs.Vector.asScaleMatrix`
    :meth:`~paya.runtime.plugs.Vector.asEulerRotation`

Additions to Data Types
=======================


*   On :class:`~paya.runtime.data.EulerRotation`:
    :meth:`~paya.runtime.data.EulerRotation.__add__`
    :meth:`~paya.runtime.data.EulerRotation.__radd__`
    :meth:`~paya.runtime.data.EulerRotation.__sub__`
    :meth:`~paya.runtime.data.EulerRotation.__mul__`
    :meth:`~paya.runtime.data.EulerRotation.__rmul__`
    :meth:`~paya.runtime.data.EulerRotation.__truediv__`
    :meth:`~paya.runtime.data.EulerRotation.__rtruediv__`
    :meth:`~paya.runtime.data.EulerRotation.__pow__`
    :meth:`~paya.runtime.data.EulerRotation.__rpow__`

*   On :class:`~paya.runtime.data.Matrix`:
    :meth:`~paya.runtime.data.Matrix.createLocator`
    :meth:`~paya.runtime.data.Matrix.decompose`
    :meth:`~paya.runtime.data.Matrix.pick`
    :meth:`~paya.runtime.data.Matrix.asOffset`
    :meth:`~paya.runtime.data.Matrix.hold`
    :meth:`~paya.runtime.data.Matrix.getAxis`
    :meth:`~paya.runtime.data.Matrix.setAxis`
    :meth:`~paya.runtime.data.Matrix.getX`
    :meth:`~paya.runtime.data.Matrix.setX`
    :meth:`~paya.runtime.data.Matrix.getY`
    :meth:`~paya.runtime.data.Matrix.setY`
    :meth:`~paya.runtime.data.Matrix.getZ`
    :meth:`~paya.runtime.data.Matrix.setZ`
    :meth:`~paya.runtime.data.Matrix.getTranslate`
    :meth:`~paya.runtime.data.Matrix.setTranslate`
    :attr:`~paya.runtime.data.Matrix.x`
    :attr:`~paya.runtime.data.Matrix.y`
    :attr:`~paya.runtime.data.Matrix.z`
    :attr:`~paya.runtime.data.Matrix.translate` / :attr:`~paya.runtime.data.Matrix.t`

*   On :class:`~paya.runtime.data.Point`:
    :meth:`~paya.runtime.data.Point.__add__`
    :meth:`~paya.runtime.data.Point.__radd__`
    :meth:`~paya.runtime.data.Point.__sub__`
    :meth:`~paya.runtime.data.Point.__rsub__`
    :meth:`~paya.runtime.data.Point.__mul__`
    :meth:`~paya.runtime.data.Point.__rmul__`
    :meth:`~paya.runtime.data.Point.__truediv__`
    :meth:`~paya.runtime.data.Point.__rtruediv__`
    :meth:`~paya.runtime.data.Point.__pow__`
    :meth:`~paya.runtime.data.Point.__rpow__`

*   On :class:`~paya.runtime.data.Vector`:
    :meth:`~paya.runtime.data.Vector.blend`
    :meth:`~paya.runtime.data.Vector.dot`
    :meth:`~paya.runtime.data.Vector.cross`
    :meth:`~paya.runtime.data.Vector.angle`

-----

***********
Version 0.2
***********

Additions
=========

*   A wide range of maths operators, spread across :doc:`paya/plugtypes` and :doc:`paya/datatypes`, with support for
    bidirectional mixing of values and plugs
*   Added  :meth:`~paya.runtime.plugs.AttributeMath16D.pick` and
    :meth:`~paya.runtime.plugs.AttributeMath16D.asOffset`
    to :class:`~paya.runtime.plugs.AttributeMath16D`
*   Added  :meth:`~paya.runtime.data.Matrix.pick` and :meth:`~paya.runtime.data.Matrix.asOffset`
    to :class:`~paya.runtime.data.Matrix`
*   :meth:`~paya.runtime.plugs.Attribute.get` returns :ref:`more useful types <More Useful Query Types>`
*   The double-chevron operator ``>>`` :ref:`now supports value-setting <Extended Chevrons>`
*   :doc:`Contextual name management <naming_nodes>` with :class:`paya.lib.names.Name` and pipeline suffixes
*   :ref:`Dodge unit conversion nodes <Preventing Unit Conversions>` with :class:`paya.lib.mathops.NativeUnits` and :func:`paya.lib.mathops.nativeUnits`

-----

***********
Version 0.1
***********

Additions
=========

*   Patching engine
*   :mod:`paya.runtime` interface