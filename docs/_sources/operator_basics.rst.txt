***************
Operator Basics
***************

================
Valid Statements
================

There isn't much to learn about operators in Paya; there are no special modules to import or wrappers to use. The main
difference from unpatched PyMEL is that statements that would have previously errored now 'just work':

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            # Get a vector between two locators
            vec = loc2.attr('translate') - loc1.attr('translate')

            # Normalize the vector; the normal() method here is a dynamic
            # version of pymel.core.datatypes.Vector.normal()
            vec = vec.normal()

            # Transform the vector by a group's world matrix; notice that the
            # right operand can be passed as a string
            vec *= 'group1.worldMatrix'

    .. tab:: PyMEL

        .. code-block:: python

            # Get a vector between two locators
            pma = p.createNode('plusMinusAverage')
            pma.attr('operation').set(2)
            loc2.attr('translate') >> pma.attr('input3D')[0])
            loc1.attr('translate') >> pma.attr('input3D')[1])

            # Normalize the vector
            db = p.createNode('distanceBetween')
            pma.attr('output3D') >> db.attr('point2')

            mdv = p.createNode('multiplyDivide')
            mdv.attr('operation').set(2)
            pma.attr('output3D') >> mdv.attr('input1')

            for child in mdv.attr('input2').getChildren():
                db.attr('distance') >> child

            # Transform the vector by a group's world matrix
            pmm = p.createNode('pointMatrixMult')
            pmm.attr('vectorMultiply').set(True)
            mdv.attr('output') >> pmm.attr('inPoint')
            p.PyNode('group1').attr('worldMatrix') >> pmm.attr('inMatrix')
            vec = pmm.attr('output')

However, statements such as the following may error, or yield unexpected results:

.. code-block:: python

    vec = 'locator2.translate' - 'locator1.translate'
    'locator1.translate' * [3.0, 1.0, 0.0]

This is because when both operands are simple Python types (such as :class:`str` or :class:`list`), intent becomes
unclear.

=================
Mixing Dimensions
=================

Dimensions can be mixed wherever relevant and possible, typically by repeating a scalar input across a compound's
children. This is useful for things such as dynamic editing of vector lengths:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            vec = p.PyNode('locator1').attr('translate')
            vec *= 3.0

    .. tab:: PyMEL

        .. code-block:: python

            vec = p.PyNode('locator1').attr('translate')
            mdv = p.createNode('multiplyDivide')
            vec >> mdv.attr('input1')

            for child in mdv.attr('input2').getChildren():
                child.set(3.0)

            vec = mdv.attr('output')

========================
Operator Implementations
========================

The same operator may be implemented differently depending on operands. For example, in the case of ``*``,
**elementwise multiplication** (using ``doubleLinear`` or ``multiplyDivide``) is performed if the operands are 1D or 3D;
however, as soon as matrices are involved, then **matrix multiplication** (using ``pointMatrixMult`` or ``matrixMult``)
is used instead.

=======
Helpers
=======

Paya adds a few enhancements to bootstrap free mixing of attributes and values.

*   A new method, :meth:`~paya.plugtypes.attribute.Attribute.put`, can be used to set, or connect to, an attribute
    depending on whether the argument is an attribute or value:

    .. code-block:: python

        loc.attr('translate').put([0.0, 1.0, 0.5]) # sets
        loc1.attr('translate').put('locator2.translate') # connects


.. _Extended Chevrons:

*   PyMEL's popular double-chevron (``>>``) connection operator has been extended to support value-setting, and to
    work when the left operand is a simple string:

    .. code-block:: python

        loc1.attr('rx') >> loc2.attr('rx') # standard PyMEL
        [0.0, 1.0, 0.5] >> loc.attr('translate') # Paya: set
        'locator2.rx' >> loc.attr('rx') # Paya: connect
        'This node does something awesome' >> loc.attr('notes') # string attrs are never connected
        'yxz' >> loc.attr('rotateOrder') # enum keys are detected and set


.. _More Useful Query Types:

*   :meth:`~paya.plugtypes.attribute.Attribute.get` returns more relevant types. Specifically:

    *   On ``translate`` channels, :meth:`~paya.plugtypes.attribute.Attribute.get` returns an instance of
        :class:`~paya.datatypes.point.Point`

    *   On attributes of type ``doubleAngle`` (for example, ``rotateX``),
        :meth:`~paya.plugtypes.attribute.Attribute.get` returns an instance of :class:`~paya.datatypes.angle.Angle`

    *   On compounds of three angles, :meth:`~paya.plugtypes.attribute.Attribute.get` returns an instance of
        :class:`~paya.datatypes.eulerRotation.EulerRotation`

    *   On compounds of four scalars, :meth:`~paya.plugtypes.attribute.Attribute.get` returns an instance of
        :class:`~paya.datatypes.quaternion.Quaternion`