***************************
paya.runtime.parts.PartBase
***************************

.. py:currentmodule:: paya.runtime.parts

.. py:class:: PartBase(groupNode)

    .. rubric:: Inheritance

    :class:`~paya.trunk.Trunk`

    Abstract base class for :class:`~paya.runtime.parts.Part` and
    :class:`~paya.runtime.parts.PartGuide`.

    .. py:classmethod:: create()
    
        Stub constructor.
        
        :return: A fully configured empty part.
        :rtype: :class:`Part`
    
    .. py:classmethod:: createNode()
    
        Creates the basic transform (group) node for the part.
        
        :return: The initialised group node.
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:classmethod:: _getCreateNameContext()
    
        Called before a build wrapped by
        :func:`~paya.part.partcreator.partCreator` to establish the naming
        environment.
        
        :return: A configured context manager.
        :rtype: :class:`~paya.lib.names.Name`
    
    .. py:method:: _postCreate()
    
        Called at the end of a build wrapped by
        :func:`~paya.part.partcreator.partCreator`.
        
        The base implementation does the following:
        
        -   Automatically configures visibility attributes for
            ``joints`` and ``controls`` first-level subgroups
    
    .. py:method:: getCreateArgsKwargs()
    
        :raises NotImplementedError: Not implemented on this class.
        :return: The positional and keyword arguments required to recreate
            this part / guide with the same configuration.
        :rtype: (:class:`tuple`, :class:`dict`)
    
    .. py:method:: node()
    
        :return: The wrapped transform (group) node.
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: basename()
    
        :return: The short name of the group node, without the type suffix.
        :rtype: :class:`str`
    
    .. py:method:: getControls()
    
        :return: All transform nodes under the part group for which
            :meth:`~paya.runtime.nodes.DependNode.isControl` returns ``True``.
        :rtype: [:class:`~paya.runtime.nodes.Transform`]
    
    .. py:method:: getPatchbay(create=True)
    
        Returns a general-utility ``network`` node connected to this part's
        group node.
        
        :param bool create: create the ``network`` node if it doesn't already
            exist; defaults to ``True``
        :return: The ``network`` node.
        :rtype: :class:`~paya.runtime.nodes.Network`
    
    .. py:method:: getByTag(tag, nodes=True, attrs=True)
    
        :param str tag: the tag
        :param bool nodes: include nodes in the returned list; defaults to
            ``True``
        :param bool attrs: include attributes in the returned list; defaults
            to ``True``
        :return: A list of nodes and / or attributes with the specified tag.
        :rtype: [:class:`~paya.runtime.nodes.DependNode`,
            :class:`~paya.runtime.plugs.Attribute`]
    
    .. py:method:: getNodesByTag(tag)
    
        Equivalent to ``getByTag(tag, nodes=True)``.
    
    .. py:method:: getAttrsByTag(tag)
    
        Equivalent to ``getByTag(tag, attrs=True)``.
    
    .. py:method:: clearTag(tag)
    
        :param str tag: the tag to remove
    
    .. py:method:: clearTags(*tags)
    
        :param \*tags: the tag(s) to remove; if omitted, all tags will
            be removed
        :type \*tags: :class:`str`, [:class:`str`]
    
    .. py:method:: getTags()
    
        :return: A list of tags used by this part.
        :rtype: [:class:`str`]
    
    .. py:method:: tag(tag, *nodesOrAttrs)
    
        Tags nodes and attributes for later retrieval by :meth:`getByTag`,
        :meth:`getNodesByTag` or :meth:`getAttrsByTag`.
        
        :param str tag: the name of the tag to apply
        :param \*nodesOrAttrs: nodes or attributes to apply the tag to
        :type \*nodesOrAttrs: :class:`str`,
            :class:`~paya.runtime.nodes.DependNode`,
            :class:`~paya.runtime.plugs.Attribute`,
            [:class:`str`, :class:`~paya.runtime.nodes.DependNode`,
            :class:`~paya.runtime.plugs.Attribute`]
    
    .. py:method:: __str__()
    
        Return str(self).