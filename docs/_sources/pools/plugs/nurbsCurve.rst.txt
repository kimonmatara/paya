*****************************
paya.runtime.plugs.NurbsCurve
*****************************

.. py:currentmodule:: paya.runtime.plugs

.. py:class:: NurbsCurve(*args, **kwargs)

    .. py:classmethod:: createArc(*points, directionVector=None, radius=1.0, toggleArc=False, sections=8, degree=3, guard=None)
    
        :param points: two or three points, packed or unpacked
        :type points: tuple, list, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.data.Vector`
        :param directionVector/dv:
            on two-point arcs this defaults to [0, 0, 1] (Z) and defines
            the arc's 'normal';
            on three point arcs it must be provided explicitly if 'guard'
            is requested, and it is used to jitter the input points to avoid
            Maya errors
        :type directionVector/dv: None, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param radius/r: for two-point arcs only: the arc radius; defaults to
            1.0
        :type radius/r: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool toggleArc/tac: for two-point arcs only: draw the arc
            on the outside; defaults to False
        :param sections/s: the number of arc sections; defaults to 8
        :type sections/s: int, :class:`~paya.runtime.plugs.Math1D`
        :param degree/d: the arc degree; defaults to 3
        :type degree/d: int, :class:`~paya.runtime.plugs.Math1D`
        :param bool guard: for three-point arcs only: prevent the arc
            from disappearing with an error when the input points are
            collinear; defaults to True if *directionVector* was provided,
            otherwise False.
        :return: An output for a circular arc.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:classmethod:: createLine(startPoint, endPoint, degree=None, numCVs=None)
    
        :param startPoint: the start point of the line
        :type startPoint: tuple, list, str, :class:`~paya.runtime.plugs.Math1D`
        :param startPoint: the end point of the line
        :type endPoint: tuple, list, str, :class:`~paya.runtime.plugs.Math1D`
        :param degree/d: the curve degree; if omitted, it is automatically
            derived from 'numCVs'; if 'numCVs' is also omitted, defaults to 1
        :param int numCVs/cvs: the number of CVs; if omitted, it is
            automatically derived from 'degree'; if 'degree' is also omitted,
            defaults to 2
        :return: A curve output for a straight line.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: getKnotDomain()
    
        :return: The current knot domain for the curve.
        :rtype: (float, float)
    
    .. py:method:: info(reuse=True)
    
        :param bool reuse/re: Reuse any previously-connected ``curveInfo``
            node; defaults to True
        :return: A ``curveInfo`` node connected to this curve output.
        :rtype: :class:`~paya.runtime.nodes.CurveInfo`
    
    .. py:method:: length()
    
        :return: The arc length of this curve output.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: getControlPoints()
    
        :return: The ``.controlPoints`` multi-attribute of a connected
            ``curveInfo`` node.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: initMotionPath(**config)
    
        Connects and configures a ``motionPath`` node.
        
        :param uValue: an optional value or input for the ``uValue`` attribute
        :type uValue: float, :class:`~paya.runtime.plugs.Math1D`
        :param \*\*config: an unpacked mapping of *attrName: attrSource*;
            sources can be values or plugs
        :return: The ``motionPath`` node.
        :rtype: :class:`~paya.runtime.nodes.MotionPath`
    
    .. py:method:: infoAtParam(param)
    
        :param point: the sample parameter
        :return: A ``pointOnCurveInfo`` node configured for the specified
            parameter.
        :rtype: :class:`~paya.runtime.nodes.PointOnCurveInfo`
    
    .. py:method:: infoAtPoint(point)
    
        :param point: the sample point
        :return: A ``pointOnCurveInfo`` node configured for the specified
            point.
        :rtype: :class:`~paya.runtime.nodes.PointOnCurveInfo`
    
    .. py:method:: infoAtFraction(fraction)
    
        :param fraction: the length fraction to sample at
        :return: A ``pointOnCurveInfo`` node configured for the specified
            length fraction.
        :rtype: :class:`~paya.runtime.nodes.PointOnCurveInfo`
    
    .. py:method:: infoAtLength(length)
    
        :param fraction: the length to sample at
        :return: A ``pointOnCurveInfo`` node configured for the specified
            length.
        :rtype: :class:`~paya.runtime.nodes.PointOnCurveInfo`
    
    .. py:method:: initNearestPointOnCurve(point)
    
        Connects and configures a ``nearestPointOnCurve`` node.
        
        :param point: the reference point
        :return: The ``nearestPointOnCurve`` node.
        :rtype: :class:`~paya.runtime.nodes.NearestPointOnCurve`
    
    .. py:method:: pointAtCV(cv)
    
        :param cv: the CV to sample
        :type cv: int, :class:`~paya.runtime.comps.NurbsCurveCV`
        :return: A point position at the specified CV.
    
    .. py:method:: pointAtParam(param)
    
        :param param: the parameter to sample
        :type param: float, :class:`~paya.runtime.plugs.Math1D`
        :return: A point at the given parameter.
    
    .. py:method:: pointAtFraction(fraction)
    
        :param fraction: the length fraction at which to sample a point
        :type fraction: float, :class:`~paya.runtime.plugs.Math1D`
        :return: A point at the specified length fraction.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: pointAtLength(length)
    
        :param length: the length
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :return: A point at the given length.
    
    .. py:method:: closestPoint(point)
    
        :param point: the reference point
        :type point: list, tuple, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :return: The closest point to the given reference point.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: closestFraction(point)
    
        :param point: the reference point
        :type point: tuple, list, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :return: The closest length fraction to the given point.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: paramAtPoint(point)
    
        This is a 'forgiving' implementation; a closest param will still be
        returned if the point is not on the curve.
        
        :alias: ``closestParam``
        :param point: the reference point
        :type point: list, tuple, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :return: The closest parameter to the given point.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: paramAtFraction(fraction)
    
        :param fraction: the length fraction
        :type fraction: float, :class:`~paya.runtime.plugs.Math1D`
        :return: The parameter at the given length fraction.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: paramAtLength(length)
    
        :param length: the length to sample at.
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :return: The parameter at the given length.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: lengthAtFraction(fraction)
    
        :param fraction: the length fraction
        :type fraction: float, :class:`~paya.runtime.plugs.Math1D`
        :return: The length at the given fraction.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: lengthAtParam(param)
    
        :param param: the parameter
        :type param: float, :class:`~paya.runtime.plugs.Math1D`
        :return: The length at the given parameter.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: lengthAtPoint(point)
    
        :param point: the point
        :type point: list, tuple, :class:`~paya.runtime.data.Point`,
             :class:`~paya.runtime.plugs.Vector`
        :return: The length at the given point.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: fractionAtParam(param)
    
        :param param: the parameter
        :type param: float, :class:`~paya.runtime.plugs.Math1D`
        :return: The length fraction at the given parameter.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: fractionAtPoint(point)
    
        :param point: the point
        :type point: list, tuple, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Point`
        :return: The length fraction at the given point.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: fractionAtLength(length)
    
        :param length: the reference length
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :return: The length fraction at the given length.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: binormalAtParam(param)
    
        :param param: the parameter at which to sample the binormal
        :type param: float, :class:`~paya.runtime.plugs.Math1D`
        :return: A vector that's perpendicular to both the curve normal
            and tangent.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: binormalAtFraction(fraction)
    
        :param fraction: the fraction at which to sample the binormal
        :type fraction: float, :class:`~paya.runtime.plugs.Math1D`
        :return: A vector that's perpendicular to both the curve normal
            and tangent.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: binormalAtLength(length)
    
        :param length: the length at which to sample the binormal
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :return: A vector that's perpendicular to both the curve normal
            and tangent.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: binormalAtPoint(point)
    
        :param point: the point at which to sample the binormal
        :type point: list, tuple, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`,
        :return: A vector that's perpendicular to both the curve normal
            and tangent.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: matrixAtParamOrFraction(paramOrFraction, tangentAxis, upAxis, upVector=None, aimCurve=None, closestPoint=True, globalScale=None, squashStretch=False, fraction=False)
    
        Base curve framing implementation. Uses ``motionPath`` and / or
        ``pointOnCurveInfo`` nodes.
        
        :param paramOrFraction: a parameter of length fraction at which
            to sample the matrix
        :type paramOrFraction:
            float, str,
            :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
        :param str tangentAxis: the axis to map to the curve tangent,
            e.g. '-y'
        :param str upAxis: the axis to map to the resolved up vector, e.g. 'x'
        :param upVector/upv: an explicit up vector; defaults to None
        :type upVector/upv: None, str, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param aimCurve/aic: an 'aim' curve for the up vector, similar to
            the ``curveWarp`` deformer; defaults to False
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param bool closestPoint/cp: sample points on the aim-curve by
            proximity rather than matched parameter; defaults to True
        :param globalScale/gs: ignored if not a plug; a baseline scale (will
            be normalized); defaults to None
        :type globalScale/gs: None, float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool squashStretch/ss: allow the tangent vector to squash and
            stretch; defaults to False
        :param bool fraction/fr: interpret *paramOrFraction* as a length
            fraction rather than a parameter; defaults to False
        :return: The constructed matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: matrixAtPoint(point, tangentAxis, upAxis, upVector=None, aimCurve=None, closestPoint=True, globalScale=None, squashStretch=False)
    
        :param point: the point at which to sample the matrix
        :type point: list, tuple, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param str upAxis: the axis to map to the resolved up vector, e.g. 'x'
        :param upVector/upv: an explicit up vector; defaults to None
        :type upVector/upv: None, str, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param aimCurve/aic: an 'aim' curve for the up vector, similar to
            the ``curveWarp`` deformer; defaults to False
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param bool closestPoint/cp: sample points on the aim-curve by
            proximity rather than matched parameter; defaults to True
        :param globalScale/gs: ignored if not a plug; a baseline scale (will
            be normalized); defaults to None
        :type globalScale/gs: None, float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool squashStretch/ss: allow the tangent vector to squash and
            stretch; defaults to False
        :return: The constructed matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: matrixAtParam(param, tangentAxis, upAxis, upVector=None, aimCurve=None, closestPoint=True, globalScale=None, squashStretch=False)
    
        :param param: the parameter at which to sample the matrix
        :type param: float, str,
            :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
        :param str tangentAxis: the axis to map to the curve tangent,
            e.g. '-y'
        :param str upAxis: the axis to map to the resolved up vector, e.g. 'x'
        :param upVector/upv: an explicit up vector; defaults to None
        :type upVector/upv: None, str, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param aimCurve/aic: an 'aim' curve for the up vector, similar to
            the ``curveWarp`` deformer; defaults to False
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param bool closestPoint/cp: sample points on the aim-curve by
            proximity rather than matched parameter; defaults to True
        :param globalScale/gs: ignored if not a plug; a baseline scale (will
            be normalized); defaults to None
        :type globalScale/gs: None, float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool squashStretch/ss: allow the tangent vector to squash and
            stretch; defaults to False
        :return: The constructed matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: matrixAtFraction(fraction, tangentAxis, upAxis, upVector=None, aimCurve=None, closestPoint=True, globalScale=None, squashStretch=False)
    
        :param fraction: the fraction at which to sample the matrix
        :type fraction: float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param str tangentAxis: the axis to map to the curve tangent,
            e.g. '-y'
        :param str upAxis: the axis to map to the resolved up vector, e.g. 'x'
        :param upVector/upv: an explicit up vector; defaults to None
        :type upVector/upv: None, str, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param aimCurve/aic: an 'aim' curve for the up vector, similar to
            the ``curveWarp`` deformer; defaults to False
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param bool closestPoint/cp: sample points on the aim-curve by
            proximity rather than matched parameter; defaults to True
        :param globalScale/gs: ignored if not a plug; a baseline scale (will
            be normalized); defaults to None
        :type globalScale/gs: None, float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool squashStretch/ss: allow the tangent vector to squash and
            stretch; defaults to False
        :return: The constructed matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: matrixAtLength(length, tangentAxis, upAxis, upVector=None, aimCurve=None, closestPoint=True, globalScale=None, squashStretch=False)
    
        :param length: the length at which to sample the matrix
        :type length: float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param str tangentAxis: the axis to map to the curve tangent,
            e.g. '-y'
        :param str upAxis: the axis to map to the resolved up vector, e.g. 'x'
        :param upVector/upv: an explicit up vector; defaults to None
        :type upVector/upv: None, str, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param aimCurve/aic: an 'aim' curve for the up vector, similar to
            the ``curveWarp`` deformer; defaults to False
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param bool closestPoint/cp: sample points on the aim-curve by
            proximity rather than matched parameter; defaults to True
        :param globalScale/gs: ignored if not a plug; a baseline scale (will
            be normalized); defaults to None
        :type globalScale/gs: None, float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool squashStretch/ss: allow the tangent vector to squash and
            stretch; defaults to False
        :return: The constructed matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: distributePoints(numberOrFractions)
    
        :param numberOrFractions: this can either be a list of length
            fractions, or a number
        :type numberOrFractions: tuple, list or int
        :return: World-space points distributed along the length of the curve.
        :rtype: [:class:`~paya.runtime.plugs.Vector`]
    
    .. py:method:: distributeParams(numberOrFractions)
    
        :param numberOrFractions: this can either be a list of length
            fractions, or a number
        :type numberOrFractions: tuple, list or int
        :return: Parameters distributed along the length of the curve.
        :rtype: [:class:`~paya.runtime.plugs.Math1D`]
    
    .. py:method:: distributeLengths(numberOrFractions)
    
        :param numberOrFractions: this can either be a list of length
            fractions, or a number
        :type numberOrFractions: tuple, list or int
        :return: Fractional lengths along the curve.
        :rtype: [:class:`~paya.runtime.plugs.Math1D`]
    
    .. py:method:: distributeMatrices(numberOrFractions, tangentAxis, upAxis, upVector=None, aimCurve=None, squashStretch=None, closestPoint=True, globalScale=None)
    
        :param numberOrFractions: this can either be a number of uniform
            fractions to generate, or an explicit list of fractions
        :type numberOrFractions: float, [float],
            :class:`~paya.runtime.plugs.Math1D`,
            [:class:`~paya.runtime.plugs.Math1D`]
        :param str tangentAxis: the matrix axis to map to the curve tangent,
            for example '-y'
        :param str upAxis: the matrix axis to align to the resolved up vector, for
            example 'x'
        :param upVector/upv: if provided, should be either a single up vector or a
            a list of up vectors (one per fraction); defaults to None
        :type upVector/upv:
            None,
            list, tuple, :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.plugs.Vector`,
            [list, tuple, :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.plugs.Vector`]
        :param aimCurve/aic: an 'up' curve, as seen for example on Maya's
            ``curveWarp``; defaults to None
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.plugs.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`
        :param bool closestPoint/cp: pull points from the aim curve by
            proximity rather than matched parameter; defaults to True
        :param bool squashStretch/ss: allow squash and stretch on the tangent
            vectors; defaults to False
        :param globalScale/gs: ignored if not a plug; a baseline scaling
            factor (will be normalized); defaults to None
        :return: Matrices, distributed uniformly (by length) along this curve.
        :rtype: [:class:`~paya.runtime.plugs.Matrix`]
    
    .. py:method:: distributeAimingMatrices(numberOrFractions, aimAxis, upAxis, upVector=None, aimCurve=None, squashStretch=None, closestPoint=True, globalScale=None)
    
        Similar to :meth:`distributeMatrices`, but here the matrices aim at
        each other for a 'chained' effect.
        
        :param numberOrFractions: this can either be a number of uniform
            fractions to generate, or an explicit list of fractions
        :type numberOrFractions: float, [float],
            :class:`~paya.runtime.plugs.Math1D`,
            [:class:`~paya.runtime.plugs.Math1D`]
        :param str aimAxis: the matrix axis to map to the aim vectors,
            for example '-y'
        :param str upAxis: the matrix axis to align to the resolved up vector, for
            example 'x'
        :param upVector/upv: if provided, should be either a single up vector or a
            a list of up vectors (one per fraction); defaults to None
        :type upVector/upv:
            None,
            list, tuple, :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.plugs.Vector`,
            [list, tuple, :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.plugs.Vector`]
        :param aimCurve/aic: an 'up' curve, as seen for example on Maya's
            ``curveWarp``; defaults to None
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.plugs.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`
        :param bool closestPoint/cp: pull points from the aim curve by
            proximity rather than matched parameter; defaults to True
        :param bool squashStretch/ss: allow squash and stretch on the aim
            vectors; defaults to False
        :param globalScale/gs: ignored if not a plug; a baseline scaling
            factor (will be normalized); defaults to None
        :return: Matrices, distributed uniformly (by length) along this curve.
        :rtype: [:class:`~paya.runtime.plugs.Matrix`]
    
    .. py:method:: attach(*curves, blend=False, blendBias=0.5, parameter=0.1, blendKnotInsertion=False, reverse1=False, reverse2=False, multipleKnots=True)
    
        Attaches one or more curves to this one.
        
        :param \*curves: one or more curves to attach to this one
        :type \*curves: str, :class:`~paya.runtime.plugs.NurbsCurve`
        :param bool blend: use blended attachments; defaults to False
        :param blendBias/bb: ignored if more than two curves are
            involved; the bias for blended attachments; defaults to 0.5
        :type blendBias/bb: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool blendKnotInsertion: ignored if more than two curves
            are involved; add a blend knot; defaults to False
        :param float parameter/p: ignored if more than two curves are
            involved or *blendKnotInsertion* is False; the parameter for
            the blend knot; defaults to 0.1
        :param bool reverse1/rv1: ignored if more than two curves are
            involved; reverse the first curve; defaults to False
        :param bool reverse2/rv2: ignored if more than two curves are
            involved; reverse the second curve; defaults to False
        :param bool multipleKnots: keep multiple knots; defaults to True
        :return: The combined curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: initExtendCurve(**config)
    
        Connects and configures an ``extendCurve`` node.
        
        :param \*\*config: an unpacked mapping of *attrName: attrSource*
            for attribute configuration; sources can be values or plugs
        :return: The ``extendCurve`` node.
        :rtype: :class:`~paya.runtime.nodes.ExtendCurve`
    
    .. py:method:: extendByVector(vector, atStart=False, multipleKnots=True, useSegment=False)
    
        :param vector: the vector along which to extend
        :type vector: list, tuple, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool atStart/ats: extend from the start instead of the end;
            defaults to False
        :param bool multipleKnots/mul: keep multiple knots; defaults to
            True
        :param bool useSegment/seg: for improved accuracy, extend using an
            attached line segment instead of the 'Linear' mode of an
            ``extendCurve`` node; defaults to False
        :return: This curve, extended along the specified vector.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: extendToPoint(point, atStart=False, multipleKnots=True, useSegment=False)
    
        :param point: the point to reach for
        :type point: list, tuple, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool atStart/ats: extend from the start instead of the end;
            defaults to False
        :param bool multipleKnots/mul: keep multiple knots; defaults to
            True
        :param bool useSegment/seg: for improved accuracy, extend using an
            attached line segment instead of the 'Linear' mode of an
            ``extendCurve`` node; defaults to False
        :return: This curve, extended to meet the specified point
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: extendByLength(length, atStart=False, atBothEnds=False, multipleKnots=True, circular=False, linear=False, extrapolate=False)
    
        :param length: the length by which to extend
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool atStart/ats: extend from the start instead of the end;
            defaults to False
        :param bool atBothEnds/abe: extend from both ends; note that, in this
            case, the length at either end will be halved; defaults to False
        :param bool multipleKnots/mul: keep multiple knots; defaults to
            True
        :param bool circular/cir: use the 'circular' mode of the
            ``extendCurve`` node; defaults to False
        :param bool linear/lin: use the 'linear' mode of the
            ``extendCurve`` node; defaults to False
        :param bool extrapolate/ext: use the 'extrapolate' mode of the
            ``extendCurve`` node; defaults to True
        :return: This curve, extended by the specified length.
    
    .. py:method:: extend(lenPointOrVec, point=None, linear=None, circular=None, extrapolate=None, useSegment=False, multipleKnots=True, atStart=None, atBothEnds=None)
    
        Extends this curve in a variety of ways.
        
        :param lenPointOrVec: a length, point or vector for the extension
        :type lenPointOrVec: float, tuple, list, str,
            :class:`~paya.runtime.data.Point`
            :class:`~paya.runtime.data.Vector`
            :class:`~paya.runtime.plugs.Math1D`
            :class:`~paya.runtime.plugs.Vector`
        :param bool point: if *lenPointOrVec* is a 3D value or plug,
            interpret it as a point rather than a vector; defaults to True
            if *lenPointOrVec* is an instance of
            :class:`~paya.runtime.data.Point`, otherwise False
        :param bool linear/lin: if extending by distance, use the 'linear'
            mode of the ``extendCurve`` node; defaults to True
        :param bool circular/cir: if extending by distance, use the 'circular'
            mode of the ``extendCurve`` node; defaults to False
        :param bool extrapolate/ext: if extending by distance, use the
            'extrapolate' mode of the ``extendCurve`` node; defaults to False
        :param bool useSegment/seg: if extending by vector or point, don't use
            an ``extendCurve`` node; for improved accuracy, attach a line
            segment instead; defaults to False
        :param bool multipleKnots/mul: keep multiple knots; defaults to
            True
        :param bool atStart/ats: extend from the start of the curve rather than the end;
            defaults to False
        :param bool atBothEnds/abe: if extending by length, extend from both
            ends of the curve; defaults to False
        :return: The extended curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: subCurve(minValue, maxValue, relative=False)
    
        Connects and configures a ``subCurve`` node and returns its output.
        
        :param minValue: a source for the ``minValue`` attribute
        :type minValue: float, :class:`~paya.runtime.plugs.Math1D`
        :param maxValue: a source for the ``maxValue`` attribute
        :type maxValue: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool relative/r: set the node to 'relative'; defaults to False
        :return: The sub-curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: detach(*parameters, select=None)
    
        Detaches this curve at the specified parameter(s).
        
        :param \*parameters: the parameter(s) at which to 'cut' the curve
        :type \*parameters: float, :class:`~paya.runtime.plugs.Math1D`
        :param select/sel: a subset of output indices to include in the
            return; ``keep`` attributes will configured accordingly
        :return: [:class:`~paya.runtime.plugs.NurbsCurve`]
    
    .. py:method:: retract(length, atStart=None, atBothEnds=None)
    
        Retracts this curve.
        
        :param length: the retraction length
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool atStart/ats: retract at the start of the curve instead
            of the end; defaults to False
        :param atBothEnds: retract at both ends of the curve; defaults to
            False
        :return: The modified curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: reverse()
    
        :return: The reversed curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: toBezier(economy=True)
    
        Converts this NURBS curve to a Bezier curve.
        
        :param bool economy/eco: just return ``self`` if this is already
            a Bezier curve; defaults to True
        :return: The bezier curve.
        :rtype: :class:`~paya.runtime.plugs.BezierCurve`
    
    .. py:method:: toNurbs(economy=True)
    
        Converts this Bezier curve to a NURBS curve.
        
        :param bool economy/eco: just return ``self`` if this is already
            a NURBS curve; defaults to True
        :return: The NURBS curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: bSpline(tolerance=0.001, keepRange=1)
    
        :param keepRange/kr: An index or enum key for the ``.keepRange``
            mode:
        
            - 0: '0 to 1'
            - 1: 'Original' (the default)
            - 2: '0 to #spans'
        
        :type keepRange/kr: int, str, :class:`~paya.runtime.plugs.Math1D`
        :param tolerance/tol: the fit tolerance; defaults to 0.001
        :type tolerance/tol: float, :class:`~paya.runtime.plugs.Math1D`
        :return: The B-spline.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: initRebuild(**config)
    
        Connects and configures a ``rebuildCurve`` node.
        
        :param \*\*config: an unpacked mapping of *attrName: attrSource*;
            sources can be values or plugs
        :return: The ``rebuildCurve`` node.
        :rtype: :class:`~paya.runtime.nodes.RebuildCurve`
    
    .. py:method:: cvRebuild(numCVs, degree=None, endKnots='Multiple end knots', keepRange='Original', keepControlPoints=False, keepEndPoints=True, keepTangents=False)
    
        Rebuilds this curve to the specified number of CVs.
        
        :param int degree/d: the degree to build to; defaults to this curve's
            (current) degree if omitted
        :param endKnots/end: An enum index or label:
        
            - 0: 'Non Multiple end knots'
            - 1: 'Multiple end knots' (the default)
        :type endKnots: int, str
        :param keepRange/kr: An enum index or label:
        
            - 0: '0 to 1'
            - 1: 'Original' (the default)
            - 2: '0 to #spans'
        :type keepRange/kr: int, str
        :param bool keepEndPoints/kep: keep end points; defaults to True
        :param bool keepTangents/kt: keep tangents; defaults to False
        :return: The rebuilt curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: rebuild(rebuildType='Uniform', spans=None, degree=None, tolerance=0.01, smooth=-3, endKnots='Multiple end knots', keepRange='Original', keepControlPoints=False, keepEndPoints=True, keepTangents=False, matchCurve=None)
    
        :param rebuildType/rt: An enum index or label:
        
            - 0: 'Uniform' (the default)
            - 1: 'Reduce Spans'
            - 2: 'Match Knots'
            - 3: 'No Mults'
            - 4: 'Curvature'
            - 5: 'End Conditions'
            - 6: 'Clean'
        :type rebuildType/rt: int, str
        :param spans/s: the number of spans to build to; defaults to this
            curve's (current) number of spans if omitted
        :type spans/s: int, :class:`~paya.runtime.plugs.Math1D`
        :param int degree/d: the degree to build to; defaults to this curve's
            (current) degree if omitted
        :param float tolerance/tol: the fit tolerance; defaults to 0.01
        :param float smooth/sm: the 'smoothing' factor; defaults to -3.0
        :param endKnots/end: An enum index or label:
        
            - 0: 'Non Multiple end knots'
            - 1: 'Multiple end knots' (the default)
        :type endKnots: int, str
        :param keepRange/kr: An enum index or label:
        
            - 0: '0 to 1'
            - 1: 'Original' (the default)
            - 2: '0 to #spans'
        :type keepRange/kr: int, str
        :param bool keepControlPoints/kcp: keep control points; defaults to
            False
        :param bool keepEndPoints/kep: keep end points; defaults to True
        :param bool keepTangents/kt: keep tangents; defaults to False
        :param matchCurve/mc: ignored if *rebuildType* is not 2 or 'Match Knots`;
            a NURBS curve attribute whose knots to match; defaults to None
        :type matchCurve/mc: None, str, :class:`~paya.runtime.plugs.NurbsCurve`
        :return: The rebuilt curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: cageRebuild()
    
        :return: A linear curve with the same CVs as this one.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: blend(otherCurve, weight=0.5)
    
        Blends this curve output towards *otherCurve* via an ``avgCurves``
        node. You may get unexpected results if the curves don't match
        in terms of spans, degree etc.
        
        :param otherCurve: the curve to blend towards
        :type otherCurve: str, :class:`~paya.runtime.plugs.NurbsCurve`
        :param weight/w: the blend weight; the other curve will take over
            fully at 1.0; defaults to 0.5
        :type weight/w: float, :class:`~paya.runtime.plugs.Math1D`
        :return: The blended curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: setLength(targetLength, atStart=False, vector=None, linear=None, circular=None, extrapolate=None, multipleKnots=True)
    
        Uses gated retractions and extensions to force the length of this
        curve.
        
        :param targetLength: the target length
        :type targetLength: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool atStart/ats: anchor the curve at the end rather than the
            start; defaults to False
        :param vector: a vector along which to extend; this is recommended for
            spine setups where tangency should be more tightly controlled; if
            this is omitted, the *linear / circular / extrapolate* modes will
            be used instead
        :type vector: None, tuple, list, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool circular/cir: ignored if *vector* was provided; use the
            'circular' mode of the ``extendCurve`` node; defaults to False
        :param bool linear/lin: ignored if *vector* was provided;
            use the 'linear' mode of the ``extendCurve`` node; defaults to
            False
        :param bool extrapolate/ext: ignored if *vector* was provided;
            use the 'extrapolate' mode of the ``extendCurve`` node; defaults
            to True
        :param bool multipleKnots: keep multiple knots; defaults to True
        :return: