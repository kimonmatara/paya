*************************
paya.runtime.plugs.Vector
*************************

.. py:currentmodule:: paya.runtime.plugs

.. py:class:: Vector(*args, **kwargs)

    .. rubric:: Inheritance

    :class:`~paya.runtime.plugs.Math` :class:`~paya.runtime.plugs.Attribute` :class:`~pymel.core.general.Attribute` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`



    .. py:classmethod:: createAttr(attrName, node=None, angle=False, time=False, distance=False, keyable=None, channelBox=None, defaultValue=None, asData=False, childSuffixes='XYZ')
    
        Creates a :class:`~paya.runtime.plugs.Vector`,
            :class:`~paya.runtime.plugs.Point` or
            :class:`~paya.runtime.plugs.EulerRotation` attribute.
        
        :param str attrName: the attribute name
        :param node: the node on which to add the attribute; if omitted, a
            ``network`` node will be created; defaults to ``None``
        :type node: :class:`str`, :class:`~paya.runtime.nodes.DependNode`
        :param bool angle/a: create an
            :class:`~paya.runtime.plugs.EulerRotation`; defaults to ``False``
        :param bool time/t: create a compound of three ``time`` channels;
            defaults to ``False``
        :param bool distance/d: create a :class:`~paya.runtime.plugs.Point`;
            defaults to ``False``
        :param bool keyable/k: make the children keyable; ignored if *asData*;
            defaults to ``False``
        :param bool channelBox/cb: make the children settable; ignored if
            *asData*; defaults to ``False``
        :param defaultValue/dv: a default value for the attribute (ignored if
            *asData*)
        :type defaultValue/dv: :class:`list` [:class:`float`],
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.data.EulerRotation`
        :param bool asData/ad: create as a non-compound 'data' attribute
        :param bool childSuffixes/cs: ignored if *asData*; suffixes for the
            child attributes
        :return: The constructed attribute.
        :rtype: :class:`~paya.runtime.plugs.Vector`,
            :class:`~paya.runtime.plugs.Point`,
            :class:`~paya.runtime.plugs.EulerRotation`
    
    .. py:method:: createLocator(name=None, size=1.0)
    
        :shorthand: ``cl``
        
        :param str name/n: an optional name for the locator transform;
            defaults to a contextual name
        :param float size/siz: a single scalar for the locator's
            ``localScale`` channels; defaults to 1.0
        :return: A locator with this 3D compound piped into its
            ``translate`` channel.
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: isTranslateChannel()
    
        :return: True if this is the ``translate`` channel of a transform
            node, otherwise False.
        :rtype: bool
    
    .. py:method:: get(plug=False, **kwargs)
    
        Overrides :meth:`~paya.runtime.plugs.Attribute.get` to return
        :class:`~paya.runtime.data.Point` values if this is the translate
        channel of a transform node.
    
    .. py:method:: __add__(other, swap=False)
    
        Implements element-wise **addition** (``+``).
    
    .. py:method:: __radd__(other)
    
        Implements element-wise **reflected addition** (``-``).
    
    .. py:method:: __sub__(other, swap=False)
    
        Implements element-wise **subtraction** (``-``).
    
    .. py:method:: __rsub__(other)
    
        Implements element-wise **reflected subtraction** (``-``).
    
    .. py:method:: __mul__(other, swap=False)
    
        Implements **multiplication** (``*``).
    
    .. py:method:: __rmul__(other)
    
        Implements **reflected multiplication** (``*``).
    
    .. py:method:: __neg__()
    
        Implements element-wise **unary negation** (``-``).
    
    .. py:method:: __truediv__(other, swap=False)
    
        Implements element-wise **division** (``/``).
    
    .. py:method:: __rtruediv__(other)
    
        Implements element-wise **reflected division** (``/``).
    
    .. py:method:: __pow__(other, swap=False)
    
        Implements element-wise **power** (``**``).
    
    .. py:method:: __rpow__(other)
    
        Implements element-wise **reflected power** (``**``).
    
    .. py:method:: blend(other, weight=0.5, swap=False, includeLength=False, clockNormal=None, unwindSwitch=None)
    
        Blends this triple towards *other*. Blending will be linear or, if
        *clockNormal* is provided, by vector angle.
        
        :param other: the triple or vector towards which to blend
        :type other: :class:`list` [:class:`float`],
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Math3D`,
            :class:`str`
        :param weight/w: 0.5: the blending weight; when this is 1.0, *other*
            will take over fully; can be a value or plug; defaults to ``0.5``
        :type weight/w: :class:`str`, :class:`float`,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool swap/sw: swap the inputs around; defaults to ``False``
        :param clockNormal/cn: if this is ``True``, this output and *other*
            will be regarded as vectors, and blended by angle; should be
            a vector perpendicular to both inputs; defaults to ``None``
        :type clockNormal/cn: :class:`list` [:class:`float`],
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Math3D`,
            :class:`str`
        :param bool includeLength/ilg: ignored if *clockNormal* was omitted;
            include vector lengths in the blending calculation; defaults to
            ``False``
        :param unwindSwitch/uws: ignored if *clockNormal* was omitted; an
            integer value or plug to pick an angle unwinding mode:
        
            - ``0`` for shortest (the default)
            - ``1`` for positive
            - ``2`` for negative
        
        :type unwindSwitch/uws: int, str, :class:`~paya.runtime.plugs.Math1D`
        :return: The blended triple or vector.
        :rtype: :class:`paya.runtime.plugs.Math3D`
    
    .. py:method:: __xor__(other)
    
        Uses the exclusive-or operator (``^``) to implement
        **point-matrix multiplication**.
        
        :param other: a matrix value or plug
    
    .. py:method:: length()
    
        :return: The length of this vector.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: normal()
    
        :return: This vector, normalized.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: dot(other, normalize=False)
    
        Returns the dot product of ``self`` and *other*.
        
        :param other: the other vector
        :type other: :class:`list`, :class:`tuple`,
            :class:`~paya.runtime.plugs.Math3D`
        :param bool normalize/nr: normalize the output; defaults to ``False``
        :return: :class:`paya.runtime.plugs.Math1D`
    
    .. py:method:: cross(other, normalize=False, guard=False, inlineGate=None)
    
        :param other: the other vector
        :type other: :class:`tuple`, :class:`list`,
            :class:`str`,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool normalize/nr: normalize the output; defaults to
            ``False``
        :param bool guard/g: switch the node to ``'No Operation'`` when the
            input vectors are aligned in either direction; defaults to
            ``False``
        :param bool inlineGate/ig: if you have a precooked gate for alignment
            (typically the output of a comparison operation), provide it here
            to prevent redundant checks; if provided, will override *guard*
            to ``True``; defaults to ``None``
        :return: The cross product.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: angleTo(other, clockNormal=None)
    
        :param other: the other vector
        :type other: :class:`~paya.runtime.plugs.Vector`,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.data.Point`, list, str
        :param clockNormal/cn: provide this to get a 360 angle; defaults to
            ``None``
        :type clockNormal/cn: ``None``, :class:`list`, :class:`tuple`,
            :class:`~paya.runtime.plugs.Vector`,
            :class:`~paya.runtime.data.Vector`
        :return: The angle from this vector to *other*.
        :rtype: :class:`~paya.runtime.plugs.Angle`
    
    .. py:method:: projectOnto(other)
    
        See https://en.wikipedia.org/wiki/Vector_projection.
        
        :param other: the vector onto which to project this one
        :type other: :class:`list`, :class:`tuple`, :class:`str`,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :return: The project of this vector onto *other*.
        :rtype: :class:`Vector`
    
    .. py:method:: rejectFrom(other)
    
        Same as 'make perpendicular to' (although length will change).
        See https://en.wikipedia.org/wiki/Vector_projection.
        
        :param other: the vector from which to reject this one
        :type other: :class:`list`, :class:`tuple`, :class:`str`,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :return: The rejection of this vector from *other*.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: rotateByAxisAngle(axisVector, angle)
    
        :param axisVector: the vector around which to rotate this vector
        :type axisVector: list, tuple, :class:`~paya.runtime.data.Vector`
            or :class:`~paya.runtime.plugs.Vector`
        :param angle: the angle of rotation
        :type angle: float, :class:`~paya.runtime.data.Angle`, str or
            class:`~paya.runtime.plugs.Math3D`
        :return: This vector, rotated around ``axisVector`` by the specified
            ``angle``.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: asTranslateMatrix()
    
        Inserts this into the translate row of an identity matrix, and
        returns the matrix.
        
        :return: The translate matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: asScaleMatrix()
    
        Uses this output's three components as the magnitudes of
        an identity matrix's base vectors.
        
        :return: The scale matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: asRotateMatrix()
    
        :return: This vector's orientation as a rotate matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: asShearMatrix()
    
        Composes this output's three components into a shear matrix.
        
        :return: The shear matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: asEulerRotation()
    
        Returns XYZ euler rotations for this vector.
        
        :return: A compound of three euler channels.
        :rtype: :class:`~paya.runtime.plugs.EulerRotation`
    
    .. py:method:: asQuaternion()
    
        :return: A quaternion representation of this vector's
            orientation.
        :rtype: :class:`~paya.runtime.plugs.Quaternion`
    
    .. py:method:: asAxisAngle()
    
        :return: An axis, angle representation of this vector.
        :rtype: :class:`tuple` (:class:`Vector`, :class:`Angle`)