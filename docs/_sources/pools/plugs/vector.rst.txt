*************************
paya.runtime.plugs.Vector
*************************

.. py:currentmodule:: paya.runtime.plugs

.. py:class:: Vector(*args, **kwargs)



    .. rubric:: Inheritance

    :class:`~paya.runtime.plugs.Math3D` :class:`~paya.runtime.plugs.Compound` :class:`~paya.runtime.plugs.Attribute` :class:`~pymel.core.general.Attribute` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`

    .. py:method:: isTranslateChannel()
    
        :return: True if this is the ``translate`` channel of a transform
            node, otherwise False.
        :rtype: bool
    
    .. py:method:: get(plug=False, **kwargs)
    
        Overrides :meth:`~paya.runtime.plugs.Attribute.get` to return
        :class:`~paya.runtime.data.Point` values if this is the translate
        channel of a transform node.
    
    .. py:method:: __mul__(other, swap=False)
    
        Implements **multiplication** (``*``).
    
    .. py:method:: __rmul__(other)
    
        Implements **reflected multiplication** (``*``).
    
    .. py:method:: __xor__(other)
    
        Uses the exclusive-or operator (``^``) to implement
        **point-matrix multiplication**.
        
        :param other: a matrix value or plug
    
    .. py:method:: blend(other, weight=0.5, swap=False, byVectorAngle=None, includeLength=False, clockNormal=None, unwindSwitch=None)
    
        :param other: the vector that will be fully active when 'weight'
            is 1.0 (or 0.0, if 'swap' is True)
        :type other: list, tuple, :class:`paya.runtime.data.Vector`,
            :class:`paya.runtime.plugs.Vector`
        :param weight/w: the blending weight; defaults to 0.5
        :type weight/w: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool swap/sw: swap operands around; defaults to False
        :param bool byVectorAngle/bva: blend by rotating one vector towards
            the other, rather than via linear value interpolation; defaults
            to ``True`` if *clockNormal* is provided, otherwise ``False``
        :param bool includeLength/ilg: blend vector lengths (magnitudes)
            as well; defaults to False
        :param clockNormal/cn: an optional winding vector; providing this
            will enable the unwinding options when blending by angle;
            defaults to None
        :type clockNormal/cn: None, tuple, list, str,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param unwindSwitch/uws: ignored if *clockNormal* was omitted; an
            integer value or plug to pick an angle unwinding mode:
        
            - ``0`` for shortest (the default)
            - ``1`` for positive
            - ``2`` for negative
        
        :type unwindSwitch/uws: int, str, :class:`~paya.runtime.plugs.Math1D`
        :return: The blended vector.
        :rtype: :class:`paya.runtime.plugs.Vector`
    
    .. py:method:: rotateByAxisAngle(axisVector, angle)
    
        :param axisVector: the vector around which to rotate this vector
        :type axisVector: list, tuple, :class:`~paya.runtime.data.Vector`
            or :class:`~paya.runtime.plugs.Vector`
        :param angle: the angle of rotation
        :type angle: float, :class:`~paya.runtime.data.Angle`, str or
            class:`~paya.runtime.plugs.Math3D`
        :return: This vector, rotated around ``axisVector`` by the specified
            ``angle``.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: dot(other, normalize=False)
    
        Returns the dot product of ``self`` and ``other``.
        
        :param other: the other vector
        :type other: :class:`list`, :class:`tuple`, :class:`~paya.runtime.plugs.Math3D`
        :param bool normalize/nr: normalize the output; defaults to False
        :return: :class:`paya.runtime.plugs.Math1D`
    
    .. py:method:: length()
    
        Returns the length of this vector.
        
        :return: The length of this vector.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: normal()
    
        :return: This vector, normalized.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: cross(other, normalize=False, guard=False, inlineGate=None)
    
        :param other: the other vector
        :type other: :class:`tuple`, :class:`list`,
            :class:`str`,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool normalize/nr: normalize the output; defaults to
            ``False``
        :param bool guard/g: switch the node to 'No Operation' when the
            input vectors are aligned in either direction; defaults to
            ``False``
        :param bool inlineGate/ig: if you have a precooked gate for alignment
            (typically the output of a comparison operation), provide it here
            to prevent redundant checks; if provided, will override *guard*
            to ``True``; defaults to ``None``
        :return: The cross product.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: angle(other, clockNormal=None)
    
        :param other: the other vector
        :type other: :class:`~paya.runtime.plugs.Math3D`,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.data.Point`, list, str
        :param clockNormal/cn: provide this to get a 360 angle; defaults to
            None
        :type clockNormal/cn: None, list, tuple,
            :class:`~paya.runtime.plugs.Vector`,
            :class:`~paya.runtime.data.Vector`
        :return: The angle from this vector to ``other``.
        :rtype: :class:`~paya.runtime.plugs.Angle`
    
    .. py:method:: projectOnto(other)
    
        See https://en.wikipedia.org/wiki/Vector_projection.
        
        :param other: the vector onto which to project this one
        :type other: list, tuple, str, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :return: The project of this vector onto *other*.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: rejectFrom(other)
    
        Same as 'make perpendicular to' (although length will change).
        See https://en.wikipedia.org/wiki/Vector_projection.
        
        :param other: the vector from which to reject this one
        :type other: list, tuple, str, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :return: The rejection of this vector from *other*.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: asTranslateMatrix()
    
        Inserts this into the translate row of an identity matrix, and
        returns the matrix.
        
        :return: The translate matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: asScaleMatrix()
    
        Uses this output's three components as the magnitudes of
        an identity matrix's base vectors.
        
        :return: The scale matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: asShearMatrix()
    
        Composes this output's three components into a shear matrix.
        
        :return: The shear matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: asEulerRotation()
    
        Returns XYZ euler rotations for this vector.
        
        :return: A compound of three euler channels.
        :rtype: :class:`~paya.runtime.plugs.EulerRotation`