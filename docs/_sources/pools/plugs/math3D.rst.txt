*************************
paya.runtime.plugs.Math3D
*************************

.. py:currentmodule:: paya.runtime.plugs

.. py:class:: Math3D(*args, **kwargs)

    .. rubric:: Inheritance

    :class:`~paya.runtime.plugs.Math` :class:`~paya.runtime.plugs.Attribute` :class:`~pymel.core.general.Attribute` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`



    .. py:method:: createLocator(name=None, size=1.0)
    
        :shorthand: ``cl``
        
        :param str name/n: an optional name for the locator transform;
            defaults to a contextual name
        :param float size/siz: a single scalar for the locator's
            ``localScale`` channels; defaults to 1.0
        :return: A locator with this 3D compound piped into its
            ``translate`` channel.
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: get(plug=False, **kwargs)
    
        Overloads :meth:`paya.runtime.plugs.Attribute.get` to return
        :class:`~paya.runtime.data.Vector` instead of :class:`tuple`.
    
    .. py:method:: __add__(other, swap=False)
    
        Implements **addition** (``+``).
    
    .. py:method:: __radd__(other)
    
        Implements **reflected addition** (``-``).
    
    .. py:method:: __sub__(other, swap=False)
    
        Implements **subtraction** (``-``).
    
    .. py:method:: __rsub__(other)
    
        Implements **reflected subtraction** (``-``).
    
    .. py:method:: __mul__(other, swap=False)
    
        Implements **multiplication** (``*``).
    
    .. py:method:: __rmul__(other)
    
        Implements **reflected multiplication** (``*``).
    
    .. py:method:: __neg__()
    
        Implements **unary negation** (``-``).
    
    .. py:method:: __truediv__(other, swap=False)
    
        Implements **division** (``/``).
    
    .. py:method:: __rtruediv__(other)
    
        Implements **reflected division** (``/``).
    
    .. py:method:: __pow__(other, swap=False)
    
        Implements **power** (``**``).
    
    .. py:method:: __rpow__(other)
    
        Implements **reflected power** (``**``).
    
    .. py:method:: blend(other, weight=0.5, swap=False)
    
        Blends this output towards ``other``.
        
        :param other: the scalar value or plug towards which to blend
        :type other: 3D value or plug
        :param weight/w: the blend weight, where *other* takes over fully
            at 1.0; defaults to 0.5
        :type weight/w: :class:`AttributeMath1D`, :class:`Vector`, list, str
        :param bool swap: swap the operands
        :return: The blended output.
        :rtype: :class:`AttributeMath3D`
    
    .. py:method:: rotateByAxisAngle(axisVector, angle)
    
        :param axisVector: the vector around which to rotate this vector
        :type axisVector: list, tuple, :class:`~paya.runtime.data.Vector`
            or :class:`~paya.runtime.plugs.Vector`
        :param angle: the angle of rotation
        :type angle: float, :class:`~paya.runtime.data.Angle`, str or
            class:`~paya.runtime.plugs.Math3D`
        :return: This vector, rotated around ``axisVector`` by the specified
            ``angle``.
        :rtype: :class:`~paya.runtime.plugs.Vector`