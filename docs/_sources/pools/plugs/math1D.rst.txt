*************************
paya.runtime.plugs.Math1D
*************************

.. py:currentmodule:: paya.runtime.plugs

.. py:class:: Math1D(*args, **kwargs)

    .. rubric:: Inheritance

    :class:`~paya.runtime.plugs.Math` :class:`~paya.runtime.plugs.Attribute` :class:`~pymel.core.general.Attribute` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`



    .. py:classmethod:: createAttr(attrName, node=None, attributeType=None, **kwargs)
    
        On :class:`Math1D` subclasses, overloads
        :meth:`paya.runtime.plugs.Attribute.create` to preload
        *attributeType* with a type appropriate for the class.
        
        :param str attrName: the name of the attribute
        :param node: the node on which to create the attribute; if omitted,
            a free-standing ``network`` node will be created to hold the
            attribute; defaults to ``double`` for :class:`Math1D`,
            ``doubleAngle`` for :class:`~paya.runtime.plugs.Angle`,
            ``doubleLinear`` for :class:`~paya.runtime.plugs.Distance` and
            ``time`` for :class:`~paya.runtime.plugs.Time`
        :param str attributeType/at: the type of the attribute to create;
            defaults to something sensible for this 1D class
        :type node: :class:`str`, :class:`~paya.runtime.nodes.DependNode`
        :param \*\*kwargs: forwarded to
            :meth:`~paya.runtime.nodes.DependNode.addAttr`
        :return: The generated attribute.
        :rtype: `Attribute`
    
    .. py:method:: convertUnit(*factor)
    
        Connects and configures a ``unitConversion`` node and returns its
        output.
        
        :param \*factor: the conversion factor; if omitted, defaults to 1.0
        :return: The output of the ``unitConversion`` node.
        :rtype: :class:`~paya.runtime.plugs.Attribute`
    
    .. py:method:: asAngle()
    
        If this attribute is of type 'doubleAngle', it is returned as-is.
        If it's of any other type, it's converted using Maya UI rules and
        a 'doubleAngle' output for it returned.
        
        :return: The angle output.
        :rtype: :class:`~paya.runtime.plugs.Angle`
    
    .. py:method:: asRadians()
    
        :return: A unitless (type 'double') output representing radians.
            Conversions are performed according to Maya rules.
        :rtype: :class:`~paya.runtime.plugs.Angle`
    
    .. py:method:: __add__(other, swap=False)
    
        Implements **addition** (``+``).
        
        :param other: a value or plug of dimension 1, 2, 3 or 4
    
    .. py:method:: __radd__(other)
    
        Implements **reflected addition** (``+``). See :meth:`__add__`.
    
    .. py:method:: __sub__(other, swap=False)
    
        Implements **subtraction** (``-``).
        
        :param other: a value or plug of dimension 1, 2, 3
    
    .. py:method:: __rsub__(other)
    
        Implements **reflected subtraction** (``-``). See :meth:`__sub__`.
    
    .. py:method:: __mul__(other, swap=False)
    
        Implements **multiplication** (``-``).
        
        :param other: a value or plug of dimension 1 or 3
    
    .. py:method:: __rmul__(other)
    
        Implements **reflected multiplication** (``-``). See :meth:`__mul__`.
    
    .. py:method:: __truediv__(other, swap=False)
    
        Implements **division** (``/``).
        
        :param other: a value or plug of dimension 1 or 3
    
    .. py:method:: __rtruediv__(other)
    
        Implements **reflected division** (``/``). See :meth:`__truediv__`.
    
    .. py:method:: __pow__(other, modulo=None, swap=False)
    
        Implements **power** (``**``). The *modulo* keyword argument is
        ignored.
        
        :param other: a value or plug of dimension 1 or 3
    
    .. py:method:: __rpow__(other)
    
        Implements **reflected power** (``**``). See :meth:`__pow__`.
    
    .. py:method:: sqrt()
    
        :return: The square root of ``self``, equivalent to ``self ** 0.5``.
        :rtype: :class:``Math1D``
    
    .. py:method:: __neg__()
    
        Implements unary negation (``-``).
        :return: ``self * -1.0``
    
    .. py:method:: normal(scalar=True)
    
        :param bool scalar/s: if this is ``True``, normalization will
            be performed as ``self / self.get()``; if it's ``False``,
            ``self - self.get()`` will be performed instead; defaults
            to True
        :return: A normalized output for this plug. Normalization will be
            skipped, and ``self`` will be returned, if the currrent value
            of this plug is already 1.0 (for *scalar*) or 0.0.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: setSign(positive)
    
        :param bool positive: set the sign to positive
        :return: This scalar, with the sign forced to positive if *positive* is
            ``True``, otherwise to negative
    
    .. py:method:: copySignFrom(other)
    
        Copies the sign from another scalar.
        
        :param other: the scalar from which to copy the sign
        :type other: float, int, :class:`~paya.runtime.plugs.Math1D`
        :return: This scalar, with sign copied from *other*.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: abs()
    
        :return: ``self``, unsigned.
        :rtype: :class:`Math1D`
    
    .. py:method:: trunc()
    
        :return: The truncation of this float.
        :type: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: combine(*others, method='multiplication')
    
        Uses a `combinationShape
        <https://help.autodesk.com/cloudhelp/2023/ENU/Maya-Tech-Docs/Nodes/combinationShape.html>`_
        node to combine this scalar with *\*others*.
        
        :param \*others: unpacked scalars
        :type \*others: int, float, :class:`~paya.runtime.plugs.Math1D`
        :param method/m: an enum for the 'combinationMethod' attribute of the
            node; can be specified as an index or label; one of:
        
            -   0: 'multiplication' (the default)
            -   1: 'lowest weighting'
            -   2: 'smooth'
        :return: The combined output.
        :rtype: :class:`~paya.runtime.plugtypes.Math1D`
    
    .. py:method:: cycle(min, max)
    
        Cycles this value so that it remains within the specified
        range.
        
        :param min: the range minimum
        :type min: [1D scalar value or ``Math1D``]
        :param max: the range maximum
        :type max: [1D scalar value or ``Math1D``]
        :return: The looped scalar output.
        :rtype: :class:`Math1D`
    
    .. py:method:: __mod__(other, swap=False)
    
        Implements the % operator (modulo).
    
    .. py:method:: remap(oldMin, oldMax, newMin, newMax, clamp=True)
    
        Peforms simple linear remapping.
        
        :param oldMin: the previous range minimum
        :type oldMin: 1D value type or ``Math1D``
        :param oldMax: the previous range maximum
        :type oldMax: 1D value type or ``Math1D``
        :param newMin: the new range minimum
        :type newMin: 1D value type or ``Math1D``
        :param newMax: the new range maximum
        :type newMax: 1D value type or ``Math1D``
        :param bool clamp: clamp to the new range
            instead of extrapolating; defaults to ``True``
        :return: The remapped output.
        :rtype: :class:`Math1D`
    
    .. py:method:: clamp(min, max)
    
        Clamps this output
        
        :param min: the range minimum
        :type min: 1D scalar type or ``Math1D``
        :param max: the range maximum
        :type max: 1D scalar type or ``Math1D``
        :return: The clamped output.
        :rtype: :class:`Math1D`
    
    .. py:method:: minClamp(other)
    
        Clamps this value to a minimum of 'other'.
        
        :param other: the new range minimum
        :type other: 1D scalar type or ``Math1D``
        :return: The min-clamped output.
        :rtype: :class:`Math1D`
    
    .. py:method:: maxClamp(other)
    
        Clamps this value to a maximum of 'other'.
        
        :param other: the new range maximum
        :type other: 1D scalar type or ``Math1D``
        :return: The max-clamped output.
        :rtype: :class:`Math1D`
    
    .. py:method:: gatedClamp(floorOrCeiling, floorOpen, ceilingOpen)
    
        Useful for squash-and-stretch control.
        
        :param floorOrCeiling: acts as a floor or ceiling for this output,
            depending on *floorOpen* and *ceilingOpen*
        :type floorOrCeiling: float, :class:`~paya.runtime.plugs.Math1D`
        :param floorOpen: when this is at 0.0, this output won't dip below
            *floorOrCeiling*
        :type floorOpen: float, :class:`~paya.runtime.plugs.Math1D`
        :param ceilingOpen: when this is at 0.0, this output won't rise above
            *floorOrCeiling*
        :return: The clamped output.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: min(*others)
    
        Returns the minimum amongst ``self`` and ``\*others``.
        
        :param \*others: unpacked list of scalar values or inputs to compare to
        :type \*others: [scalar value type of ``Math1D``]
        :return: The maximum scalar.
        :rtype: :class:`Math1D`
    
    .. py:method:: max(*others)
    
        Returns the maximum amongst ``self`` and ``\*others``.
        
        :param \*others: unpacked list of scalar values or inputs to compare to
        :type \*others: [scalar value type of ``Math1D``]
        :return: The maximum scalar.
        :rtype: ``Math1D``
    
    .. py:method:: _makeCompCondition(other, operation)
    
        Configures a condition node for comparisons.
    
    .. py:method:: eq(other)
    
        Returns an output for 'equal'.
        
        :param other: the value or plug to compare to
        :type other: scalar value type or ``Math1D``
        :return: A ``condition`` node output that can be
            evaluated as a gating ``bool``.
        :rtype: ``Math1D``
    
    .. py:method:: ne(other)
    
        Returns an output for 'not equal'.
        
        :param other: the value or plug to compare to
        :type other: scalar value type or ``Math1D``
        :return: A ``condition`` node output that can be
            evaluated as a gating ``bool``.
        :rtype: ``Math1D``
    
    .. py:method:: gt(other)
    
        Returns an output for 'greater than'.
        
        :param other: the value or plug to compare to
        :type other: scalar value type or ``Math1D``
        :return: A ``condition`` node output that can be
            evaluated as a gating ``bool``.
        :rtype: ``Math1D``
    
    .. py:method:: ge(other)
    
        Returns an output for 'greater or equal'.
        
        :param other: the value or plug to compare to
        :type other: scalar value type or ``Math1D``
        :return: A ``condition`` node output that can be
            evaluated as a gating ``bool``.
        :rtype: ``Math1D``
    
    .. py:method:: lt(other)
    
        Returns an output for 'less than'.
        
        :param other: the value or plug to compare to
        :type other: scalar value type or ``Math1D``
        :return: A ``condition`` node output that can be
            evaluated as a gating ``bool``.
        :rtype: ``Math1D``
    
    .. py:method:: le(other)
    
        Returns an output for 'less or equal'.
        
        :param other: the value or plug to compare to
        :type other: scalar value type or ``Math1D``
        :return: A ``condition`` node output that can be
            evaluated as a gating ``bool``.
        :rtype: ``Math1D``
    
    .. py:method:: inRange(minValue, maxValue)
    
        :param minValue: the floor value
        :type minValue: float, int, str, :class:`Math1D`
        :param maxValue: the ceiling value
        :type maxnValue: float, int, str, :class:`Math1D`
        :return: :return: A ``condition`` node output that can be
            evaluated as a gating ``bool``.
        :rtype: ``Math1D``
    
    .. py:method:: ifElse(outputIfTrue, outputIfFalse)
    
        If-then-else output selector.
        
        :param Attribute outputIfTrue: plug to return if this plug evaluates as True
        :param Attribute outputIfFalse: plug to return if this plug evaluates as False
        :return: The selected output.
        :rtype: :class:`Attribute`
    
    .. py:method:: blend(other, weight=0.5, swap=False)
    
        Blends this output towards ``other``.
        
        :param other: The scalar value or plug towards which to blend
        :type other: 1D value type, or :class:`Math1D`
        :param weight/w: 'other' will be fully active at 1.0; defaults to 0.5
        :type weight/w: 1D value type or :class:`Math1D`
        :param bool swap/sw: swap operands; defaults to False
        :return: The blended output.
        :rtype: :class:`Math1D`
    
    .. py:method:: unaryExpr(operation, returnsRadians=False)
    
        Configures an expression node to run a unary expression on this plug,
        and returns its output.
        
        :param str operation: the expression operation, for example ``'sin'``
        :param bool returnsRadians: interpret the output as a radian return
            (e.g. from a trigonometric function) and pipe into an angle
            output; defaults to ``False``
        :return: the expression output
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: cos()
    
        Returns the trigonometric cosine.
        
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: sin()
    
        Returns the trigonometric sine.
        
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: tan()
    
        Returns the trigonometric tangent.
        
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: acos()
    
        Returns the inverse trigonometric cosine.
        
        :rtype: :class:`~paya.runtime.plugs.Angle`
    
    .. py:method:: asin()
    
        Returns the inverse trigonometric sine.
        
        :rtype: :class:`~paya.runtime.plugs.Angle`
    
    .. py:method:: atan()
    
        Returns the inverse trigonometric tangent.
        
        :rtype: :class:`~paya.runtime.plugs.Angle`
    
    .. py:method:: atTime(time, relative=False)
    
        Returns this output either sampled at a particular time, or with
        a live time offset.
        
        :param time: the time at which to sample this output
        :param bool relative: interpret 'time' as a relative offset;
            defaults to False
        :return: the sampled output
        :rtype: :class:`Math1D`