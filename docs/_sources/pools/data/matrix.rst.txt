************************
paya.runtime.data.Matrix
************************

.. py:currentmodule:: paya.runtime.data

.. py:class:: Matrix(*args, **kwargs)

    .. rubric:: Inheritance

    :class:`~pymel.core.datatypes.Matrix` :class:`~pymel.util.arrays.MatrixN` :class:`~pymel.util.arrays.Array` :class:`~maya.OpenMaya.MMatrix`



    .. py:method:: createLocator(size=1.0, name=None)
    
        Creates a locator and drives its SRT channels using this matrix.
        
        :shorthand: ``cl``
        
        :param str name/n: an optional name for the locator transform;
            defaults to a contextual name
        :param float size/siz: the locator display scale; defaults to 1.0
        :return: The locator.
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: decompose(rotateOrder='xyz')
    
        Decomposes this matrix.
        
        :param rotateOrder/ro: the rotate order to apply; defaults to 'xyz'
        :type rotateOrder/ro: str, int
        :return: dictionary of {channelName: :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.data.Vector`
            or :class:`~paya.runtime.data.EulerRotation`}
        :rtype: dict
    
    .. py:method:: decomposeAndApply(*slaves, translate=None, rotate=None, scale=None, shear=None, compensatePivots=False, compensateJointOrient=True, compensateRotateAxis=False, compensateJointScale=True, worldSpace=False, maintainOffset=False)
    
        Decomposes and applies this matrix to one or more transform slaves.
        
        :param \*slaves: one or more transforms to pose
        :type \*slaves: :class:`~paya.runtime.nodes.Transform`, :class:`str`
        :param bool translate/t: apply translation
        :param bool rotate/r: apply rotation
        :param bool scale/s: apply scale
        :param bool shear/sh: apply shear
        :param bool compensateJointScale/cjs: account for
            segmentScaleCompensate on joints; defaults to ``True``
        :param bool compensateJointOrient/cjo: account for jointOrient on
            joints; defaults to ``True``
        :param bool compensateRotateAxis/cra: account for ``rotateAxis``;
            defaults to ``False``
        :param bool compensatePivots/cp: compensate for pivots (non-joint
            transforms only); defaults to ``False``
        :param bool worldSpace/ws: premultiply this matrix with the inverse
            of the transform's parent matrix to negate the parent stack;
            defaults to ``False``
        :param bool maintainOffset/mo: this is here for parity with
            :meth:`paya.runtime.plugs.Matrix.decomposeAndApply`; when
            ``True``, the transform won't be modified at all; defaults to
            ``False``
        :return: ``self``
        :rtype: :class:`Matrix`
    
    .. py:method:: applyViaOpm(*slaves, worldSpace=False, persistentCompensation=False, preserveInheritsTransform=False, maintainOffset=False)
    
        Poses one or more transforms by modifying their ``offsetParentMatrix``
        attribute, with SRT channels compensated.
        
        :param \*slaves: one or more transforms to pose
        :type \*slaves: :class:`~paya.runtime.nodes.Transform`, :class:`str`
        :param bool worldSpace/ws: drive the transform in world-space;
            defaults to ``False``
        :param bool persistentCompensation/pc: unused; here for parity with
            :meth:`paya.runtime.plugs.Matrix.applyViaOpm`
        :param preserveInheritsTransform/pit: when *worldSpace* is
            requested, don't edit the ``inheritsTransform`` attribute on
            the slave; instead, localise against the current parent;
            defaults to ``False``
        :param bool maintainOffset/mo: this is here for parity with
            :meth:`paya.runtime.plugs.Matrix.applyViaOpm`; if set to ``True``,
            no action will be taken, and ``self`` will be returned; defaults
            to ``False``
        :return: ``self``
        :rtype: :class:`Matrix`
    
    .. py:method:: drive(*slaves, worldSpace=False, maintainOffset=False, useOffsetParentMatrix=<undefined>, preserveInheritsTransform=False)
    
        Poses one or more slaves using this matrix. (For the dynamic, true
        attachment, see :class:`paya.runtime.plugs.Matrix.attach`.)
        
        :param \*slaves: one or more transforms to pose
        :type \*slaves: :class:`~paya.runtime.nodes.Transform`, :class:`str`
        
        :param bool worldSpace/ws: drive the slaves in world-space;
           defaults to ``False``
        :param preserveInheritsTransform/pit: when *worldSpace* is requested,
            don't edit the ``inheritsTransform`` attribute on the slave;
            instead, localise against its current parent; defaults to
            ``False``
        :param bool maintainOffset/mo: this is here for parity with
            :meth:`paya.runtime.plugs.Matrix.attach`; if set to ``True``, no
            action will be taken, and ``self`` will be returned; defaults to
            ``False``
        :param bool useOffsetParentMatrix/uop: connect into
            ``offsetParentMatrix`` instead of decomposing into SRT channels;
            defaults to namesake configuration flag; it that's omitted too,
            defaults to ``True`` if Maya >= 2022, otherwise ``False``
        :return: ``self``
        :rtype: :class:`Matrix`
    
    .. py:method:: __add__(other)
    
        Implements **addition** (``+``).
        
        Overloads :meth:`pymel.core.datatypes.Matrix.__add__` to add
        support for 16D plugs.
    
    .. py:method:: __radd__(other)
    
        Implements **reflected addition** (``+``).
        
        Overloads :meth:`pymel.core.datatypes.Matrix.__add__` to add
        support for 16D plugs.
    
    .. py:method:: __mul__(other)
    
        Implements **multiplication** (``*``).
        
        Overloads :meth:`pymel.core.datatypes.Matrix.__mul__` to add
        support for 16D plugs.
    
    .. py:method:: __rmul__(other)
    
        Implements **reflected multiplication** (``*``).
        
        Overloads :meth:`pymel.core.datatypes.Matrix.__rmul__` to add
        support for 3D and 16D plugs as well as simple types.
    
    .. py:method:: __rxor__(other)
    
        Uses the exclusive-or operator (``^``) to implement
        **point-matrix multiplication** for 3D values and plugs.
    
    .. py:method:: normal()
    
        :return: A version of this matrix with all axis vectors normalized.
        :rtype: :class:`Matrix`
    
    .. py:method:: pick(translate=None, rotate=None, scale=None, shear=None, default=None)
    
        Filters this matrix, similar to Maya's pickMatrix. If 'default' is
        used, and it's a plug, the output will also be a plug.
        
        Flags are defined by omission, Maya-style.
        
        :shorthand: pk
        
        :param bool translate/t: use translate
        :param bool rotate/r: use rotate
        :param bool scale/s: use scale
        :param shear/sh: use shear
        :param default: take omitted fields from this matrix; can be a value
            or plug; defaults to None
        :type default: list, :class:`~paya.runtime.data.Matrix`, str, :class:`~paya.runtime.plugs.Matrix`
        :return: The filtered matrix.
        :rtype: :class:`~paya.runtime.data.Matrix` or :class:`~paya.runtime.plugs.Matrix`
    
    .. py:classmethod:: asOffset()
    
        Implemented for parity with :meth:`paya.runtime.plugs.Matrix.asOffset`.
        Returns an identity matrix.
    
    .. py:method:: getAxis(axis, normalize=False)
    
        Extracts the specified axis from this matrix as a vector or point
        value. Used to implement the following properties: **x**, **y**,
        **z** and **translate**/**t**. The property versions will always
        return non-normalized values.
        
        :param str axis: the axis to extract, one of 'x', 'y', 'z', '-x',
            '-y', '-z' or 'translate' / 't'
        :param bool normalize: normalize the extracted vector; defaults
            to False
        :return: :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.data.Point`
    
    .. py:method:: setAxis(axis, vals)
    
        Sets the values for the specified axis row. Used to implement the
        following properties: **x**, **y**, **z** and **translate**/**t**.
        
        :param str axis: the axis to extract, one of 'x', 'y', 'z', '-x',
            '-y', '-z' or 'translate' / 't'.
        :param vals: the values to assign to the row
        :type vals: :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.data.Point`, list
    
    .. py:method:: getX(normalize=False)
    
        Equivalent to ``getAxis('x')``.
        Getter for the **x** property.
    
    .. py:method:: setX(vals)
    
        Equivalent to ``setAxis('x')``.
        Setter for the **x** property.
    
    .. py:method:: getY(normalize=False)
    
        Equivalent to ``getAxis('y')``.
        Getter for the **y** property.
    
    .. py:method:: setY(vals)
    
        Equivalent to ``setAxis('y')``.
        Setter for the **y** property.
    
    .. py:method:: getZ(normalize=False)
    
        Equivalent to ``getAxis('z')``.
        Getter for the **z** property.
    
    .. py:method:: setZ(vals)
    
        Equivalent to ``setAxis('z')``.
        Setter for the **z** property.
    
    .. py:method:: getTranslate(normalize=False)
    
        Equivalent to ``getAxis('translate')``.
        Getter for the **translate**/**t** property.
    
    .. py:method:: setTranslate(vals)
    
        Equivalent to ``setAxis('translate')``.
        Setter for the **translate**/**t** property.
    
    .. py:method:: closestAxisToVector(vector)
    
        :return: The axis on this matrix that's most closely aligned to the
            given reference vector, e.g. '-x'.
        :rtype: str