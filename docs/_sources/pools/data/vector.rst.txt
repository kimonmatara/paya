************************
paya.runtime.data.Vector
************************

.. py:currentmodule:: paya.runtime.data

.. py:class:: Vector(*args, **kwargs)



    .. rubric:: Inheritance

    :class:`~pymel.core.datatypes.Vector` :class:`~pymel.util.arrays.VectorN` :class:`~pymel.util.arrays.Array` :class:`~maya.OpenMaya.MVector`

    .. py:method:: createLocator(name=None, size=1.0)
    
        :shorthand: ``cl``
        
        :param str name/n: an optional name for the locator transform; defaults to
            a contextual name
        :param float size/siz: a single scalar for the locator's
            ``localScale`` channels; defaults to 1.0
        :return: A locator with this 3D compound piped into its
            ``translate`` channel.
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: __add__(other)
    
        Implements **addition** (``+``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__add__` to add
        support for 1D or 3D plugs.
    
    .. py:method:: __radd__(other)
    
        Implements **reflected addition** (``+``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__radd__` to add
        support for 1D or 3D plugs.
    
    .. py:method:: __sub__(other)
    
        Implements **subtraction** (``-``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__sub__` to add
        support for 1D or 3D plugs.
    
    .. py:method:: __rsub__(other)
    
        Implements **reflected subtraction** (``-``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__rsub__` to add
        support for 1D or 3D plugs.
    
    .. py:method:: __mul__(other)
    
        Implements **multiplication** (``*``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__mul__` to add
        support for 1D, 3D and 16D (matrix) plugs.
    
    .. py:method:: __rmul__(other)
    
        Implements **reflected multiplication** (``*``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__rmul__` to add
        support for 1D and 3D plugs.
    
    .. py:method:: __truediv__(other)
    
        Implements **division** (``/``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__truediv__` to add
        support for 1D and 3D plugs.
    
    .. py:method:: __rtruediv__(other)
    
        Implements **reflected division** (``/``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__rtruediv__` to add
        support for 1D and 3D plugs.
    
    .. py:method:: __xor__(other)
    
        Uses the exclusive-or operator (``^``) to implement
        **point-matrix multiplication**.
        
        :param other: a matrix plug or value
        :type other: list, :class:`~paya.runtime.data.Matrix`, :class:`~paya.runtime.plugs.Matrix`
    
    .. py:method:: __pow__(other)
    
        Implements **power** (``**``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__pow__` to add
        support for 1D and 3D plugs.
    
    .. py:method:: __rpow__(other)
    
        Implements **reflected power** (``**``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__rpow__` to add
        support for 1D and 3D plugs.
    
    .. py:method:: blend(other, weight=0.5, swap=False, byVectorAngle=None, includeLength=False, clockNormal=None, unwindSwitch=None)
    
        :param other: the vector that will be fully active when 'weight'
            is 1.0 (or 0.0, if 'swap' is True)
        :type other: list, tuple, :class:`paya.runtime.data.Vector`,
            :class:`paya.runtime.plugs.Vector`
        :param weight/w: the blending weight; defaults to 0.5
        :type weight/w: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool swap/sw: swap operands around; defaults to False
        :param bool byVectorAngle/bva: blend by rotating one vector towards
            the other, rather than via linear value interpolation; defaults
            to ``True`` if *clockNormal* is provided, otherwise ``False``
        :param bool includeLength/ilg: blend vector lengths (magnitudes)
            as well; defaults to False
        :param clockNormal/cn: an optional winding vector; providing this
            will enable the unwinding options when blending by angle;
            defaults to None
        :type clockNormal/cn: None, tuple, list, str,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param int unwindSwitch/uws: ignored if *clockNormal* was omitted; an
            integer value to pick an angle unwinding mode:
        
            - ``0`` for shortest (the default)
            - ``1`` for positive
            - ``2`` for negative
        
        :return: The blended vector.
        :rtype: :class:`paya.runtime.plugs.Vector`,
            :class:`paya.runtime.data.Vector`
    
    .. py:method:: rotateByAxisAngle(axisVector, angle)
    
        :param axisVector: the vector around which to rotate this vector
        :type axisVector: list, tuple, :class:`~paya.runtime.data.Vector`
            or :class:`~paya.runtime.plugs.Vector`
        :param angle: the angle of rotation
        :type angle: float, :class:`~paya.runtime.data.Angle`, str or
            class:`~paya.runtime.plugs.Math3D`
        :return: This vector, rotated around ``axisVector`` by the specified
            ``angle``.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: dot(other, normalize=False)
    
        Returns the dot product of this vector and 'other'.
        
        Extends the base PyMEL method in these ways:
        
        -   Adds the 'normalize' keyword argument
        -   Works with plugs as well as values (if 'other' is a plug,
            the output will also be a plug)
        
        :param other: the other vector
        :type other: :class:`~paya.runtime.plugs.Math3D`, :class:`Vector`,
            :class:`Point`, list, str
        :param bool normalize/nr: normalize the output; defaults to False
        :return: The dot product.
        :rtype: :class:`Vector` or :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: cross(other, normalize=False, inlineGate=None, guard=False)
    
        Returns the cross product of this vector and 'other'.
        
        :param other: the other vector
        :type other: :class:`~paya.runtime.plugs.Math3D`, :class:`Vector`,
            :class:`Point`, list, str
        :param bool normalize/nr: normalize the output; defaults to False
        :param bool guard/g: if the two vectors are in-line, then:
        
            -   if *other* is a plug, switch the
                :class:`vectorProduct <paya.runtime.nodes.VectorProduct>`
                to 'No Operation'
        
            -   if *other* is a value, return ``self``
        
            Defaults to ``False``.
        :param inlineGate/ig: if you already have a boolean gate or
            value state to indicate whether the vectors are in-line,
            provide it here to prevent redundant checks; if this is
            provided, *guard/g* will be overriden to ``True``; defaults
            to ``None``
        :type inlineGate/ig: :class:`bool`, :class:`str`,
            :class:`~paya.runtime.plugs.Math1D`
        :return: The cross product.
        :rtype: :class:`Vector` or :class:`~paya.runtime.plugs.Math3D`
    
    .. py:method:: angleTo(other, clockNormal=None)
    
        Differs from PyMEL's :meth:`pymel.core.datatypes.Vector.angle` in
        the following ways:
        
        -   Adds the *clockNormal* option
        -   Unless plugs are involved, the return will be an instance of
            :class:`~paya.runtime.data.Angle` rather than a :class:`float`
        -   Unlike :meth:`pymel.core.datatypes.Vector.angle`, which always
            returns radians, here UI units are use
        
        :param other: the other vector
        :type other: :class:`~paya.runtime.plugs.Math3D`,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.data.Point`, list, str
        :param clockNormal/cn: provide this to get a 360 angle; defaults to
            None
        :type clockNormal/cn: None, list, tuple,
            :class:`~paya.runtime.plugs.Vector`,
            :class:`~paya.runtime.data.Vector`
        :return: The angle from this vector to ``other``.
        :rtype: :class:`~paya.runtime.plugs.Angle` or
            :class:`~paya.runtime.data.Angle`
    
    .. py:method:: projectOnto(other)
    
        See https://en.wikipedia.org/wiki/Vector_projection.
        
        :param other: the vector onto which to project this one
        :type other: list, tuple, str, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :return: The project of this vector onto *other*.
        :rtype: :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: rejectFrom(other)
    
        Same as 'make perpendicular to' (although length will change).
        See https://en.wikipedia.org/wiki/Vector_projection.
        
        :param other: the vector from which to reject this one
        :type other: list, tuple, str, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :return: The rejection of this vector from *other*.
        :rtype: :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: asTranslateMatrix()
    
        :return: An identity matrix with this vector / point as the translate
            component.
        :rtype: :class:`~paya.runtime.data.Matrix`
    
    .. py:method:: asScaleMatrix()
    
        Uses this vectors's three components as the magnitudes of an identity
        matrix's base vectors.
        
        :return: The scale matrix.
        :rtype: :class:`~paya.runtime.data.Matrix`
    
    .. py:method:: asShearMatrix()
    
        Composes this output's three components into a shear matrix.
        
        :return: The shear matrix.
        :rtype: :class:`~paya.runtime.data.Matrix`