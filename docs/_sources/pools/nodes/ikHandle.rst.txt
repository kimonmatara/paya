***************************
paya.runtime.nodes.IkHandle
***************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: IkHandle(*args, **kwargs)

    .. py:classmethod:: create(name=None, **mayaOptions)
    
        :param name/n: one or more name elements; defaults to None
        :type name/n: None, str, int, or list
        :param \*\*mayaOptions: all overflow keyword arguments are forwarded
            to :func:`~pymel.core.animation.ikHandle`
        :return: The constructed node.
        :rtype: :class:`~pymel.core.general.PyNode`
    
    .. py:method:: getEndJoint()
    
        :return: The tip joint for the chain driven by this IK handle.
        :rtype: :class:`~paya.runtime.nodes.Joint`
    
    .. py:method:: getJointList(includeTip=False)
    
        Overloads :meth:`~paya.core.nodetypes.Joint.getJointList` to add the
        ``includeTip/it`` option. Note that, for parity with PyMEL, this is
        set to False by default.
        
        :param bool includeTip/it: include the tip joint; defaults to False
        :return: Joints driven by this IK handle.
        :rtype: list
    
    .. py:method:: chain()
    
        :return: The driven chain, including tip.
        :rtype: :class:`~paya.lib.skel.Chain`
    
    .. py:method:: setTwistVectors(startVector, endVector, upAxis, downAxis=None)
    
        For spline handles only. Activates advanced twist options and
        configures the start / end vectors.
        
        :param startVector: the start 'up' vector
        :type startVector: list, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Math3D`
        :param endVector: the end 'up' vector
        :type endVector: list, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Math3D`
        :param str upAxis: the chain axis to map to the 'up' vectors, for
            example 'z'
        :param str downAxis/da: if you know the 'bone' axis of the chain,
            provide it here to avoid extraneous calculations; defaults to None
        :return: ``self``
    
    .. py:method:: setPolePoint(point, maintainOffset=False)
    
        Configures the pole vector by aiming towards ``point`` in world-space.
        
        :param point: the point to aim towards
        :type point: list, tuple, :class:`~paya.runtime.data.Point`
            or :class:`~paya.runtime.plugs.Math3D`
        :param bool maintainOffset/mo: preserve chain state; defaults to False
        :return: ``self``