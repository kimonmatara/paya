*********************************
paya.runtime.nodes.GeometryFilter
*********************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: GeometryFilter(*args, **kwargs)

    .. rubric:: Inheritance

    :class:`~pymel.core.nodetypes.GeometryFilter` :class:`~paya.runtime.nodes.DependNode` :class:`~pymel.core.nodetypes.DependNode` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`



    .. py:classmethod:: getFromGeo(*geometry)
    
        :param \*geometry: the geometries to inspect
        :type \*geometry: list, tuple,
            :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.nodes.DeformableShape`,
        :return: Deformers of this type detected across the specified
            geometries.
        :rtype: [:class:`~paya.runtime.nodes.GeometryFilter`]
    
    .. py:method:: getShapes()
    
        Convenience wrapper for
        :func:`deformer(q=True, g=True)<pymel.core.animation.deformer>`.
        
        :rtype: The shapes affected by this deformer.
        :return: [:class:`~paya.runtime.nodes.DeformableShape`]
    
    .. py:method:: dumpWeights(filepath, shape=None, remap=None, vertexConnections=None, weightPrecision=None, weightTolerance=None, attribute=None, defaultValue=None)
    
        Wrapper for :func:`~pymel.internal.pmcmds.deformerWeights` in 'export'
        mode. Arguments are post-processed to ensure that only relevant
        deformers and shapes are included. See Maya help for
        :func:`deformerWeights` for complete flag information.
        
        :param str filepath: the path to the XML file.
        :param shape/sh: the shape to export weights for; if omitted, all
            associated shapes are included
        :type shape/sh: list, tuple, str, :class:`~pymel.core.general.PyNode`
        :return: ``self``
        :rtype: :class:`GeometryFilter`
    
    .. py:method:: loadWeights(filepath, shape=None, method='index', worldSpace=None, attribute=None, ignoreName=None, positionTolerance=None, remap=None)
    
        Wrapper for :func:`~pymel.internal.pmcmds.deformerWeights` in 'import'
        mode. Arguments are post-processed to ensure that only relevant
        deformers and shapes are included. See Maya help for
        :func:`deformerWeights` for complete flag information.
        
        :param str filepath: the path to the XML file.
        :param shape/sh: the shape to export weights for; if omitted, all
            associated shapes are included
        :type shape/sh: list, tuple, str, :class:`~pymel.core.general.PyNode`
        :return: ``self``
        :rtype: :class:`GeometryFilter`
    
    .. py:method:: copyWeightsFrom(sourceDeformer, sourceShape=None, destShape=None, sourceUVSet=None, destUVSet=None, method='index')
    
        Copies weights from another deformer to this one.
        
        :param sourceDeformer: the deformer to copy weights from
        :type sourceDeformer: str, :class:`~paya.runtime.nodes.GeometryFilter`
        :param sourceShape/ssh: the shape to copy weights from; if omitted,
            defaults to the first detected shape
        :type sourceShape/ssh: str, :class:`~paya.runtime.nodes.DagNode`
        :param destShape/dsh: the shape to copy weights to; if omitted,
            defaults to the first detected shape
        :type destShape/dsh: str, :class:`~paya.runtime.nodes.DagNode`
        :param sourceUVSet/suv: if specified, 'method' will be overriden to
            'uv'; if omitted, and 'method' is 'uv', the current UV set will
            be used; defaults to None
        :type sourceUVSet/suv: str, None
        :param destUVSet/duv: if specified, 'method' will be overriden to
            'uv'; if omitted, and 'method' is 'uv', the current UV set will
            be used; defaults to None
        :type destUVSet/duv: str, None
        :param str method/m: one of:
        
            - ``index`` (via XML)
            - ``bilinear`` (via XML)
            - ``barycentric`` (via XML)
            - ``nearest`` (via XML)
            - ``over`` (via XML)
        
            - ``closestPoint`` (in-scene)
            - ``closestComponent`` (in-scene)
            - ``uv`` (in-scene)
            - ``rayCast`` (in-scene)
        
        :return: ``self``
        :rtype: :class:`GeometryFilter`