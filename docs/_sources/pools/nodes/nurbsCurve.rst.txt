*****************************
paya.runtime.nodes.NurbsCurve
*****************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: NurbsCurve(*args, **kwargs)

    .. py:classmethod:: create(*points, degree=3, name=None, bSpline=False, under=None, displayType=None, conformShapeNames=True, intermediate=False)
    
        Draws static or dynamic curves.
        
        :param \*points: the input points; can be values or attributes
        :type \*points: list, tuple, str, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.data.Point`, :class:`~paya.runtime.plugs.Vector`
        :param bool bSpline/bsp: only available if *degree* is 3; draw as a
            bSpline (similar to drawing by EP); defaults to False
        :param int degree/d: the curve degree; defaults to 3
        :param under/u: an optional destination parent; no space conversion
            will take place; if the parent has transforms, the curve shape
            will be transformed as well; defaults to None
        :type under/u: None, str, :class:`~paya.runtime.nodes.Transform`
        :param name/n: one or more name elements; defaults to None
        :type name/n: str, int, None, tuple, list
        :param bool conformShapeNames/csn: ignored if *under* is ``None``;
            conform destination parent shapes after reparenting; defaults to
            True
        :param bool intermediate: set the shape to intermediate; defaults to
            False
        :param displayType/dt: if provided, an index or enum label:
        
            - 0: 'Normal'
            - 1: 'Template'
            - 2: 'Reference'
        
            If omitted, display overrides won't be activated at all.
        :type displayType/dt: None, int, str
        :type displayType/dt:
        :return: The curve shape.
        :rtype: :class:`NurbsCurve`
    
    .. py:classmethod:: createFromMacro(macro, **overrides)
    
        :param dict macro: the type of macro returned by :meth:`macro`
        :param \*\*overrides: overrides passed-in as keyword arguments
        :return: A curve constructed using the macro.
        :rtype: :class:`NurbsCurve`.
    
    .. py:method:: macro()
    
        :return: A simplified representation of this curve that can be used
            by :meth:`createFromMacro` to reconstruct it.
        :rtype: dict
    
    .. py:classmethod:: normalizeMacro(macro)
    
        Used by the shapes library to fit control points inside a unit cube.
        This is an in-place operation; the method has no return value.
        
        :param dict macro: the macro to edit
    
    .. py:method:: initCurveInfo(reuse=True)
    
        Initialises, or retrieves, a ``curveInfo`` node connected to this
        curve.
        
        :param bool reuse/re: look for existing nodes
        :return: The ``curveInfo`` node.
        :rtype: :class:`~paya.runtime.nodes.CurveInfo`
    
    .. py:method:: length(plug=False, tolerance=0.001)
    
        Overload of :meth:`pymel.core.nodetypes.NurbsCurve.length`.
        
        :param bool plug/p: return an attribute, not just a value;
            defaults to False
        :param float tolerance/tol: ignored for the plug implementation;
            defaults to 0.001
        :return: The length of this curve.
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: closestPoint_(refPoint, plug=False)
    
        :param refPoint: the reference point
        :type refPoint: list, tuple, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The closest world-space point along this curve to the given
            reference point.
        :rtype: :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: pointAtParam(param, plug=False)
    
        :param param: the parameter at which to sample
        :type param: float, :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A world-space point at the specified parameter.
        :type: :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: pointAtLength(length, plug=False)
    
        :param length: the length at which to sample
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A world-space point at the specified length.
        :type: :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: pointAtFraction(fraction, plug=False)
    
        :param fraction: the length fraction at which to sample
        :type fraction: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A world-space point at the specified length fraction.
        :type: :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: paramAtPoint(point, asComponent=True, plug=False)
    
        Returns the parameter at the given point. This is a 'forgiving'
        implementation; a closest param will still be returned if the
        point is not on the curve.
        
        :alias: ``closestParam``
        :param point: the reference point
        :type point: list, tuple, :class:`~paya.runtime.data.Point`
            :class:`~paya.runtime.plugs.Vector`
        :param bool plug/p: force a dynamic output; defaults to False
        :param bool asComponent/ac: return an instance of
            :class:`~paya.runtime.comps.NurbsCurveParameter` rather than
            a float; defaults to True
        :return: The sampled parameter.
        :rtype: float, :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: paramAtFraction(fraction, asComponent=True, plug=False)
    
        :param fraction: the length fraction at which to sample
        :type fraction: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :param bool asComponent/ac: return an instance of
            :class:`~paya.runtime.comps.NurbsCurveParameter` rather than
            a float; defaults to True
        :return: The parameter at the given length fraction.
        :rtype: float, :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: paramAtLength(length, asComponent=True, plug=False)
    
        :param length: the length at which to sample
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :param bool asComponent/ac: return an instance of
            :class:`~paya.runtime.comps.NurbsCurveParameter` rather than
            a float; defaults to True
        :return: The parameter at the given length.
        :rtype: float, :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: lengthAtFraction(fraction, plug=False)
    
        :param fraction: the length fraction
        :type fraction: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The curve length at the given fraction.
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: lengthAtParam(param, plug=False)
    
        :param param: the parameter
        :type param: float, :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: Tthe curve length at the given parameter.
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: lengthAtPoint(point, plug=False)
    
        Returns the curve length at the given point. This is a 'forgiving'
        implementation; a closest point will be used if *point* is not on the
        curve.
        
        :param point: the point
        :type point: list, tuple, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The curve length.
        :rtype: :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: fractionAtLength(length, plug=False)
    
        :param length: the length at which to sample a fraction
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The length fraction at the given length.
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: fractionAtParam(param, plug=False)
    
        :param param: the parameter at which to sample a fraction
        :type param: float, :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The length fraction at the given parameter
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: fractionAtPoint(point, plug=False)
    
        :param point: the point at which to sample a fraction
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The length fraction at the given point.
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: upVectorAtParam(param, plug=False)
    
        :param param: the parameter at which to sample the up vector
        :rtype param: float, str, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A vector that's perpendicular to both the curve normal
            and tangent.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: upVectorAtFraction(fraction, plug=False)
    
        :param fraction: the length fraction at which to sample the up vector
        :rtype fraction: float, str, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A vector that's perpendicular to both the curve normal
            and tangent.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: upVectorAtLength(fraction, plug=False)
    
        :param length: the length at which to sample the up vector
        :rtype length: float, str, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A vector that's perpendicular to both the curve normal
            and tangent.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: upVectorAtPoint(point, plug=False)
    
        :param point: the point at which to sample the up vector
        :rtype point: list, tuple, str, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A vector that's perpendicular to both the curve normal
            and tangent.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: matrixAtParam(param, tangentAxis, upAxis, squashStretch=False, upVector=None, upObject=None, upCurve=None, globalScale=None, matchedCurve=False, plug=False)
    
        :param param: the parameter at which to sample the matrix
        :type param: float, str, :class:`~paya.runtime.Math1D`
        :param str tangentAxis: the axis to align to the curve tangent
        :param str upAxis: the axis to align to the resolved up vector
        :param bool squashStretch/ss: incorporate tangent stretching
            (dynamic only); defaults to False
        :param upVector/upv: used as an up vector on its own, or extracted from
            *upObject*; defaults to None
        :type upVector/upv: None, list, tuple, str,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param upCurve/upc: an up curve; defaults to None
        :type upCurve/upc: str, :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param upObject/upo: used as an aiming interest on its own, or as a source
            for *upVector*; defaults to None
        :type upObject/upo: None, str, :class:`~paya.runtime.nodes.Transform`
        :param globalScale/gs: used to drive scaling on dynamic matrices only;
            the scale will be normalised; defaults to None
        :type globalScale/gs: None, float, :class:`~paya.runtime.plugs.Math1D`
        :param bool matchedCurve/mc: set this to True when *upCurve* has the
            same U domain as this curve, to avoid unnecessary closest-point
            calculations; defaults to False
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A matrix at the specified parameter, constructed using the
            most efficient DG configuration for the given options.
        :rtype: :class:`~paya.runtime.plugs.Matrix`,
            :class:`~paya.runtime.data.Matrix`
    
    .. py:method:: matrixAtFraction(fraction, tangentAxis, upAxis, squashStretch=False, upVector=None, upObject=None, upCurve=None, globalScale=None, matchedCurve=False, plug=False)
    
        :param fraction: the fraction at which to sample the matrix
        :type fraction: float, str, :class:`~paya.runtime.Math1D`
        :param str tangentAxis: the axis to align to the curve tangent
        :param str upAxis: the axis to align to the resolved up vector
        :param bool squashStretch/ss: incorporate tangent stretching
            (dynamic only); defaults to False
        :param upVector/upv: used as an up vector on its own, or extracted from
            *upObject*; defaults to None
        :type upVector/upv: None, list, tuple, str,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param upCurve/upc: an up curve; defaults to None
        :type upCurve/upc: str, :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param upObject/upo: used as an aiming interest on its own, or as a source
            for *upVector*; defaults to None
        :type upObject/upo: None, str, :class:`~paya.runtime.nodes.Transform`
        :param globalScale/gs: used to drive scaling on dynamic matrices only;
            the scale will be normalised; defaults to None
        :type globalScale/gs: None, float, :class:`~paya.runtime.plugs.Math1D`
        :param bool matchedCurve/mc: set this to True when *upCurve* has the
            same U domain as this curve, to avoid unnecessary closest-point
            calculations; defaults to False
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A matrix at the specified fraction, constructed using the
            most efficient DG configuration for the given options.
        :rtype: :class:`~paya.runtime.plugs.Matrix`,
            :class:`~paya.runtime.data.Matrix`
    
    .. py:method:: matrixAtLength(length, tangentAxis, upAxis, squashStretch=False, upVector=None, upObject=None, upCurve=None, globalScale=None, matchedCurve=False, plug=False)
    
        :param length: the length at which to sample the matrix
        :type length: float, str, :class:`~paya.runtime.Math1D`
        :param str tangentAxis: the axis to align to the curve tangent
        :param str upAxis: the axis to align to the resolved up vector
        :param bool squashStretch/ss: incorporate tangent stretching
            (dynamic only); defaults to False
        :param upVector/upv: used as an up vector on its own, or extracted from
            *upObject*; defaults to None
        :type upVector/upv: None, list, tuple, str,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param upCurve/upc: an up curve; defaults to None
        :type upCurve/upc: str, :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param upObject/upo: used as an aiming interest on its own, or as a source
            for *upVector*; defaults to None
        :type upObject/upo: None, str, :class:`~paya.runtime.nodes.Transform`
        :param globalScale/gs: used to drive scaling on dynamic matrices only;
            the scale will be normalised; defaults to None
        :type globalScale/gs: None, float, :class:`~paya.runtime.plugs.Math1D`
        :param bool matchedCurve/mc: set this to True when *upCurve* has the
            same U domain as this curve, to avoid unnecessary closest-point
            calculations; defaults to False
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A matrix at the specified length, constructed using the
            most efficient DG configuration for the given options.
        :rtype: :class:`~paya.runtime.plugs.Matrix`,
            :class:`~paya.runtime.data.Matrix`
    
    .. py:method:: matrixAtPoint(point, tangentAxis, upAxis, squashStretch=False, upVector=None, upObject=None, upCurve=None, globalScale=None, matchedCurve=False, plug=False)
    
        :param point: the point at which to sample the matrix
        :type point: tuple, list, str, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Point`
        :param str tangentAxis: the axis to align to the curve tangent
        :param str upAxis: the axis to align to the resolved up vector
        :param bool squashStretch/ss: incorporate tangent stretching
            (dynamic only); defaults to False
        :param upVector/upv: used as an up vector on its own, or extracted from
            *upObject*; defaults to None
        :type upVector/upv: None, list, tuple, str,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param upCurve/upc: an up curve; defaults to None
        :type upCurve/upc: str, :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param upObject/upo: used as an aiming interest on its own, or as a source
            for *upVector*; defaults to None
        :type upObject/upo: None, str, :class:`~paya.runtime.nodes.Transform`
        :param bool fraction/fr: interpret *paramOrFraction* as a fraction;
            defaults to False
        :param globalScale/gs: used to drive scaling on dynamic matrices only;
            the scale will be normalised; defaults to None
        :type globalScale/gs: None, float, :class:`~paya.runtime.plugs.Math1D`
        :param bool matchedCurve/mc: set this to True when *upCurve* has the
            same U domain as this curve, to avoid unnecessary closest-point
            calculations; defaults to False
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A matrix at the specified point, constructed using the
            most efficient DG configuration for the given options.
        :rtype: :class:`~paya.runtime.plugs.Matrix`,
            :class:`~paya.runtime.data.Matrix`
    
    .. py:method:: distributePoints(numberOrFractions, plug=False)
    
        :param numberOrFractions: this can either be a list of length
            fractions, or a number
        :type numberOrFractions: tuple, list or int
        :param bool plug/p: force a dynamic output; defaults to False
        :return: World-space points distributed along the length of the curve.
        :rtype: [:class:`~paya.runtime.data.Point`],
            [:class:`~paya.runtime.plug.Vector`]
    
    .. py:method:: distributeParams(numberOrFractions, plug=False, asComponent=True)
    
        :param numberOrFractions: this can either be a list of length
            fractions, or a number
        :type numberOrFractions: tuple, list or int
        :param bool asComponent/ac: if parameter values are returned, use
            :class:`~paya.runtime.comps.NurbsCurveParameter` instances instead
            of floats; defaults to True
        :param bool plug/p: force a dynamic output; defaults to False
        :return: Parameters distributed along the length of the curve.
        :rtype: [float], [:class:`~paya.runtime.comps.NurbsCurveParameter`],
            [:class:`~paya.runtime.plugs.Math1D`]
    
    .. py:method:: distributeLengths(numberOrFractions, plug=False)
    
        :param numberOrFractions: this can either be a list of length
            fractions, or a number
        :type numberOrFractions: tuple, list or int
        :param bool plug/p: force a dynamic output; defaults to False
        :return: Lengths distributed along the curve.
        :rtype: [float], [:class:`~paya.runtime.plugs.Math1D`]
    
    .. py:method:: distributeMatrices(numberOrFractions, tangentAxis, upAxis, upVector=None, upCurve=None, squashStretch=False, globalScale=None, matchedCurve=None)
    
        If neither *upVector* or *upCurve* are provided, curve normals are
        used.
        
        :param numberOrFractions: a single number of a list of explicit
            length fractions at which to generate matrices
        :type numberOrFractions: int, [float, :class:`~paya.runtime.plugs.Math1D`]
        :param str tangentAxis: the matrix axis to map to the curve tangent,
            for example '-y'
        :param str upAxis: the matrix to align to the resolved up vector, for
            example 'x'
        :param upVector/upv: if provided, should be either a single up vector or a
            a list of up vectors (one per fraction); defaults to None
        :type upVector/upv:
            None,
            list, tuple, :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.plugs.Vector`,
            [list, tuple, :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.plugs.Vector`]
        :param upCurve/upc: an 'up' curve, as seen for example on Maya's
            ``curveWarp``; defaults to None
        :type upCurve/upc: None, str, :class:`~paya.runtime.nodes.Transform`,
            :class:`paya.runtime.nodes.NurbsCurve`,
            :class:`paya.runtime.plugs.NurbsCurve`
        :param bool squashStretch/ss: allow tangent scaling; defaults to False
        :param globalScale/gs: a global scaling factor; defaults to None
        :type globalScale/gs: None, float, :class:`~paya.runtime.plugs.Math1D`
        :param bool matchedCurve/mc: set this to True when *upCurve* has the
            same U domain as this curve, to avoid closest-point calculations;
            defaults to False
        :return: Matrices, distributed along the curve.
        :rtype: [:class:`~paya.runtime.plugs.Matrix`]
    
    .. py:method:: distributeAimingMatrices(numberOrFractions, aimAxis, upAxis, upVector=None, upCurve=None, squashStretch=False, globalScale=None, matchedCurve=None)
    
        Similar to :meth:`distributeMatrices` except that here the matrices
        are aimed at each other for a 'chain-like' effect. If neither
        *upVector* or *upCurve* are provided, curve normals are used.
        
        :param numberOrFractions: a single number of a list of explicit
            length fractions at which to generate matrices
        :type numberOrFractions: int, [float, :class:`~paya.runtime.plugs.Math1D`]
        :param str tangentAxis: the matrix axis to map to the curve tangent,
            for example '-y'
        :param str upAxis: the matrix to align to the resolved up vector, for
            example 'x'
        :param upVector/upv: if provided, should be either a single up vector or a
            a list of up vectors (one per fraction); defaults to None
        :type upVector/upv:
            None,
            list, tuple, :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.plugs.Vector`,
            [list, tuple, :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.plugs.Vector`]
        :param upCurve/upc: an 'up' curve, as seen for example on Maya's
            ``curveWarp``; defaults to None
        :type upCurve/upc: None, str, :class:`~paya.runtime.nodes.Transform`,
            :class:`paya.runtime.nodes.NurbsCurve`,
            :class:`paya.runtime.plugs.NurbsCurve`
        :param bool squashStretch/ss: allow tangent scaling; defaults to False
        :param globalScale/gs: a global scaling factor; defaults to None
        :type globalScale/gs: None, float, :class:`~paya.runtime.plugs.Math1D`
        :param bool matchedCurve/mc: set this to True when *upCurve* has the
            same U domain as this curve, to avoid closest-point calculations;
            defaults to False
        :return: Matrices, distributed along the curve.
        :rtype: [:class:`~paya.runtime.plugs.Matrix`],
            [:class:`~paya.runtime.data.Matrix`]