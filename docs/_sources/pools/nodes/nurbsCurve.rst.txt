*****************************
paya.runtime.nodes.NurbsCurve
*****************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: NurbsCurve(*args, **kwargs)

    .. py:classmethod:: createFromMacro(macro, **overrides)
    
        :param dict macro: the type of macro returned by :meth:`macro`
        :param \*\*overrides: overrides passed-in as keyword arguments
        :return: A curve constructed using the macro.
        :rtype: :class:`NurbsCurve`.
    
    .. py:method:: macro()
    
        :return: A simplified representation of this curve that can be used
            by :meth:`createFromMacro` to reconstruct it.
        :rtype: dict
    
    .. py:classmethod:: normalizeMacro(macro)
    
        Used by the shapes library to fit control points inside a unit cube.
        This is an in-place operation; the method has no return value.
        
        :param dict macro: the macro to edit
    
    .. py:method:: takeClosestPoint(refPoint)
    
        :param refPoint: the reference point
        :return: The closest point along the curve to 'refPoint`.
        :rtype: :class:`~paya.runtime.data.Point`
    
    .. py:method:: takePointAtParam(param)
    
        :param param: the parameter to sample
        :type param: float, int,
            :class:`~paya.runtime.comps.NurbsCurveParameter`
        :return: A world-space point at the specified parameter.
        :rtype: :class:`~paya.runtime.data.Point`
    
    .. py:method:: takeParamAtFraction(fraction)
    
        :param float fraction: the length fraction to sample
        :return: A parameter at the given length fraction.
        :rtype:
            :class:`~paya.runtime.comps.NurbsCurveParameter`
    
    .. py:method:: takePointAtFraction(fraction)
    
        :param fraction: the length fraction to sample
        :return: A world-space point at the given length fraction.
        :rtype: :class:`~paya.runtime.data.Point`
    
    .. py:method:: distributePoints(numberOrFractions)
    
        Return world-space points distributed along the length of the curve.
        
        :param numberOrFractions: this can either be a list of length
            fractions, or a number
        :type numberOrFractions: tuple, list or int
        :return: The distributed points.
        :rtype: :class:`list` of :class:`~paya.runtime.data.Point`