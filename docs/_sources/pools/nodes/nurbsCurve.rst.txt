*****************************
paya.runtime.nodes.NurbsCurve
*****************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: NurbsCurve(*args, **kwargs)

    .. py:classmethod:: create(*points, degree=3, name=None, bSpline=False, under=None, displayType=None, conformShapeName=True, intermediate=False, lineWidth=None)
    
        Draws static or dynamic curves.
        
        :param \*points: the input points; can be values or attributes
        :type \*points: list, tuple, str, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.data.Point`, :class:`~paya.runtime.plugs.Vector`
        :param bool bSpline/bsp: only available if *degree* is 3; draw as a
            bSpline (similar to drawing by EP); defaults to False
        :param int degree/d: the curve degree; defaults to 3
        :param under/u: an optional destination parent; no space conversion
            will take place; if the parent has transforms, the curve shape
            will be transformed as well; defaults to None
        :type under/u: None, str, :class:`~paya.runtime.nodes.Transform`
        :param name/n: one or more name elements; defaults to None
        :type name/n: str, int, None, tuple, list
        :param bool conformShapeName/csn: if reparenting, rename the shape to match
            the destination parent; defaults to True
        :param bool intermediate: set the shape to intermediate; defaults to
            False
        :param displayType/dt: if provided, an index or enum label:
        
            - 0: 'Normal'
            - 1: 'Template'
            - 2: 'Reference'
        
            If omitted, display overrides won't be activated at all.
        :type displayType/dt: None, int, str
        :param lineWidth/lw: an override for the line width; defaults to None
        :type lineWidth/lw: None, float
        :return: The curve shape.
        :rtype: :class:`NurbsCurve`
    
    .. py:classmethod:: createArc(*points, directionVector=None, radius=1.0, toggleArc=False, sections=8, degree=3, guard=None, name=None, lineWidth=None)
    
        Constructs a circular arc. The arc will be live if any of the
        arguments are plugs.
        
        :param points: two or three points, packed or unpacked
        :type points: tuple, list, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.data.Vector`
        :param directionVector/dv:
            on two-point arcs this defaults to [0, 0, 1] (Z) and defines
            the arc's 'normal';
            on three point arcs it must be provided explicitly if 'guard'
            is requested, and it is used to jitter the input points to avoid
            Maya errors
        :type directionVector/dv: None, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param radius/r: for two-point arcs only: the arc radius; defaults to
            1.0
        :type radius/r: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool toggleArc/tac: for two-point arcs only: draw the arc
            on the outside; defaults to False
        :param sections/s: the number of arc sections; defaults to 8
        :type sections/s: int, :class:`~paya.runtime.plugs.Math1D`
        :param degree/d: the arc degree; defaults to 3
        :type degree/d: int, :class:`~paya.runtime.plugs.Math1D`
        :param bool guard: for three-point arcs only: prevent the arc
            from disappearing with an error when the input points are
            collinear; defaults to True if *directionVector* was provided,
            otherwise False.
        :param lineWidth/lw: an override for the line width; defaults to None
        :type lineWidth/lw: None, float
        :param name/n: one or more name elements; defaults to None
        :type name/n: str, int, None, tuple, list
        :return: The curve shape.
        :rtype: :class:`~paya.runtime.nodes.NurbsCurve`
    
    .. py:classmethod:: createFromMacro(macro, **overrides)
    
        :param dict macro: the type of macro returned by :meth:`macro`
        :param \*\*overrides: overrides passed-in as keyword arguments
        :return: A curve constructed using the macro.
        :rtype: :class:`NurbsCurve`.
    
    .. py:method:: subCurve(minValue, maxValue, relative=False)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.subCurve`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        Connects and configures a ``subCurve`` node and returns its output.
        
        :param minValue: a source for the ``minValue`` attribute
        :type minValue: float, :class:`~paya.runtime.plugs.Math1D`
        :param maxValue: a source for the ``maxValue`` attribute
        :type maxValue: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool relative/r: set the node to 'relative'; defaults to False
        :return: The sub-curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: detach(*parameters, select=None)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.detach`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        Detaches this curve at the specified parameter(s).
        
        :param \*parameters: the parameter(s) at which to 'cut' the curve
        :type \*parameters: float, :class:`~paya.runtime.plugs.Math1D`
        :param select/sel: a subset of output indices to include in the
            return; ``keep`` attributes will configured accordingly
        :return: [:class:`~paya.runtime.plugs.NurbsCurve`]
    
    .. py:method:: extend(lenPointOrVec, point=None, linear=None, circular=None, extrapolate=None, useSegment=False, multipleKnots=True, atStart=None, atBothEnds=None)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.extend`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        Extends this curve in a variety of ways.
        
        :param lenPointOrVec: a length, point or vector for the extension
        :type lenPointOrVec: float, tuple, list, str,
            :class:`~paya.runtime.data.Point`
            :class:`~paya.runtime.data.Vector`
            :class:`~paya.runtime.plugs.Math1D`
            :class:`~paya.runtime.plugs.Vector`
        :param bool point: if *lenPointOrVec* is a 3D value or plug,
            interpret it as a point rather than a vector; defaults to True
            if *lenPointOrVec* is an instance of
            :class:`~paya.runtime.data.Point`, otherwise False
        :param bool linear/lin: if extending by distance, use the 'linear'
            mode of the ``extendCurve`` node; defaults to True
        :param bool circular/cir: if extending by distance, use the 'circular'
            mode of the ``extendCurve`` node; defaults to False
        :param bool extrapolate/ext: if extending by distance, use the
            'extrapolate' mode of the ``extendCurve`` node; defaults to False
        :param bool useSegment/seg: if extending by vector or point, don't use
            an ``extendCurve`` node; for improved accuracy, attach a line
            segment instead; defaults to False
        :param bool multipleKnots/mul: keep multiple knots; defaults to
            True
        :param bool atStart/ats: extend from the start of the curve rather than the end;
            defaults to False
        :param bool atBothEnds/abe: if extending by length, extend from both
            ends of the curve; defaults to False
        :return: The extended curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: extendByVector(vector, atStart=False, multipleKnots=True, useSegment=False)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.extendByVector`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        :param vector: the vector along which to extend
        :type vector: list, tuple, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool atStart/ats: extend from the start instead of the end;
            defaults to False
        :param bool multipleKnots/mul: keep multiple knots; defaults to
            True
        :param bool useSegment/seg: for improved accuracy, extend using an
            attached line segment instead of the 'Linear' mode of an
            ``extendCurve`` node; defaults to False
        :return: This curve, extended along the specified vector.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: extendToPoint(point, atStart=False, multipleKnots=True, useSegment=False)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.extendToPoint`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        :param point: the point to reach for
        :type point: list, tuple, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool atStart/ats: extend from the start instead of the end;
            defaults to False
        :param bool multipleKnots/mul: keep multiple knots; defaults to
            True
        :param bool useSegment/seg: for improved accuracy, extend using an
            attached line segment instead of the 'Linear' mode of an
            ``extendCurve`` node; defaults to False
        :return: This curve, extended to meet the specified point
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: retract(length, atStart=None, atBothEnds=None)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.retract`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        Retracts this curve.
        
        :param length: the retraction length
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool atStart/ats: retract at the start of the curve instead
            of the end; defaults to False
        :param atBothEnds: retract at both ends of the curve; defaults to
            False
        :return: The modified curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: setLength(targetLength, atStart=False, vector=None, linear=None, circular=None, extrapolate=None, multipleKnots=True)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.setLength`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        Uses gated retractions and extensions to force the length of this
        curve.
        
        :param targetLength: the target length
        :type targetLength: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool atStart/ats: anchor the curve at the end rather than the
            start; defaults to False
        :param vector: a vector along which to extend; this is recommended for
            spine setups where tangency should be more tightly controlled; if
            this is omitted, the *linear / circular / extrapolate* modes will
            be used instead
        :type vector: None, tuple, list, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool circular/cir: ignored if *vector* was provided; use the
            'circular' mode of the ``extendCurve`` node; defaults to False
        :param bool linear/lin: ignored if *vector* was provided;
            use the 'linear' mode of the ``extendCurve`` node; defaults to
            False
        :param bool extrapolate/ext: ignored if *vector* was provided;
            use the 'extrapolate' mode of the ``extendCurve`` node; defaults
            to True
        :param bool multipleKnots: keep multiple knots; defaults to True
        :return:
    
    .. py:method:: reverse()
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.reverse`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        :return: The reversed curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: toBezier(economy=True)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.toBezier`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        Converts this NURBS curve to a Bezier curve.
        
        :param bool economy/eco: just return ``self`` if this is already
            a Bezier curve; defaults to True
        :return: The bezier curve.
        :rtype: :class:`~paya.runtime.plugs.BezierCurve`
    
    .. py:method:: toNurbs(economy=True)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.toNurbs`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        Converts this Bezier curve to a NURBS curve.
        
        :param bool economy/eco: just return ``self`` if this is already
            a NURBS curve; defaults to True
        :return: The NURBS curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: bSpline(tolerance=0.001, keepRange=1)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.bSpline`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        :param keepRange/kr: An index or enum key for the ``.keepRange``
            mode:
        
            - 0: '0 to 1'
            - 1: 'Original' (the default)
            - 2: '0 to #spans'
        
        :type keepRange/kr: int, str, :class:`~paya.runtime.plugs.Math1D`
        :param tolerance/tol: the fit tolerance; defaults to 0.001
        :type tolerance/tol: float, :class:`~paya.runtime.plugs.Math1D`
        :return: The B-spline.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: cvRebuild(numCVs, degree=None, endKnots='Multiple end knots', keepRange='Original', keepControlPoints=False, keepEndPoints=True, keepTangents=False)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.cvRebuild`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        Rebuilds this curve to the specified number of CVs.
        
        :param int degree/d: the degree to build to; defaults to this curve's
            (current) degree if omitted
        :param endKnots/end: An enum index or label:
        
            - 0: 'Non Multiple end knots'
            - 1: 'Multiple end knots' (the default)
        :type endKnots: int, str
        :param keepRange/kr: An enum index or label:
        
            - 0: '0 to 1'
            - 1: 'Original' (the default)
            - 2: '0 to #spans'
        :type keepRange/kr: int, str
        :param bool keepEndPoints/kep: keep end points; defaults to True
        :param bool keepTangents/kt: keep tangents; defaults to False
        :return: The rebuilt curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: rebuild(rebuildType='Uniform', spans=None, degree=None, tolerance=0.01, smooth=-3, endKnots='Multiple end knots', keepRange='Original', keepControlPoints=False, keepEndPoints=True, keepTangents=False, matchCurve=None)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.rebuild`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        :param rebuildType/rt: An enum index or label:
        
            - 0: 'Uniform' (the default)
            - 1: 'Reduce Spans'
            - 2: 'Match Knots'
            - 3: 'No Mults'
            - 4: 'Curvature'
            - 5: 'End Conditions'
            - 6: 'Clean'
        :type rebuildType/rt: int, str
        :param spans/s: the number of spans to build to; defaults to this
            curve's (current) number of spans if omitted
        :type spans/s: int, :class:`~paya.runtime.plugs.Math1D`
        :param int degree/d: the degree to build to; defaults to this curve's
            (current) degree if omitted
        :param float tolerance/tol: the fit tolerance; defaults to 0.01
        :param float smooth/sm: the 'smoothing' factor; defaults to -3.0
        :param endKnots/end: An enum index or label:
        
            - 0: 'Non Multiple end knots'
            - 1: 'Multiple end knots' (the default)
        :type endKnots: int, str
        :param keepRange/kr: An enum index or label:
        
            - 0: '0 to 1'
            - 1: 'Original' (the default)
            - 2: '0 to #spans'
        :type keepRange/kr: int, str
        :param bool keepControlPoints/kcp: keep control points; defaults to
            False
        :param bool keepEndPoints/kep: keep end points; defaults to True
        :param bool keepTangents/kt: keep tangents; defaults to False
        :param matchCurve/mc: ignored if *rebuildType* is not 2 or 'Match Knots`;
            a NURBS curve attribute whose knots to match; defaults to None
        :type matchCurve/mc: None, str, :class:`~paya.runtime.plugs.NurbsCurve`
        :return: The rebuilt curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: cageRebuild()
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.cageRebuild`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        :return: A linear curve with the same CVs as this one.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: blend(otherCurve, weight=0.5)
    
        .. rubric:: Geometry Loopback
        
        This method is a wrapper for :meth:`paya.runtime.plugs.NurbsCurve.blend`.
        Attribute returns are replaced with shapes. These should be
        caught, as some operations may entirely replace the original
        shape instance.
        
        History is always preserved. Use
        :meth:`~paya.runtime.nodes.DeformableShape.deleteHistory` to clear
        where needed.
        
        .. rubric:: Original Documentation
        
        Blends this curve output towards *otherCurve* via an ``avgCurves``
        node. You may get unexpected results if the curves don't match
        in terms of spans, degree etc.
        
        :param otherCurve: the curve to blend towards
        :type otherCurve: str, :class:`~paya.runtime.plugs.NurbsCurve`
        :param weight/w: the blend weight; the other curve will take over
            fully at 1.0; defaults to 0.5
        :type weight/w: float, :class:`~paya.runtime.plugs.Math1D`
        :return: The blended curve.
        :rtype: :class:`~paya.runtime.plugs.NurbsCurve`
    
    .. py:method:: macro()
    
        :return: A simplified representation of this curve that can be used
            by :meth:`createFromMacro` to reconstruct it.
        :rtype: dict
    
    .. py:classmethod:: normalizeMacro(macro)
    
        Used by the shapes library to fit control points inside a unit cube.
        This is an in-place operation; the method has no return value.
        
        :param dict macro: the macro to edit
    
    .. py:method:: initCurveInfo(reuse=True)
    
        Initialises, or retrieves, a ``curveInfo`` node connected to this
        curve.
        
        :param bool reuse/re: look for existing nodes
        :return: The ``curveInfo`` node.
        :rtype: :class:`~paya.runtime.nodes.CurveInfo`
    
    .. py:method:: length(plug=False, tolerance=0.001)
    
        Overload of :meth:`pymel.core.nodetypes.NurbsCurve.length`.
        
        :param bool plug/p: return an attribute, not just a value;
            defaults to False
        :param float tolerance/tol: ignored for the plug implementation;
            defaults to 0.001
        :return: The length of this curve.
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: getControlPoints(plug=False, worldSpace=False)
    
        Similar to :meth:`~pymel.core.nodetypes.NurbsCurve.getCVs`, with some
        modifications.
        
        :param bool plug/p: force a dynamic output; defaults to False
        :param bool worldSpace/ws: return world-space points; defaults to
            False
        :return: One point per CV on this curve, as a value or attribute.
        :rtype: [:class:`~paya.runtime.data.Point`],
            [:class:`~paya.runtime.plugs.Vector`]
    
    .. py:method:: closestPoint_(refPoint, plug=False)
    
        :param refPoint: the reference point
        :type refPoint: list, tuple, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The closest world-space point along this curve to the given
            reference point.
        :rtype: :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: pointAtCV(cv, plug=False)
    
        :param cv: the CV to sample
        :type cv: int, :class:`~paya.runtime.comps.NurbsCurveCV`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The world-space point position of the specified CV.
    
    .. py:method:: pointAtParam(param, plug=False)
    
        :param param: the parameter at which to sample
        :type param: float, :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A world-space point at the specified parameter.
        :type: :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: pointAtLength(length, plug=False)
    
        :param length: the length at which to sample
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A world-space point at the specified length.
        :type: :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: pointAtFraction(fraction, plug=False)
    
        :param fraction: the length fraction at which to sample
        :type fraction: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A world-space point at the specified length fraction.
        :type: :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: paramAtPoint(point, asComponent=True, plug=False)
    
        Returns the parameter at the given point. This is a 'forgiving'
        implementation; a closest param will still be returned if the
        point is not on the curve.
        
        :alias: ``closestParam``
        :param point: the reference point
        :type point: list, tuple, :class:`~paya.runtime.data.Point`
            :class:`~paya.runtime.plugs.Vector`
        :param bool plug/p: force a dynamic output; defaults to False
        :param bool asComponent/ac: return an instance of
            :class:`~paya.runtime.comps.NurbsCurveParameter` rather than
            a float; defaults to True
        :return: The sampled parameter.
        :rtype: float, :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: closestFraction(point, plug=False)
    
        :param point: the reference point
        :type point: tuple, list, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The closest length fraction to the given point.
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: paramAtFraction(fraction, asComponent=True, plug=False)
    
        :param fraction: the length fraction at which to sample
        :type fraction: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :param bool asComponent/ac: return an instance of
            :class:`~paya.runtime.comps.NurbsCurveParameter` rather than
            a float; defaults to True
        :return: The parameter at the given length fraction.
        :rtype: float, :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: paramAtLength(length, asComponent=True, plug=False)
    
        :param length: the length at which to sample
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :param bool asComponent/ac: return an instance of
            :class:`~paya.runtime.comps.NurbsCurveParameter` rather than
            a float; defaults to True
        :return: The parameter at the given length.
        :rtype: float, :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: lengthAtFraction(fraction, plug=False)
    
        :param fraction: the length fraction
        :type fraction: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The curve length at the given fraction.
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: lengthAtParam(param, plug=False)
    
        :param param: the parameter
        :type param: float, :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The curve length at the given parameter.
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: lengthAtPoint(point, plug=False)
    
        Returns the curve length at the given point. This is a 'forgiving'
        implementation; a closest point will be used if *point* is not on the
        curve.
        
        :param point: the point
        :type point: list, tuple, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The curve length.
        :rtype: :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: fractionAtLength(length, plug=False)
    
        :param length: the length at which to sample a fraction
        :type length: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The length fraction at the given length.
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: fractionAtParam(param, plug=False)
    
        :param param: the parameter at which to sample a fraction
        :type param: float, :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The length fraction at the given parameter
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: fractionAtPoint(point, plug=False)
    
        :param point: the point at which to sample a fraction
        :param bool plug/p: force a dynamic output; defaults to False
        :return: The length fraction at the given point.
        :rtype: float, :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: binormalAtParam(param, plug=False)
    
        :param param: the parameter at which to sample the binormal
        :rtype param: float, str, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A vector that's perpendicular to both the curve normal
            and tangent.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: binormalAtFraction(fraction, plug=False)
    
        :param fraction: the length fraction at which to sample the binormal
        :rtype fraction: float, str, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A vector that's perpendicular to both the curve normal
            and tangent.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: binormalAtLength(fraction, plug=False)
    
        :param length: the length at which to sample the binormal
        :rtype length: float, str, :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A vector that's perpendicular to both the curve normal
            and tangent.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: binormalAtPoint(point, plug=False)
    
        :param point: the point at which to sample the binormal
        :rtype point: list, tuple, str, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool plug/p: force a dynamic output; defaults to False
        :return: A vector that's perpendicular to both the curve normal
            and tangent.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: matrixAtParamOrFraction(paramOrFraction, tangentAxis, upAxis, upVector=None, aimCurve=None, closestPoint=True, globalScale=None, squashStretch=False, fraction=False, plug=False)
    
        Base curve framing implementation. Uses ``motionPath`` and / or
        ``pointOnCurveInfo`` nodes.
        
        :param paramOrFraction: a parameter of length fraction at which
            to sample the matrix
        :type paramOrFraction:
            float, str,
            :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :param str tangentAxis: the axis to map to the curve tangent,
            e.g. '-y'
        :param str upAxis: the axis to map to the resolved up vector, e.g. 'x'
        :param upVector/upv: an explicit up vector; defaults to None
        :type upVector/upv: None, str, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param aimCurve/aic: an 'aim' curve for the up vector, similar to
            the ``curveWarp`` deformer; defaults to False
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param bool closestPoint/cp: sample points on the aim-curve by
            proximity rather than matched parameter; defaults to True
        :param globalScale/gs: ignored if not a plug; a baseline scale (will
            be normalized); defaults to None
        :type globalScale/gs: None, float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool squashStretch/ss: allow the tangent vector to squash and
            stretch; defaults to False
        :param bool fraction/fr: interpret *paramOrFraction* as a length
            fraction rather than a parameter; defaults to False
        :return: The constructed matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`,
            :class:`~paya.runtime.data.Matrix`
    
    .. py:method:: matrixAtParam(param, tangentAxis, upAxis, upVector=None, aimCurve=None, closestPoint=True, globalScale=None, squashStretch=False, plug=False)
    
        :param param: the parameter at which to sample the matrix
        :type param: float, str,
            :class:`~paya.runtime.comps.NurbsCurveParameter`,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :param str tangentAxis: the axis to map to the curve tangent,
            e.g. '-y'
        :param str upAxis: the axis to map to the resolved up vector, e.g. 'x'
        :param upVector/upv: an explicit up vector; defaults to None
        :type upVector/upv: None, str, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param aimCurve/aic: an 'aim' curve for the up vector, similar to
            the ``curveWarp`` deformer; defaults to False
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param bool closestPoint/cp: sample points on the aim-curve by
            proximity rather than matched parameter; defaults to True
        :param globalScale/gs: ignored if not a plug; a baseline scale (will
            be normalized); defaults to None
        :type globalScale/gs: None, float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool squashStretch/ss: allow the tangent vector to squash and
            stretch; defaults to False
        :return: The constructed matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`,
            :class:`~paya.runtime.data.Matrix`
    
    .. py:method:: matrixAtFraction(fraction, tangentAxis, upAxis, upVector=None, aimCurve=None, closestPoint=True, globalScale=None, squashStretch=False, plug=False)
    
        :param fraction: the fraction at which to sample the matrix
        :type fraction: float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :param str tangentAxis: the axis to map to the curve tangent,
            e.g. '-y'
        :param str upAxis: the axis to map to the resolved up vector, e.g. 'x'
        :param upVector/upv: an explicit up vector; defaults to None
        :type upVector/upv: None, str, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param aimCurve/aic: an 'aim' curve for the up vector, similar to
            the ``curveWarp`` deformer; defaults to False
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param bool closestPoint/cp: sample points on the aim-curve by
            proximity rather than matched parameter; defaults to True
        :param globalScale/gs: ignored if not a plug; a baseline scale (will
            be normalized); defaults to None
        :type globalScale/gs: None, float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool squashStretch/ss: allow the tangent vector to squash and
            stretch; defaults to False
        :return: The constructed matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`,
            :class:`~paya.runtime.data.Matrix`
    
    .. py:method:: matrixAtLength(length, tangentAxis, upAxis, upVector=None, aimCurve=None, closestPoint=True, globalScale=None, squashStretch=False, plug=False)
    
        :param length: the length at which to sample the matrix
        :type length: float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool plug/p: force a dynamic output; defaults to False
        :param str tangentAxis: the axis to map to the curve tangent,
            e.g. '-y'
        :param str upAxis: the axis to map to the resolved up vector, e.g. 'x'
        :param upVector/upv: an explicit up vector; defaults to None
        :type upVector/upv: None, str, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param aimCurve/aic: an 'aim' curve for the up vector, similar to
            the ``curveWarp`` deformer; defaults to False
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param bool closestPoint/cp: sample points on the aim-curve by
            proximity rather than matched parameter; defaults to True
        :param globalScale/gs: ignored if not a plug; a baseline scale (will
            be normalized); defaults to None
        :type globalScale/gs: None, float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool squashStretch/ss: allow the tangent vector to squash and
            stretch; defaults to False
        :return: The constructed matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`,
            :class:`~paya.runtime.data.Matrix`
    
    .. py:method:: matrixAtPoint(point, tangentAxis, upAxis, upVector=None, aimCurve=None, closestPoint=True, globalScale=None, squashStretch=False, plug=False)
    
        :param point: the point at which to sample the matrix
        :type point: float, str, tuple, list,
            :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool plug/p: force a dynamic output; defaults to False
        :param str tangentAxis: the axis to map to the curve tangent,
            e.g. '-y'
        :param str upAxis: the axis to map to the resolved up vector, e.g. 'x'
        :param upVector/upv: an explicit up vector; defaults to None
        :type upVector/upv: None, str, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param aimCurve/aic: an 'aim' curve for the up vector, similar to
            the ``curveWarp`` deformer; defaults to False
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`,
            :class:`~paya.runtime.plugs.NurbsCurve`
        :param bool closestPoint/cp: sample points on the aim-curve by
            proximity rather than matched parameter; defaults to True
        :param globalScale/gs: ignored if not a plug; a baseline scale (will
            be normalized); defaults to None
        :type globalScale/gs: None, float, str,
            :class:`~paya.runtime.plugs.Math1D`
        :param bool squashStretch/ss: allow the tangent vector to squash and
            stretch; defaults to False
        :return: The constructed matrix.
        :rtype: :class:`~paya.runtime.plugs.Matrix`,
            :class:`~paya.runtime.data.Matrix`
    
    .. py:method:: distributePoints(numberOrFractions, plug=False)
    
        :param numberOrFractions: this can either be a list of length
            fractions, or a number
        :type numberOrFractions: tuple, list or int
        :param bool plug/p: force a dynamic output; defaults to False
        :return: World-space points distributed along the length of the curve.
        :rtype: [:class:`~paya.runtime.data.Point`],
            [:class:`~paya.runtime.plug.Vector`]
    
    .. py:method:: distributeParams(numberOrFractions, plug=False, asComponent=True)
    
        :param numberOrFractions: this can either be a list of length
            fractions, or a number
        :type numberOrFractions: tuple, list or int
        :param bool asComponent/ac: if parameter values are returned, use
            :class:`~paya.runtime.comps.NurbsCurveParameter` instances instead
            of floats; defaults to True
        :param bool plug/p: force a dynamic output; defaults to False
        :return: Parameters distributed along the length of the curve.
        :rtype: [float], [:class:`~paya.runtime.comps.NurbsCurveParameter`],
            [:class:`~paya.runtime.plugs.Math1D`]
    
    .. py:method:: distributeLengths(numberOrFractions, plug=False)
    
        :param numberOrFractions: this can either be a list of length
            fractions, or a number
        :type numberOrFractions: tuple, list or int
        :param bool plug/p: force a dynamic output; defaults to False
        :return: Lengths distributed along the curve.
        :rtype: [float], [:class:`~paya.runtime.plugs.Math1D`]
    
    .. py:method:: distributeMatrices(numberOrFractions, tangentAxis, upAxis, upVector=None, aimCurve=None, squashStretch=None, closestPoint=True, globalScale=None, plug=False)
    
        :param numberOrFractions: this can either be a number of uniform
            fractions to generate, or an explicit list of fractions
        :type numberOrFractions: float, [float],
            :class:`~paya.runtime.plugs.Math1D`,
            [:class:`~paya.runtime.plugs.Math1D`]
        :param str tangentAxis: the matrix axis to map to the curve tangent,
            for example '-y'
        :param str upAxis: the matrix axis to align to the resolved up vector, for
            example 'x'
        :param upVector/upv: if provided, should be either a single up vector or a
            a list of up vectors (one per fraction); defaults to None
        :type upVector/upv:
            None,
            list, tuple, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`,
            [list, tuple, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`]
        :param aimCurve/aic: an 'up' curve, as seen for example on Maya's
            ``curveWarp``; defaults to None
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.plugs.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`
        :param bool closestPoint/cp: pull points from the aim curve by
            proximity rather than matched parameter; defaults to True
        :param bool squashStretch/ss: allow squash and stretch on the tangent
            vectors; defaults to False
        :param globalScale/gs: ignored if not a plug; a baseline scaling
            factor (will be normalized); defaults to None
        :param bool plug/p: force a dynamic output; defaults to False
        :return: Matrices, distributed uniformly (by length) along this curve.
        :rtype: [:class:`~paya.runtime.plugs.Matrix`],
            [:class:`~paya.runtime.data.Matrix`]
    
    .. py:method:: distributeAimingMatrices(numberOrFractions, aimAxis, upAxis, upVector=None, aimCurve=None, squashStretch=None, closestPoint=True, globalScale=None, plug=False)
    
        Similar to :meth:`distributeMatrices`, but here the matrices aim at
        each other for a 'chained' effect.
        
        :param numberOrFractions: this can either be a number of uniform
            fractions to generate, or an explicit list of fractions
        :type numberOrFractions: float, [float],
            :class:`~paya.runtime.plugs.Math1D`,
            [:class:`~paya.runtime.plugs.Math1D`]
        :param str aimAxis: the matrix axis to map to the aim vectors,
            for example '-y'
        :param str upAxis: the matrix axis to align to the resolved up vector, for
            example 'x'
        :param upVector/upv: if provided, should be either a single up vector or a
            a list of up vectors (one per fraction); defaults to None
        :type upVector/upv:
            None,
            list, tuple, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`,
            [list, tuple, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`]
        :param aimCurve/aic: an 'up' curve, as seen for example on Maya's
            ``curveWarp``; defaults to None
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.plugs.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`
        :param bool closestPoint/cp: pull points from the aim curve by
            proximity rather than matched parameter; defaults to True
        :param bool squashStretch/ss: allow squash and stretch on the aim
            vectors; defaults to False
        :param bool plug/p: force a dynamic output; defaults to False
        :param globalScale/gs: ignored if not a plug; a baseline scaling
            factor (will be normalized); defaults to None
        :return: Matrices, distributed uniformly (by length) along this curve.
        :rtype: [:class:`~paya.runtime.plugs.Matrix`],
            [:class:`~paya.runtime.data.Matrix`]
    
    .. py:method:: distributeJoints(numberOrFractions, tangentAxis, upAxis, upVector=None, aimCurve=None, squashStretch=None, closestPoint=True, globalScale=None, under=None, plug=False)
    
        :param numberOrFractions: this can either be a number of uniform
            fractions to generate, or an explicit list of fractions
        :type numberOrFractions: float, [float],
            :class:`~paya.runtime.plugs.Math1D`,
            [:class:`~paya.runtime.plugs.Math1D`]
        :param str tangentAxis: the matrix axis to map to the curve tangent,
            for example '-y'
        :param str upAxis: the matrix axis to align to the resolved up vector, for
            example 'x'
        :param upVector/upv: if provided, should be either a single up vector or a
            a list of up vectors (one per fraction); defaults to None
        :type upVector/upv:
            None,
            list, tuple, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`,
            [list, tuple, :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`]
        :param aimCurve/aic: an 'up' curve, as seen for example on Maya's
            ``curveWarp``; defaults to None
        :type aimCurve/aic: None, str, :class:`~paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.plugs.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`
        :param bool closestPoint/cp: pull points from the aim curve by
            proximity rather than matched parameter; defaults to True
        :param bool squashStretch/ss: allow squash and stretch on the tangent
            vectors; defaults to False
        :param globalScale/gs: ignored if not a plug; a baseline scaling
            factor (will be normalized); defaults to None
        :param bool plug/p: force a dynamic output; defaults to False
        :param under/u: an optional destination parent for the joints;
            defaults to None
        :type under/u: str, :class:`~paya.runtime.nodes.Transform`
        :return: Joints, distributed uniformly (by length) along this curve.
        :rtype: [:class:`~paya.runtime.nodes.Joint`]
    
    .. py:method:: getCollocatedCVGroups(tolerance=1e-06)
    
        :param float tolerance/tol: the collocation tolerance;
            defaults to 1e-7
        :return: A list of lists, where each sub-list comprises CVs which
            are collocated.
        :rtype: [[:class:`~paya.runtime.comps.NurbsCurveCV`]]
    
    .. py:method:: clusterAll(merge=False, tolerance=1e-06)
    
        Clusters-up the CVs on this curve.
        
        :param bool merge/mer: merge CVs if they overlap within the specified
            *tolerance*; defaults to False
        :param float tolerance/tol: the merging tolerance; defaults to 1e-6
        :return: The clusters.
        :rtype: [:class:`~paya.runtime.nodes.Cluster`]