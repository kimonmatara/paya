****************************
paya.runtime.nodes.Transform
****************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: Transform(*args, **kwargs)

    .. py:classmethod:: create(dagPath=None, name=None, under=None, displayLocalAxis=False, rotateOrder='xyz', worldMatrix=None)
    
        Creates transform nodes.
        
        :param dagPath/dp: an explicit DAG path; if provided, the minimum
            number of nodes required to match this DAG path will be
            generated; ``displayLocalAxis``, ``rotateOrder`` and
            ``worldMatrix`` will only be applied to the last (innermost)
            group; defaults to None
        :type dagPath/dp: None, str
        :param name/n: one or more name elements; ignored if ``dagPath`` is
            provided; defaults to None
        :type name/n: int, str, list, tuple or None
        :param under/u: an optional parent for the transform; if this is
            combined with ``dagPath``, then this node's DAG path will be
            prepended; defaults to None
        :type under/u: None, str, :class:`~paya.runtime.nodes.Transform`
        :param bool displayLocalAxis/dla: display the transform's local axes;
            defaults to False
        :param rotateOrder/ro: the transform's rotate order; defaults to 'xyz'
        :type rotateOrder/ro: int, str or None
        :param worldMatrix/wm: an optional world matrix for the transform,
            applied to the SRT channels; defaults to None
        :type worldMatrix/wm: None, list, tuple or
            :class:`~paya.runtime.data.Matrix`
        :return: The transform.
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:classmethod:: createControl(name=None, under=None, shape='cube', size=1.0, color=None, worldMatrix=None, keyable=None, channelBox=None, rotateOrder='xyz', asControl=True, offsetGroups='offset', pickWalkParent=None, lineWidth=None)
    
        Creates rig controls. Also available directly on :mod:`paya.runtime`.
        
        :param name/n: one or more name elements
        :type name/n: None, str, int, list
        :param under/u: an optional parent for the control; defaults to None
        :type under/u: None, str, :class:`~paya.runtime.nodes.Transform`
        :param str shape/sh: the name of a library shape to apply to the control;
            defaults to 'cube'
        :param color/col: an optional override color index for the control;
            defaults to None
        :type color/col: int, None
        :param float size: a uniform scaling factor for the control shape;
            defaults to 1.0
        :param worldMatrix/wm: the world matrix for the control; if this is
            omitted then, if ``under`` is provided, the matrix is copied from the
            destination parent; otherwise, it defaults to the identity matrix
        :type worldMatrix/wm: list, :class:`~paya.runtime.data.Matrix`, None
        :param list keyable/k: a list of channels to set to keyable on the
            control
        :param list channelBox/cb: a list of channels to set to settable on the
            control
        :param rotateOrder/ro: the control's rotate order; defaults to 'xyz'
        :type rotateOrder/ro: str, int
        :param bool asControl/ac: if this is ``False``, create the control as a
            group with no shapes and omit the controller tag; defaults to True
        :param offsetGroups: the suffixes of one or more offset groups to create;
            defaults to 'offset'
        :type offsetGroups: list, str
        :param pickWalkParent/pwp: an optional pick-walk parent for this control;
            ignored if *asControl* is False; defaults to None
        :type pickWalkParent/pwp: str,
            :class:`~paya.runtime.nodes.DependNode`
        :param float lineWidth/lw: an override for the control shapes' line
            width; defaults to None
        :return: The generated control.
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: duplicate(name=None, managedNames=False)
    
        Overloads the base PyMEL method for added naming options.
        
        :param name/n: one or more name elements; defaults to None
        :type name/n: None, str, int, tuple, list
        :param bool managedNames/mn: inherit name elements from
            :class:`~paya.lib.names.Name` blocks and apply type suffixes;
            defaults to False
        :return: The duplicated objects.
        :rtype: [:class:`~paya.runtime.nodes.Transform`]
    
    .. py:method:: toShape()
    
        :return: If this node is a transform, its first shape child;
            otherwise, the node itself.
        :rtype: :class:`~paya.runtime.nodes.Shape` or
            :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: toTransform()
    
        :return: If this node is a shape, its parent; otherwise, the node
            itself.
        :rtype: :class:`~paya.runtime.nodes.Shape` or
            :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: releaseSRT()
    
        Unlocks and disconnects every SRT channel, recursively.
        
        :return: ``self``
    
    .. py:method:: closestOf(elems)
    
        Returns the closest amongst 'elems' to this transform.
        
        :param elems: a list of Python objects that, when instantiated into
            PyNodes, implement ``getWorldPosition()``
        :return: The closest amongst 'elems'.
    
    .. py:method:: getWorldPosition(plug=False, useLocatorShape=True)
    
        Returns the world translation of this transform. Pivots are ignored.
        
        :shorthand: ``gwp``
        :param bool plug/p: return an attribute instead of a value; if
            'useLocatorShape' is True then, where available, the locator
            shape's 'worldPosition' attribute will be returned; otherwise,
            a 'worldPosition' attribute will be retrieved, or initialised,
            on the transform itself, with its input configured as self.t ^
            self.pm[0]; defaults to False
        :param bool useLocatorShape/uls: True
        :return: The position attribute or value.
        :rtype: :class:`~paya.runtime.data.Point` or
            :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: getWorldMatrix(plug=False)
    
        :param bool plug/p: return a plug instead of a value; defaults to
            False
        :return: The world matrix of this transform, as a value or plug.
        :rtype: :class:`paya.runtime.data.Matrix` or
            :class:`paya.runtime.plugs.Matrix`
    
    .. py:method:: getRotateAxisMatrix(plug=False)
    
        Returns the rotate axis as a rotation matrix.
        
        :param bool plug/p: return an attribute instead of a value; this will
            be cooked only once, and afterwards retrieved via a
            'rotateAxisMatrix' attribute on the node; defaults to False
        :return: The rotate axis matrix.
        :rtype: :class:`paya.runtime.data.Matrix` or
            :class:`paya.runtime.plugs.Matrix`
    
    .. py:method:: makeIdentity(**kwargs)
    
        Convenience wrapper for :func:`pymel.internal.pmcmds.makeIdentity`.
        
        :param \*\*kwargs: passed along to
            :func:`pymel.internal.pmcmds.makeIdentity`.
        :return: ``self``
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: createOffsetGroups(*suffixes)
    
        :param \*suffixes: one or more offset group suffixes; defaults to
            'offset'
        :type \*suffixes: list, tuple, str
        :return: One or more transformationally-matched offset groups for this
            transform, in order of innermost to outermost.
        :type: list of :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: conformShapeNames(includeIntermediateShapes=False, shapeList=None)
    
        Conforms the names of this transform's shape children to the Maya
        convention.
        
        :param bool includeIntermediateShapes/iis: process intermediate shapes
            as well
        :param shapeList/shl: if this is provided, it will be used instead of
            scanning for the transform's children; defaults to None
        :type shapeList/shl: None, [str, :class:`~paya.runtime.nodes.Shape`]
        :return: ``self``
        :rtype: :class:`Transform`
    
    .. py:method:: getHeroShapes()
    
        :return: All non-intermediate shapes under this transform.
        :rtype: [:class:`~paya.runtime.nodes.Shape`]
    
    .. py:method:: getIntermediateShapes()
    
        :return: All intermediate shapes under this transform.
        :rtype: [:class:`~paya.runtime.nodes.Shape`]
    
    .. py:method:: getCtShapes()
    
        :return: Non-intermediate curve and locator shapes under this transform.
        :rtype: [:class:`~paya.runtime.nodes.NurbsCurve` or
            :class:`~paya.runtime.nodes.Locator`]
    
    .. py:method:: rotateCtShapes(rotation)
    
        Rotates control shapes in local space. Locator shapes won't be rotated,
        but their ``localPosition`` will. Note that rotation is expected in
        degrees.
        
        :param rotation: an iterable of three rotation values, in degrees
        :type rotation: list, tuple, :class:`~pymel.core.datatypes.Array`
        :return: ``self``
    
    .. py:method:: scaleCtShapes(scale)
    
        Scales control shapes in local space.
        
        :param scale: an iterable of three scale values
        :type scale: list, tuple, :class:`~pymel.core.datatypes.Array`
        :return: ``self``
    
    .. py:method:: setCtShapesFromLib(libKey, lineWidth=None)
    
        Sets control shapes to the named library entry.
        
        :param str name: the name of the library entry, e.g. 'cube'
        :param float lineWidth/lw: an override for the line width;
            defaults to None
        :return: The newly-generated control shapes.
        :rtype: list of :class:`~paya.runtime.nodes.Shape`
    
    .. py:method:: cycleCtShapes(backward=False)
    
        Steps through the library alphabetically and applies a different shape
        on each invocation. Useful for trying out different shapes quickly.
        
        :param bool backward/back: cycle backwards instead of forwards;
            defaults to False
        :return: The newly-generated control shapes.
        :rtype: list of :class:`~paya.runtime.nodes.Shape`
    
    .. py:method:: clearCtShapes()
    
        Removes all non-intermediate curve or locator shapes under this
        transform.
        
        :return: ``self``
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: colorCtShapes(*colorIndex, clearOverrides=True)
    
        :param \*colorIndex: if a color index is provided, it is used to set
            the override color on all control shapes; if ``None`` is passed,
            override colors are reset; if the argument is omitted, the first-
            encountered override color index is returned
        :type \*colorIndex: int or None
        :param bool clearOverrides/co: used only if *colorIndex* was set to
            ``None``; set ``overrideEnabled`` to False as well; defaults to
            True
        :return: If *colorIndex* was provided, ``self`` is returned;
            otherwise, a color index.
        :rtype: :class:`~paya.runtime.nodes.Transform` or int
    
    .. py:method:: copyCtShapesTo(*destControls, replace=True, worldSpace=False, mirrorAxis=None, color=None, lineWidth=None, shape=None)
    
        Copies control shapes and / or color from this control to one or more
        destination controls. The 'shape' and 'color' flags can be defined by
        omission, Maya-style; for example, to copy only color, just pass
        ``col=True``, and 'shape' will be set to ``False`` automatically
        unless explicitly set.
        
        :param bool shape/sh: copy shapes; if this is ``False``, all other
            arguments except ``color`` are ignored
        :param bool color/col: copy color
        :param bool lineWidth/lw: copy line width
        :param \*destControls: one or more controls to copy shapes to
        :type \*destControls: list, str,
            :class:`~paya.runtime.nodes.Transform`
        :param bool replace/rep: remove existing shapes on the destination
            controls; defaults to True
        :param bool worldSpace/ws: copy shapes in world space; defaults to
            False
        :param mirrorAxis/ma: a positive axis to flip when copying in local
            space, or along which to mirror when copying in world space, for
            example 'x';  defaults to ``None``
        :type mirrorAxis/ma: ``None``, str
        :return: The new control shapes.
        :rtype: list of :class:`~paya.runtime.nodes.Shape`
    
    .. py:method:: addCtShapesToLib(entryName)
    
        Captures this control's shapes into a new library entry for reuse via
        :meth:`setCtShapes`.
        
        :param str entryName: the name of the new library entry
        :return: ``self``
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: getCtShapesLineWidth()
    
        :return: The first encountered line width which is above 0.0
            (i.e. not the Maya default of -1.0), or None
        :rtype: float, None
    
    .. py:method:: setCtShapesLineWidth(lineWidth)
    
        Sets the line width on NURBS control shapes.
        
        :param lineWidth: the line width to set; if None is passed,
            the line width will be set to -1.0
        type lineWidth: float, None
        :return: ``self``
        :rtype: :class:`Transform`