****************************
paya.runtime.nodes.Transform
****************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: Transform(*args, **kwargs)

    .. rubric:: Inheritance

    :class:`~pymel.core.nodetypes.Transform` :class:`~paya.runtime.nodes.DagNode` :class:`~pymel.core.nodetypes.DagNode` :class:`~paya.runtime.nodes.Entity` :class:`~pymel.core.nodetypes.Entity` :class:`~paya.runtime.nodes.ContainerBase` :class:`~pymel.core.nodetypes.ContainerBase` :class:`~paya.runtime.nodes.DependNode` :class:`~pymel.core.nodetypes.DependNode` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`



    .. py:classmethod:: create(dagPath=None, name=None, parent=None, displayLocalAxis=False, rotateOrder='xyz', worldMatrix=None)
    
        Creates transform nodes.
        
        :param dagPath/dp: an explicit DAG path; if provided, the minimum
            number of nodes required to match this DAG path will be
            generated; ``displayLocalAxis``, ``rotateOrder`` and
            ``worldMatrix`` will only be applied to the last (innermost)
            group; defaults to None
        :type dagPath/dp: None, str
        :param str name/n: the node name; defaults to ``None``
        :param parent/p: an optional parent for the transform; if this is
            combined with ``dagPath``, then this node's DAG path will be
            prepended; defaults to None
        :type parent/p: None, str, :class:`~paya.runtime.nodes.Transform`
        :param bool displayLocalAxis/dla: display the transform's local axes;
            defaults to False
        :param rotateOrder/ro: the transform's rotate order; defaults to 'xyz'
        :type rotateOrder/ro: int, str or None
        :param worldMatrix/wm: an optional world matrix for the transform,
            applied to the SRT channels; defaults to None
        :type worldMatrix/wm: None, list, tuple or
            :class:`~paya.runtime.data.Matrix`
        :return: The transform.
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: toShape()
    
        :return: If this node is a transform, its first shape child;
            otherwise, the node itself.
        :rtype: :class:`~paya.runtime.nodes.Shape` or
            :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: toTransform()
    
        :return: If this node is a shape, its parent; otherwise, the node
            itself.
        :rtype: :class:`~paya.runtime.nodes.Shape` or
            :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: releaseSRT()
    
        Unlocks and disconnects every SRT channel, recursively.
        
        :return: ``self``
    
    .. py:method:: closestAxisToVector(refVector, includeNegative=True)
    
        :param refVector: the vector to compare against
        :param bool includeNegative/ing: Consider negative axes;
            defaults to ``True``
        :return: The most closely-aligned axis on this object to
            ``refVector``, e.g. ``'-x'``.
        :rtype: :class:`str`
    
    .. py:method:: closestOf(elems)
    
        Returns the closest amongst 'elems' to this transform.
        
        :param elems: a list of Python objects that, when instantiated into
            PyNodes, implement ``getWorldPosition()``
        :return: The closest amongst 'elems'.
    
    .. py:method:: getWorldPosition(plug=False, useLocatorShape=True)
    
        Returns the world translation of this transform. Pivots are ignored.
        
        :shorthand: ``gwp``
        :param bool plug/p: return an attribute instead of a value; if
            'useLocatorShape' is True then, where available, the locator
            shape's 'worldPosition' attribute will be returned; otherwise,
            a 'worldPosition' attribute will be retrieved, or initialised,
            on the transform itself, with its input configured as self.t ^
            self.pm[0]; defaults to False
        :param bool useLocatorShape/uls: True
        :return: The position attribute or value.
        :rtype: :class:`~paya.runtime.data.Point` or
            :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: getWorldMatrix(plug=False)
    
        :param bool plug/p: return a plug instead of a value; defaults to
            False
        :return: The world matrix of this transform, as a value or plug.
        :rtype: :class:`paya.runtime.data.Matrix` or
            :class:`paya.runtime.plugs.Matrix`
    
    .. py:method:: getRotateAxisMatrix(plug=False)
    
        Returns the rotate axis as a rotation matrix.
        
        :param bool plug/p: return an attribute instead of a value; this will
            be cooked only once, and afterwards retrieved via a
            'rotateAxisMatrix' attribute on the node; defaults to False
        :return: The rotate axis matrix.
        :rtype: :class:`paya.runtime.data.Matrix` or
            :class:`paya.runtime.plugs.Matrix`
    
    .. py:method:: makeIdentity(**kwargs)
    
        Convenience wrapper for :func:`pymel.internal.pmcmds.makeIdentity`.
        
        :param \*\*kwargs: passed along to
            :func:`pymel.internal.pmcmds.makeIdentity`.
        :return: ``self``
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: createOffsetGroups(*descriptors)
    
        Creates transformationally-matched offset ('zero') groups.
        
        :param \*descriptors: base names for the offset groups, from
            innermost to outermost; if omitted, defaults to ``'offset'``
        :type \*descriptors: :class:`str`, [:class:`str`]
        :return: The offset groups, from innermost to outermost.
        :rtype: [:class:`Transform`]
    
    .. py:method:: conformShapeNames(includeIntermediateShapes=False, shapeList=None)
    
        Conforms the names of this transform's shape children to the Maya
        convention.
        
        :param bool includeIntermediateShapes/iis: process intermediate shapes
            as well
        :param shapeList/shl: if this is provided, it will be used instead of
            scanning for the transform's children; defaults to None
        :type shapeList/shl: None, [str, :class:`~paya.runtime.nodes.Shape`]
        :return: ``self``
        :rtype: :class:`Transform`
    
    .. py:method:: getHeroShapes()
    
        :return: All non-intermediate shapes under this transform.
        :rtype: [:class:`~paya.runtime.nodes.Shape`]
    
    .. py:method:: getIntermediateShapes()
    
        :return: All intermediate shapes under this transform.
        :rtype: [:class:`~paya.runtime.nodes.Shape`]
    
    .. py:method:: getCtShapes()
    
        :return: Non-intermediate curve and locator shapes under this transform.
        :rtype: [:class:`~paya.runtime.nodes.NurbsCurve` or
            :class:`~paya.runtime.nodes.Locator`]
    
    .. py:method:: rotateCtShapes(rotation)
    
        Rotates control shapes in local space. Locator shapes won't be rotated,
        but their ``localPosition`` will. Note that rotation is expected in
        degrees.
        
        :param rotation: an iterable of three rotation values, in degrees
        :type rotation: list, tuple, :class:`~pymel.core.datatypes.Array`
        :return: ``self``
    
    .. py:method:: scaleCtShapes(scale)
    
        Scales control shapes in local space.
        
        :param scale: an iterable of three scale values
        :type scale: list, tuple, :class:`~pymel.core.datatypes.Array`
        :return: ``self``
    
    .. py:method:: setCtShapesFromLib(libKey, lineWidth=None, size=1.0)
    
        Sets control shapes to the named library entry.
        
        :param str name: the name of the library entry, e.g. 'cube'
        :param float lineWidth/lw: an override for the line width;
            defaults to None
        :param float size/siz: the shape scale; defaults to 1.0
        :return: The newly-generated control shapes.
        :rtype: list of :class:`~paya.runtime.nodes.Shape`
    
    .. py:method:: cycleCtShapes(backward=False)
    
        Steps through the library alphabetically and applies a different shape
        on each invocation. Useful for trying out different shapes quickly.
        
        :param bool backward/back: cycle backwards instead of forwards;
            defaults to False
        :return: The newly-generated control shapes.
        :rtype: list of :class:`~paya.runtime.nodes.Shape`
    
    .. py:method:: clearCtShapes()
    
        Removes all non-intermediate curve or locator shapes under this
        transform.
        
        :return: ``self``
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: colorCtShapes(*colorIndex, clearOverrides=True)
    
        :Color shorthands:
        
            ::
        
                    'white': 16,
                    'blue': 6,
                    'left': 6,
                    'right': 13,
                    'red': 13,
                    'center': 14,
                    'green': 14,
                    'yellow': 17,
                    'pink': 20
        
        :param \*colorIndex: if a color index is provided, it is used to set
            the override color on all control shapes; if ``None`` is passed,
            override colors are reset; if the argument is omitted, the first-
            encountered override color index is returned
        :type \*colorIndex: int or None
        :param bool clearOverrides/co: used only if *colorIndex* was set to
            ``None``; set ``overrideEnabled`` to False as well; defaults to
            True
        :return: If *colorIndex* was provided, ``self`` is returned;
            otherwise, a color index.
        :rtype: :class:`~paya.runtime.nodes.Transform` or int
    
    .. py:method:: addCtShapesToLib(entryName, normalize=True)
    
        Captures this control's shapes into a new library entry for reuse via
        :meth:`setCtShapes`.
        
        :param str entryName: the name of the new library entry
        :param bool normalize/nr: normalize points into a unit; defaults
            to ``True``
        :return: ``self``
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: getCtShapesLineWidth()
    
        :return: The first encountered line width which is above 0.0
            (i.e. not the Maya default of -1.0), or None
        :rtype: float, None
    
    .. py:method:: setCtShapesLineWidth(lineWidth)
    
        Sets the line width on NURBS control shapes.
        
        :param lineWidth: the line width to set; if None is passed,
            the line width will be set to -1.0
        :type lineWidth: float, None
        :return: ``self``
        :rtype: :class:`Transform`
    
    .. py:method:: createAnimSpace(labels, targets, slave=None, translate=None, rotate=None, scale=None, defaultValue=0)
    
        :param slave/slv: the transform to constrain; if omitted, defaults to
            the first available offset group
        :type slave/slv: :class:`str`, :class:`~paya.runtime.nodes.Transform`
        :param targets: the target transforms or matrices
        :type targets: :class:`str`, :class:`~paya.runtime.plugs.Matrix`,
            :class:`~paya.runtime.nodes.Transform`
        :param labels: labels for the enum attribute
        :type labels: :class:`list` [:class:`str`]
        :param bool translate/t: drive translate channels; defaults to
            ``True``
        :param bool rotate/r: drive rotate channels; defaults to ``True``
        :param bool scale/s: drive scale channels; defaults to ``True``
        :param defaultValue/dv: the default value for the enum attribute;
            defaults to ``0``
        :type defaultValue/dv: :class:`int`, :class:`str`
        :return: The system's network node.
        :rtype: :class:`~paya.runtime.networks.AnimSpaceSwitcher`