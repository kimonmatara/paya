**************************
paya.runtime.nodes.DagNode
**************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: DagNode(*args, **kwargs)



    .. rubric:: Inheritance

    :class:`~pymel.core.nodetypes.DagNode` :class:`~paya.runtime.nodes.Entity` :class:`~pymel.core.nodetypes.Entity` :class:`~paya.runtime.nodes.ContainerBase` :class:`~pymel.core.nodetypes.ContainerBase` :class:`~paya.runtime.nodes.DependNode` :class:`~pymel.core.nodetypes.DependNode` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`

    .. py:method:: getWorldPosition(plug=False)
    
        Returns the world translation of this DAG node.
        
        :shorthand: ``gwp``
        :param bool plug/p: return an attribute instead of a value; defaults
            to False
        :return: The position attribute or value.
        :rtype: :class:`~paya.runtime.data.Point` or
           :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: basename(stripNamespace=False, stripTypeSuffix=False, stripDagPath=True)
    
        Returns shorter versions of this node's name.
        
        :param bool stripNamespace/sns: remove namespace information; defaults to
            False
        :param bool stripDagPath/sdp: remove DAG path information; defaults to
            True
        :param bool stripTypeSuffix/sts: removes anything that looks like a type
            suffix; defaults to False
        :return: the modified name
        :rtype: str
    
    .. py:method:: isControl(*state)
    
        :param bool \*state: if ``True``, make this node a controller; if
            ``False``, remove any controller tags; if omitted, return whether
            this node is a controller
        :return: bool or None
    
    .. py:method:: setPickWalkParent(parent)
    
        Sets the pick walk parent for this node. If there's no controller tag,
        one will be added automatically.
        
        :param parent: the node to set as the pick walk parent; pass None
            to unparent this node (any existing controller tag will be
            preserved)
        :type parent: str, :class:`~pymel.core.general.PyNode`, None
        :return: ``self``
        :rtype: :class:`~paya.runtime.nodes.DagNode`
    
    .. py:method:: getPickWalkParent()
    
        :return: The pick walk parent for this node, if any.
        :rtype: None, :class:`~paya.runtime.nodes.DependNode`