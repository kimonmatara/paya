************************
paya.runtime.nodes.Joint
************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: Joint(*args, **kwargs)



    .. rubric:: Inheritance

    :class:`~pymel.core.nodetypes.Joint` :class:`~paya.runtime.nodes.Transform` :class:`~pymel.core.nodetypes.Transform` :class:`~paya.runtime.nodes.DagNode` :class:`~pymel.core.nodetypes.DagNode` :class:`~paya.runtime.nodes.Entity` :class:`~pymel.core.nodetypes.Entity` :class:`~paya.runtime.nodes.ContainerBase` :class:`~pymel.core.nodetypes.ContainerBase` :class:`~paya.runtime.nodes.DependNode` :class:`~pymel.core.nodetypes.DependNode` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`

    .. py:classmethod:: create(displayLocalAxis=True, worldMatrix=None, parent=None, name=None, freeze=True, decompose=True, rotateOrder='xyz', radius=1.0)
    
        :param bool displayLocalAxis/dla: display the local matrix
            axes; defaults to ``True``
        :param worldMatrix/wm: defines the joint's default pose; defaults
            to ``None``
        :type worldMatrix/wm: None, tuple, list, str,
            :class:`~paya.runtime.data.Matrix`,
            :class:`~paya.runtime.plugs.Matrix`
        :param parent/p: an optional destination parent for the joint
        :type parent/p: None, str, :class:`~paya.runtime.nodes.Transform`
        :param str name/n: a name for the joint; defaults to ``None``
        :param bool freeze/fr: zero-out transformations (except translate)
            at the initial pose; defaults to ``True``
        :param bool decompose/dec: if ``False``, connect to
            ``offsetParentMatrix`` instead of driving the joint's SRT
            channels; note that, if *freeze* is requested, the initial matrix
             will *always* be applied via decomposition and then frozen;
             defaults to ``True``
        :param rotateOrder/ro: the rotate order for the joint; defaults
            to ``'xyz'``
        :type rotateOrder/ro: ``None``, :class:`str`, :class:`int`,
            :class:`~paya.runtime.plugs.Math1D`
        :param float radius/rad: the joint display radius; defaults to 1.0
        :return: The joint.
        :rtype: :class:`~paya.runtime.nodes.Joint`
    
    .. py:method:: insertCube(size=1.0, name=None)
    
        Inserts a poly cube under (including transform) under the joint
        to help test transformations visually.
        
        :param str name/n: a name for the cube; defaults to ``None``
        :param float size/siz: a single scalar for the cube's width, height
            and depth; defaults to 1.0
        :return: The cube transform.
        :rtype: :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: skinClusters()
    
        :return: Associated skinClusters, in no particular order.
        :rtype: list
    
    .. py:method:: ikHandles(includeAsTip=True)
    
        :param bool includeAsTip/iat: Include IK systems for which this joint
            is the tip; defaults to True
        :return: Associated IK handles, in no particular order.
        :rtype: :class:`list` of :class:`~paya.runtime.nodes.IkHandle`
    
    .. py:method:: chainFromHere(to=None)
    
        :param to: an optional terminator joint; defaults to None
        :type to: str or :class:`~paya.runtime.nodes.Joint`
        :return: A chain from this joint up to and including 'to'
            (if provided), or terminating before the first branch.
        :rtype: :class:`~paya.lib.skel.Chain`
    
    .. py:method:: setMatrix(matrix, worldSpace=False)
    
        Overloads :meth:`pymel.core.nodetypes.Transform.setMatrix` to include
        shear, which is observed on joints in Maya >= 2022.
        
        :param matrix: the matrix to apply
        :type matrix: list, tuple, :class:`~paya.runtime.data.Matrix`
        :param bool worldSpace: apply in world space
    
    .. py:method:: getJointOrientMatrix(plug=False)
    
        Returns joint orientation as a rotation matrix.
        
        :param bool plug/p: return an attribute instead of a value; this will
            be cooked only once, and afterwards retrieved via a
            'jointOrientMatrix' attribute on the node; defaults to False
        :return: The joint orient matrix.
        :rtype: :class:`paya.runtime.data.Matrix` or
            :class:`paya.runtime.plugs.Matrix`