******************************
paya.runtime.nodes.SkinCluster
******************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: SkinCluster(*args, **kwargs)



    .. rubric:: Inheritance

    :class:`~pymel.core.nodetypes.SkinCluster` :class:`~paya.runtime.nodes.GeometryFilter` :class:`~pymel.core.nodetypes.GeometryFilter` :class:`~paya.runtime.nodes.DependNode` :class:`~pymel.core.nodetypes.DependNode` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`

    .. py:classmethod:: create(*args, bindMethod=0, dropoffRate=4.5, maximumInfluences=None, name=None, normalizeWeights=1, obeyMaximumInfluences=False, skinMethod=0, toSelectedBones=True, weightDistribution=0, geometry=None, influence=None, multi=False, replace=False, **kwargs)
    
        Lightweight convenience wrapper / constructor for skinClusters, with the
        following differences from the standard
        :func:`~pymel.core.animation.skinCluster` command:
        
        -   Positional arguments can be omitted, and the 'geometry' and
            'influence' keyword arguments used instead on creation
        -   A select subset of flags are pre-loaded with common defaults (see
            below)
        -   Added 'multi' option
        -   Added 'replace' option
        
        :param \*args: forwarded to :func:`~pymel.core.animation.skinCluster`
        :param int bindMethod/bm: see Maya help; defaults to 0 (closest)
        :param float dropoffRate/dr: see Maya help; defaults to 4.5
        :param maximumInfluences/mi: see Maya help; defaults to None
        :type maximumInfluences/mi: None, int
        :param str name/n: a name for the skinCluster node; defaults to
            ``None``
        :param int normalizeWeights/nw: see Maya help; defaults to 1
            (interactive)
        :param bool obeyMaximumInfluences/omi: see Maya help; defaults to
            False
        :param int skinMethod/sm: see Maya help; defaults to 0 (linear)
        :param bool toSelectedBones/tsb: see Maya help; defaults to True
        :param int weightDistribution/wd: see Maya help; defaults to 0
            (distance)
        :param geometry/g: the geometry to bind to; defaults to None
        :type geometry/g: list, tuple,
            :class:`~paya.runtime.nodes.DeformableShape`,
            :class:`~paya.runtime.nodes.Transform`
        :param influence/inf: one or more influences; defaults to None
        :type influence/inf: list, tuple,
            :class:`~paya.runtime.nodes.Transform`
        :param bool multi: set this to True to create multiple skinClusters
            across all passed geometries; defaults to False
        :param bool replace/rep: remove any existing skinClusters from the passed
            geometries; defaults to False
        :param \*\*kwargs: forwarded to
            :func:`~pymel.core.animation.skinCluster`
        :return: :class:`SkinCluster` or [:class:`SkinCluster`]
    
    .. py:method:: macro()
    
        :return: A simplified representation of this deformer that can
            be used by :meth:`createFromMacro` to recreate it.
        :rtype: dict
    
    .. py:classmethod:: createFromMacro(macro, **overrides)
    
        Recreates this skinCluster using the type of macro returned by
        :meth:`macro`.
        
        :param dict macro: the type of macro returned by :meth:`macro`.
        :param \*\*overrides: overrides to the macro, passed-in as keyword
            arguments
        :return: The reconstructed skinCluster.
        :rtype: :class:`SkinCluster`
    
    .. py:method:: copyTo(geo, name=None, replace=True, weights=True, method='index', sourceUVSet=None, destUVSet=None)
    
        Copies this skinCluster to the specified geometry.
        
        :param geo: the geometry to copy to
        :type geo: str, :class:`~paya.runtime.nodes.DagNode`
        :param str name/n: a name for the new skinCluster; defaults to
            ``None``
        :param bool replace/rep: if the destination geometry already has a
            skinCluster, remove it; defaults to True
        :param bool weights/w: copy weights too; defaults to True
        :param str method/m: the weight-copying method; one of:
        
            - ``index`` (via XML)
            - ``bilinear`` (via XML)
            - ``barycentric`` (via XML)
            - ``nearest`` (via XML)
            - ``over`` (via XML)
        
            - ``closestPoint`` (in-scene)
            - ``closestComponent`` (in-scene)
            - ``uv`` (in-scene)
            - ``rayCast`` (in-scene)
        
        :param sourceUVSet/suv: if specified, 'method' will be overriden to
            'uv'; if omitted, and 'method' is 'uv', the current UV set will
            be used; defaults to None
        :type sourceUVSet/suv: str, None
        :param destUVSet/duv: if specified, 'method' will be overriden to
            'uv'; if omitted, and 'method' is 'uv', the current UV set will
            be used; defaults to None
        :type destUVSet/duv: str, None
        :return: The new skinCluster.
        :rtype: :class:`SkinCluster`
    
    .. py:method:: dumpWeights(filepath, shape=None, remap=None, vertexConnections=None, weightPrecision=None, weightTolerance=None, attribute=None, defaultValue=None)
    
        Overloads :meth:`paya.runtime.nodes.GeometryFilter.dumpWeights` to
        include DQ blend weights by default, and to work around this bug:
        
        When the ``.blendWeights`` array on a skinCluster is sparsely
        populated (as is typically the case), dumping and reloading it
        via ``deformerWeights(at='blendWeights')`` results in a wrong
        index mapping.
    
    .. py:method:: invertShape(correctiveShape, name=None)
    
        Given a corrective geometry for the current skinCluster pose, returns
        a reversed geometry suitable for use as a pre-deformation blend shape
        target.
        
        :param correctiveShape: the corrective (sculpt) shape
        :type correctiveShape: :class:`str`,
            :class:`~pymel.core.general.Shape`,
            :class:`~pymel.core.general.Transform`
        :param str name/n: a name for the inverted shape node; defaults to
            ``None``
        :return: The pre-deformation target.
        :rtype: :class:`~paya.runtime.nodes.GeometryShape`