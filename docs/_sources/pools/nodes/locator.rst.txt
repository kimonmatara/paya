**************************
paya.runtime.nodes.Locator
**************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: Locator(*args, **kwargs)



    .. rubric:: Inheritance

    :class:`~pymel.core.nodetypes.Locator` :class:`~paya.runtime.nodes.GeometryShape` :class:`~pymel.core.nodetypes.GeometryShape` :class:`~paya.runtime.nodes.Shape` :class:`~pymel.core.nodetypes.Shape` :class:`~paya.runtime.nodes.DagNode` :class:`~pymel.core.nodetypes.DagNode` :class:`~paya.runtime.nodes.Entity` :class:`~pymel.core.nodetypes.Entity` :class:`~paya.runtime.nodes.ContainerBase` :class:`~pymel.core.nodetypes.ContainerBase` :class:`~paya.runtime.nodes.DependNode` :class:`~pymel.core.nodetypes.DependNode` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`

    .. py:classmethod:: create(worldMatrix=None, displayLocalAxis=False, conformShapeName=None, name=None, parent=None, size=1.0)
    
        Locator constructor. Note that the return is the locator *shape*, not
        its transform.
        
        :param worldMatrix/wm: a world-matrix for the locator transform;
            ignored if a custom parent is specified via *parent*/*p*; defaults
            to None
        :param bool displayLocalAxis/dla: display local rotation axes; defaults to
            None
        :param bool conformShapeName/csn: ignored if *parent* was omitted;
            rename the shape after it is reparented; defaults to True if
            *parent* was provided, otherwise False
        :param float size/siz: a convenience scalar for the locator
            ``localScale`` attribute; defaults to 1.0
        :param parent/p: a custom parent for the locator *shape*; defaults to None
        :type parent/p: None, str, :class:`~paya.runtime.nodes.Transform`
        :param str name/n: a name for the locator *shape*; defaults to
            ``None``
        :return: The locator shape.
        :rtype: :class:`Locator`
    
    .. py:classmethod:: createFromMacro(macro, **overrides)
    
        :param dict macro: the type of macro returned by :meth:`macro`
        :param \*\*overrides: overrides to the macro, passed in as keyword
            arguments
        :return: The reconstructed locator shape.
        :rtype: :class:`Locator`
    
    .. py:method:: macro()
    
        :return: A simplified representation of this locator shape,
            used by :meth:`createFromMacro` to reconstruct it.
        :rtype: dict
    
    .. py:classmethod:: normalizeMacro(macro)
    
        Used by the shapes library to fit control points inside a unit cube.
        This is an in-place operation; the method has no return value.
        
        :param dict macro: the macro to edit