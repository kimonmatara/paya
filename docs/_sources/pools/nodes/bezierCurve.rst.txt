******************************
paya.runtime.nodes.BezierCurve
******************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: BezierCurve(*args, **kwargs)

    .. rubric:: Inheritance

    :class:`~pymel.core.nodetypes.BezierCurve` :class:`~paya.runtime.nodes.NurbsCurve` :class:`~pymel.core.nodetypes.NurbsCurve` :class:`~paya.runtime.nodes.CurveShape` :class:`~pymel.core.nodetypes.CurveShape` :class:`~paya.runtime.nodes.DeformableShape` :class:`~pymel.core.nodetypes.DeformableShape` :class:`~paya.runtime.nodes.GeometryShape` :class:`~pymel.core.nodetypes.GeometryShape` :class:`~paya.runtime.nodes.Shape` :class:`~pymel.core.nodetypes.Shape` :class:`~paya.runtime.nodes.DagNode` :class:`~pymel.core.nodetypes.DagNode` :class:`~paya.runtime.nodes.Entity` :class:`~pymel.core.nodetypes.Entity` :class:`~paya.runtime.nodes.ContainerBase` :class:`~pymel.core.nodetypes.ContainerBase` :class:`~paya.runtime.nodes.DependNode` :class:`~pymel.core.nodetypes.DependNode` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`



    .. py:classmethod:: create(*points, name=None, parent=None, displayType=None, conformShapeName=None, intermediate=False, lineWidth=None, dispCV=True)
    
        Bezier curve constructor. Points can be static or dynamic.
        
        :param \*points: if provided, the number of CV points must be 'legal'
            for a Bezier curve; namely, outer anchors must receive two CVs
            each, and inner anchors must each receive three CVs; if omitted,
            an empty Bezier curve shape node will be createds
        :param \*points: None, str, tuple, list,
            :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param str name/n: a name for the curve *shape* node; defaults to a
            contextual name
        :param parent/p: an optional destination parent; no space conversion
            will take place; if the parent has transforms, the curve shape
            will be transformed as well; defaults to None
        :typeparent/p: None, str, :class:`~paya.runtime.nodes.Transform`
        :param displayType/dt: if provided, an index or enum label:
        
            - 0: 'Normal'
            - 1: 'Template'
            - 2: 'Reference'
        
            If omitted, display overrides won't be activated at all.
        :type displayType/dt: None, int, str
        :param bool conformShapeName/csn: if reparenting, rename the shape to
            match the destination parent; defaults to ``True`` if *parent* has
            been specified, otherwise ``False``
        :param bool intermediate/i: set the shape to intermediate; defaults to
            ``False``
        :param lineWidth/lw: an override for the line width; defaults to
            ``None``
        :type lineWidth/lw: ``None``, :class:`float`
        :param bool dispCV/dcv: display CVs on the curve; defaults to ``True``
        :return: The curve shape.
        :rtype: :class:`BezierCurve`
    
    .. py:classmethod:: createLine(startPt, endPt, numAnchors=2, **kwargs)
    
        Convenience wrapper for :meth:`create` to quickly draw a straight
        bezier line.
        
        :param startPt: the start point
        :type startPt: :class:`tuple`, :class:`list`,
            :class:`str`, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param endPt: the end point
        :type endPt: :class:`tuple`, :class:`list`,
            :class:`str`, :class:`~paya.runtime.data.Point`,
            :class:`~paya.runtime.plugs.Vector`
        :param int numAnchors/na: the number of anchors; defaults to 2
        :param \*\*kwargs: forwarded to :meth:`create`
        :return: The bezier curve shape.
        :rtype: :class:`BezierCurve`
    
    .. py:method:: clusterAnchor(anchorIndex, **kwargs)
    
        :param int anchorIndex: the index of the anchor to cluster
        :param \*\*kwargs:
            forwarded to :meth:`paya.runtimes.nodes.Cluster.create`
        :return: A cluster for the specified anchor.
        :rtype: :class:`~paya.runtime.nodes.Cluster`
    
    .. py:method:: clusterAll(merge=False, tolerance=1e-06, anchors=False)
    
        Overloads :meth:`~paya.runtime.nodes.NurbsCurve.clusterAll` to add the
        *anchors* / *a* option.
        
        :param bool anchors/a: group clusters by bezier anchor; defaults to
            False
        :param bool merge/mer: merge CVs if they overlap within the specified
            *tolerance*; defaults to False
        :param float tolerance/tol: the merging tolerance; defaults to 1e-6
        :return: The clusters.
        :rtype: [:class:`~paya.runtime.nodes.Cluster`]
    
    .. py:method:: numAnchors(worldSpace=False)
    
        .. note::
        
            Added from a plug method; a *worldSpace/ws* keyword argument
            has been added, defaulting to ``False``.
        
        .. rubric:: Documentation from :meth:`paya.runtime.plugs.BezierCurve.numAnchors`:
        
        :return: The number of anchors on this Bezier curve.
        :rtype: :class:`int`
    
    .. py:method:: paramAtAnchor(anchorIndex, worldSpace=False)
    
        .. note::
        
            Added from a plug method; a *worldSpace/ws* keyword argument
            has been added, defaulting to ``False``.
        
        .. rubric:: Documentation from :meth:`paya.runtime.plugs.BezierCurve.paramAtAnchor`:
        
        This is a fixed / static-only calculation.
        
        :param int anchorIndex: the anchor index
        :return: The U parameter.
    
    .. py:method:: paramsAtAnchors(worldSpace=False)
    
        .. note::
        
            Added from a plug method; a *worldSpace/ws* keyword argument
            has been added, defaulting to ``False``.
        
        .. rubric:: Documentation from :meth:`paya.runtime.plugs.BezierCurve.paramsAtAnchors`:
        
        This is a fixed / static-only calculation. It evaluates slightly more
        quickly than repeated calls to :meth:`paramAtAnchor`.
        
        :return: The U parameters at each Bezier anchor root.
        :rtype: [:class:`int`]
    
    .. py:method:: getCVAtAnchor(anchorIndex, asPoint=None, asIndex=None, plug=False, worldSpace=False)
    
        .. note::
        
            Added from a plug method; a *worldSpace/ws* keyword argument
            has been added, defaulting to ``False``.
        
        .. rubric:: Documentation from :meth:`paya.runtime.plugs.BezierCurve.getCVAtAnchor`:
        
        :param int anchorIndex: the index of the Bezier anchor to inspect
        :param bool asPoint/ap: return a CV point position (the default)
        :param bool asIndex/ai: return a CV index; this will always be a
            value, even if *plug* is ``True``
        :param plug/p: if *asPoint* is requested, return a plug, not just
            a value; defaults to ``False``
        :return: The point at the root CV of the specified anchor.
        :rtype: :class:`int` | :class:`~paya.runtime.data.Point`
            | :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: pointAtAnchor(anchorIndex, plug=False, worldSpace=False)
    
        .. note::
        
            Added from a plug method; a *worldSpace/ws* keyword argument
            has been added, defaulting to ``False``.
        
        .. rubric:: Documentation from :meth:`paya.runtime.plugs.BezierCurve.pointAtAnchor`:
        
        :param int anchorIndex: the index of the Bezier anchor to inspect
        :param bool plug/p: return an attribute, not just a value; defaults
            to ``False``
        :return: The position of the root CV at the specified anchor.
        :rtype: :class:`~paya.runtime.data.Point` | :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: getCVsAtAnchor(anchorIndex, asPoint=None, asIndex=None, asDict=False, plug=False, worldSpace=False)
    
        .. note::
        
            Added from a plug method; a *worldSpace/ws* keyword argument
            has been added, defaulting to ``False``.
        
        .. rubric:: Documentation from :meth:`paya.runtime.plugs.BezierCurve.getCVsAtAnchor`:
        
        :param int anchorIndex: the index of the anchor to inspect
        :param bool asPoint/ap: return CV point positions (the default)
        :param bool asIndex/ai: return CV indices; indices are always
            returned as values, not scalar outputs, even if *plug* is
            ``True``
        :param plug/p: if *asPoint* is requested, return point outputs, not
            just values; defaults to ``False``
        :param bool asDict/ad: returns the information in a
            dictionary with the following keys:
        
            - ``'in'``: the in-tangent point or index (may be omitted)
            - ``'root'``: the point or index for the main anchor CV
            - ``'out'``: the out-tangent point or index (may be omitted)
        
            Defaults to ``False``.
        
        :return: The CV indices or positions.
        :rtype: [:class:`int`] | [:class:`paya.runtime.plugs.Vector`] |
            [:class:`paya.runtime.data.Point`]
    
    .. py:method:: getControlVerts(plug=False, anchors=False, worldSpace=False)
    
        .. note::
        
            Added from a plug method; a *worldSpace/ws* keyword argument
            has been added, defaulting to ``False``.
        
        .. rubric:: Documentation from :meth:`paya.runtime.plugs.BezierCurve.getControlVerts`:
        
        :param bool plug/p: return plugs rather than values;
            defaults to ``False``
        :param bool anchors/a: organise the return into bezier anchor groups;
            see :func:`paya.lib.nurbsutil.itemsAsBezierAnchors`; defaults to
            ``False``
        :return: The members of the ``controlPoints`` info array for this
            curve.
        :rtype: [:class:`~paya.runtime.plugs.Vector`],
            [:class:`~paya.runtime.data.Point`]
    
    .. py:method:: matrixAtAnchor(anchorIndex, primaryAxis, secondaryAxis, upVector=None, upObject=None, aimCurve=None, closestPoint=True, upVectorSampler=None, defaultToNormal=None, globalScale=None, squashStretch=False, plug=None)
    
        .. note::
        
            Added from a plug method; only runs in world-space.
        
        .. rubric:: Documentation from :meth:`paya.runtime.plugs.BezierCurve.matrixAtAnchor`:
        
        :param int anchorIndex: the index of the anchor at which to
            construct a matrix
        :param str primaryAxis: the primary (aim) matrix axis, for example
            '-y'
        :param str secondaryAxis: the secondary (up) matrix axis, for example
            'x'
        :param upVector/upv: if provided on its own, used directly; if combined
            with *upObject*, multiplied by the object's world matrix, similar
            to the 'Object Rotation Up' mode on :class:`motion path
            <paya.runtime.nodes.MotionPath>` nodes; defaults to ``None``
        :type upVector/upv: None, str, tuple, list,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param upObject/uo: similar to :class:`motion path
            <paya.runtime.nodes.MotionPath>` nodes, if provided on its own,
            used as an aiming interest ('Object Up' mode); if combined with
            *upVector*, the up vector is multiplied by the object's world
            matrix ('Object Rotation Up' mode); defaults to ``None``
        :type upObject/uo: None, str, :class:`~paya.runtime.nodes.Transform`
        :param aimCurve/aic: a curve from which to pull aiming interests,
            similar to the option on
            :class:`curveWarp <paya.runtime.nodes.CurveWarp>` nodes; defaults
            to ``None``
        :type aimCurve/aic: None, str,
            :class:`paya.runtime.plugs.NurbsCurve`,
            :class:`paya.runtime.nodes.NurbsCurve`,
            :class:`~paya.runtime.nodes.Transform`
        :param bool closestPoint/cp: pull points from *aimCurve* by proximity,
            not matched parameters; defaults to ``True``
        :param upVectorSampler/ups: an up vector sampler created using
            :meth:`createUpVectorSampler`; defaults to ``None``
        :type upVectorSampler/ups: None, str, :class:`~paya.runtime.nodes.Network`,
            :class:`~paya.runtime.networks.CurveUpVectorSampler`
        :param bool defaultToNormal/dtn: when all other up vector options are
            exhausted, don't fall back to any 'default' up vector sampler
            previously created using
            :meth:`createUpVectorSampler(setAsDefault=True) <createUpVectorSampler>`;
            instead, use the curve normal (the curve normal will be used anyway
            if no default sampler is defined); defaults to ``False``
        :param globalScale/gs: a baseline scaling factor; note that scale will
            be normalized in all cases, so if this is value rather than a plug,
            it will have no practical effect; defaults to ``None``
        :type globalScale/gs: None, float, str, :class:`~paya.runtime.plugs.Math1D`
        :param bool squashStretch/ss: allow squashing and stretching of the
            *primaryAxis* on the output matrix; defaults to ``False``
        :param bool plug/p: force a dynamic output, or indicate that one or
            more of the arguments are plugs to skip checks; defaults to
            ``None``
        :return: A matrix at the specified anchor.
        :rtype: :class:`paya.runtime.data.Matrix`, :class:`paya.runtime.plugs.Matrix`
    
    .. py:method:: inbetweenAnchors(numTweens=1)
    
        .. note::
        
            
                    Attached from plug class. Plug outputs are replaced with shapes. These
                    should be caught, as some operations may entirely replace the original
                    shape instance. History is always preserved.
                    
        
        .. rubric:: Documentation from :meth:`paya.runtime.plugs.BezierCurve.inbetweenAnchors`:
        
        :param int numTweens/num: the number of anchors to insert between each
            pair of existing anchors; defaults to ``1``
        :return: The edited Bezier curve.
        :rtype: :class:`~paya.runtime.plugs.BezierCurve`
    
    .. py:method:: subdivideAnchors(subdivisions=1)
    
        .. note::
        
            
                    Attached from plug class. Plug outputs are replaced with shapes. These
                    should be caught, as some operations may entirely replace the original
                    shape instance. History is always preserved.
                    
        
        .. rubric:: Documentation from :meth:`paya.runtime.plugs.BezierCurve.subdivideAnchors`:
        
        Subdivides this Bezier curve by recursively adding knots between its
        anchors.
        
        :param int subdivisions/sub: the number of times to subdivide; defaults
            to 1
        :return: The edited Bezier curve.
        :rtype: :class:`~paya.runtime.plugs.BezierCurve`