********************************
paya.runtime.nodes.VectorProduct
********************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: VectorProduct(*args, **kwargs)



    .. rubric:: Inheritance

    :class:`~pymel.core.nodetypes.VectorProduct` :class:`~paya.runtime.nodes.ShadingDependNode` :class:`~pymel.core.nodetypes.ShadingDependNode` :class:`~paya.runtime.nodes.DependNode` :class:`~pymel.core.nodetypes.DependNode` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`

    .. py:classmethod:: createAsCross(input1, input2, normalize=False, guard=False, inlineGate=None, name=None)
    
        Creates and configures a :class:`vectorProduct <VectorProduct>` for
        cross product calculation, with options to prevent errors when the
        vectors are in-line.
        
        :param input1: the first vector
        :type input1: :class:`tuple`, :class:`list`,
            :class:`str`,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param input2: the first vector
        :type input2: :class:`tuple`, :class:`list`,
            :class:`str`,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`
        :param bool normalize/nr: normalize the output; defaults to
            ``False``
        :param bool guard/g: switch the node to 'No Operation' when the
            input vectors are aligned in either direction; defaults to
            ``False``
        :param bool inlineGate/ig: if you have a precooked gate for alignment
            (typically the output of a comparison operation), provide it here
            to prevent redundant checks; if provided, will override *guard*
            to ``True``; defaults to ``None``
        :param str name/n: a name for the node; defaults to ``None``
        :return: The configured node.
        :rtype: :class:`VectorProduct`