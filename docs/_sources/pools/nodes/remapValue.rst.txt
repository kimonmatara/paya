*****************************
paya.runtime.nodes.RemapValue
*****************************

.. py:currentmodule:: paya.runtime.nodes

.. py:class:: RemapValue(*args, **kwargs)



    .. rubric:: Inheritance

    :class:`~pymel.core.nodetypes.RemapValue` :class:`~paya.runtime.nodes.DependNode` :class:`~pymel.core.nodetypes.DependNode` :class:`~pymel.core.general.PyNode` :class:`~pymel.util.utilitytypes.ProxyUnicode`

    .. py:method:: setValues(positionValuePairs, interpolation='Linear')
    
        Sets (or connects) all values on this node. The entire previous
        configuration of the ``value`` compound multi is discarded.
        
        :param positions: the positions at which to set values
        :type positions: [float, :class:`~paya.runtime.plugs.Math1D`]
        :param values: the values to set; must be the same number as
            *positions*
        :type values:  [float, :class:`~paya.runtime.plugs.Math1D`]
        :param interpolation/i: this can be either one enum key or index
            for the value interpolation, or a list of them. The enums
            are:
        
            -   0: 'None'
            -   1: 'Linear' (the default)
            -   2: 'Smooth'
            -   3: 'Spline'
        :return: ``self``
        :rtype: :class:`RemapValue`
    
    .. py:method:: resetValues()
    
        Resets the *value* compound array.
        
        :return: ``self``
        :rtype: :class:`RemapValue`
    
    .. py:method:: sampleValue(position, reuse=True, plug=None)
    
        Samples an interpolated value at the specified position.
        
        :param position: the position at which to sample a value
        :type position: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool reuse/re: look for an existing sample for the same
            position value or plug; defaults to True
        :param bool plug/p: force a dynamic output, or indicate that one or
            more of the arguments are plugs to skip checks; defaults to
            ``None``
        :return: The value sample output.
        :rtype: :class:`~paya.runtime.plugs.Math1D`
    
    .. py:method:: setColors(positionColorPairs, interpolation='Linear')
    
        Sets (or connects) all colors on this node. The entire previous
        configuration of the ``color`` compound multi is discarded.
        
        :param positions: the positions at which to set colors
        :type positions: [float, :class:`~paya.runtime.plugs.Math1D`]
        :param colors: the colors to set; must be the same number as
            *positions*
        :type colors:  [list, tuple, str,
            :class:`~paya.runtime.data.Vector`,
            :class:`~paya.runtime.plugs.Vector`]
        :param interpolation/i: this can be either one enum key or index
            for the color interpolation, or a list of them. The enums
            are:
            -   0: 'None'
            -   1: 'Linear' (the default)
            -   2: 'Smooth'
            -   3: 'Spline'
        :return: ``self``
        :rtype: :class:`RemapColor`
    
    .. py:method:: resetColors()
    
        Resets the *color* compound array.
        
        :return: ``self``
        :rtype: :class:`RemapValue`
    
    .. py:method:: sampleColor(position, plug=None, reuse=True)
    
        Samples an interpolated color at the specified position.
        
        :param position: the position at which to sample a color
        :type position: float, :class:`~paya.runtime.plugs.Math1D`
        :param bool reuse/re: look for an existing sample for the same
            position value or plug; defaults to True
        :param bool plug/p: force a dynamic output, or indicate that one or
            more of the arguments are plugs to skip checks; defaults to
            ``None``
        :return: The color sample output.
        :rtype: :class:`~paya.runtime.plugs.Vector`
    
    .. py:method:: resetNode(skipInputValue=False)
    
        Removes all inputs from this node and resets all attributes to
        defaults.
        
        :param bool skipInputValue/siv: don't modify the ``inputValue``
            attribute; defaults to False
        :return: ``self``
        :rtype: :class:`RemapValue`
    
    .. py:method:: driveSlave(slave, skipInputValue=False)
    
        Drives another ``remapValue`` node completely.
        
        :param slave: the node to drive
        :type slave: str, :class:`RemapValue`
        :param bool skipInputValue/siv: don't modify the slave ``inputValue``
            attribute; defaults to False
        :return: ``self``
        :rtype: :class:`RemapValue`
    
    .. py:method:: createClone()
    
        :return: A new ``remapValue`` node, driven by this one.
        :rtype: :class:`RemapValue`
    
    .. py:method:: getClones()
    
        :return: Nodes created using :meth:`createClone`.
        :rtype: [:class:`RemapValue`]
    
    .. py:method:: findCloneWithPosition(position)
    
        :param position: the position value or plug
        :type position: float, :class:`~paya.runtime.plugs.Math1D`
        :raises NoCloneForPositionError: No clone was found.
        :return: An existing clone configured for the specified position.
        :rtype: :class:`RemapValue`
    
    .. py:method:: updateClones()
    
        Reconnects current clones. This is normally necessary after adding
        or removing ``color`` or ``value`` indices on this node.
        
        :return: ``self``
        :rtype: :class:`RemapValue`