==============================================
paya.plugtypes.attributeMath3D.AttributeMath3D
==============================================

.. py:module:: paya.plugtypes.attributeMath3D

.. py:class:: AttributeMath3D(*args, **kwargs)

    .. py:method:: __add__(other, swap=False)
    
        Implements **addition** (``+``).
        
        :param other: a value or plug of dimension 1 or 3
    
    .. py:method:: __mul__(other, swap=False)
    
        Implements **multiplication** (``*``).
        
        :param other: a value or plug of dimension 1, 3 or right-only 16.
    
    .. py:method:: __pow__(other, swap=False)
    
        Implements **power** (``**``).
        
        :param other: a value or plug of dimension 1 or 3.
    
    .. py:method:: __radd__(other)
    
        Implements **reflected addition** (``+``). See :meth:`__add__`.
    
    .. py:method:: __rmul__(other)
    
        Implements **reflected multiplication** (``*``). See :meth:`__mul__`.
    
    .. py:method:: __rpow__(other)
    
        Implements **reflected power** (``**``). See :meth:`__pow__`.
    
    .. py:method:: __rsub__(other)
    
        Implements **reflected subtraction** (``-``). See :meth:`__sub__`.
    
    .. py:method:: __rtruediv__(other)
    
        Implements **reflected division** (``/``). See :meth:`__truediv__`.
    
    .. py:method:: __sub__(other, swap=False)
    
        Implements **subtraction** (``-``).
        
        :param other: a value or plug of dimension 1 or 3
    
    .. py:method:: __truediv__(other, swap=False)
    
        Implements **division** (``/``).
        
        :param other: a value or plug of dimension 1 or 3.
    
    .. py:method:: __xor__(other)
    
        Uses the exclusive-or operator (``^``) to implement
        **point-matrix multiplication**.
        
        :param other: a matrix value or plug
    
    .. py:method:: get(plug=False, asPoint=None, asAngle=None, rotateOrder=None, **kwargs)
    
        :param bool plug/p: return self; defaults to False
        :param asPoint: return a :class:`~paya.datatypes.point.Point`
            instance; defaults to True if this is a translate channel on a
            transform, otherwise False
        :param asAngle: return an
            :class:`~paya.datatypes.eulerRotation.EulerRotation` instance;
            defaults to True if this is a rotate channel on a transform,
            otherwise False
        :param str rotateOrder/ro: used if 'asAngle' resolves to True; if this
            is a rotate channel on a transform node, defaults to the node's
            rotate order, otherwise XYZ
        :param \*\*kwargs: forwarded to the base method
        :return: bool, :class:`~paya.datatypes.vector.Vector`,
            :class:`~paya.datatypes.point.Point`,
            :class:`~paya.datatypes.eulerRotation.EulerRotation`