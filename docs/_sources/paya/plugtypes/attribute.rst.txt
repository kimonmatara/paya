==================================
paya.plugtypes.attribute.Attribute
==================================

.. py:module:: paya.plugtypes.attribute

.. py:class:: Attribute(*args, **kwargs)

    .. py:method:: isAnimatableDynamic()
    
        :return: True if this is a dynamic attribute that can be exposed for
            keying.
    
    .. py:method:: plugType(inherited=False)
    
        Returns abstract type information for this plug.
        
        :param bool inherited/i: return the full hierarchy stack instead
            of just a single type; defaults to False
        :return: The type information.
        :rtype: str or list
    
    .. py:method:: setClass(cls)
    
        Convenience method to enable chained dot notation when reassigning the
        plug class (sometimes necessary for ambiguous output types, e.g. on
        'choice' nodes). Returns ``self``.
        
        Equivalent to:
        
        .. code-block:: python
        
            self.__class__ = cls
        
        :param type cls: the class to assign
        :return: This instance, with a reassigned class.
        :rtype: :class:`Attribute`
    
    .. py:method:: get(plug=False, **kwargs)
    
        Extends :py:meth:`pymel.core.general.Attribute.get` with the ``plug``
        keyword argument, which is useful when the decision whether to work
        statically or dynamically rests with the end-user.
        
        :param bool plug/p: if True, return ``self``; defaults to False
        :param \*\*kwargs: forwarded to the base method
        :return: :class:`Attribute` or a value type
    
    .. py:method:: lock(recursive=False, **kwargs)
    
        Overloads :class:`~pymel.core.general.Attribute` to implement the
        *recursive* option and return ``self``.
        
        :param bool recursive/r: if this is a compound, lock its children too;
            defaults to False
        :param \*\*kwargs: forwarded to
            :meth:`~pymel.core.general.Attribute.lock`
        :return: ``self``
        :rtype: :class:`~paya.plugtypes.attribute.Attribute`
    
    .. py:method:: hide(recursive=False)
    
        Turns off *keyable* and *channelBox* for this attribute.
        
        :param bool recursive/r: if this is a compound, edit the children too;
            defaults to False
        :return: ``self``
        :rtype: :class:`~paya.plugtypes.attribute.Attribute`
    
    .. py:method:: unlock(recursive=False, force=False, **kwargs)
    
        Overloads :class:`~pymel.core.general.Attribute` to implement the
        *recursive* and *force* options and return ``self``.
        
        :param bool recursive/r: if this is a compound, unlock the children
            too; defaults to False
        :param bool force/f: if this is the child of a compound, unlock the
            compound parent too; defaults to False
        :param \*\*kwargs: forwarded to
            :meth:`~pymel.core.general.Attribute.unlock`
        :return: ``self``
        :rtype: :class:`~paya.plugtypes.attribute.Attribute`
    
    .. py:method:: release(recursive=False)
    
        Unlocks this attribute and disconnects any inputs.
        
        :param bool recursive/r: if this is a compound, release child attributes
            too; defaults to False
        :return:
    
    .. py:method:: put(source, plug=None)
    
        Helper for mixed plug / value workflows. If 'source' is an attribute,
        it will be connected into this plug. Otherwise, this plug will be set
        to 'source'.
        
        :param source: the source value or plug
        :param plug/p: if you know whether 'source' is a plug or not, specify
            if here; defaults to None
        :type plug/p: bool or None
        :return: self