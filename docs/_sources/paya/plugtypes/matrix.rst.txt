============================
paya.plugtypes.matrix.Matrix
============================

.. py:module:: paya.plugtypes.matrix

.. py:class:: Matrix(*args, **kwargs)

    .. py:method:: createLocator(scale=1.0)
    
        Creates a locator and drives its SRT channels using this matrix.
        
        :shorthand: ``cl``
        
        :param float scale: the locator display scale; defaults to 1.0
        :return: The locator.
        :rtype: :class:`~paya.nodetypes.transform.Transform`
    
    .. py:method:: __add__(other, swap=False)
    
        Implements **addition** (``+``).
        
        :param other: a 16D value or plug
    
    .. py:method:: __radd__(other)
    
        Implements **reflected addition** (``+``). See :meth:`__add__`.
    
    .. py:method:: mul(*others)
    
        Multiplies this matrix in a chained manner with ``*others``.
        
        :param others: the other matrices (unpacked list)
        :type others: str, Matrix, Matrix, [list]
        :return: :class:`~paya.attributeMatrix.Matrix`
    
    .. py:method:: __mul__(other, swap=False)
    
        Implements **multiplication** (``*``).
        
        :param other: a value or plug of dimension 3 (left only) or 16.
    
    .. py:method:: __rmul__(other)
    
        Implements **reflected multiplication** (``*``). See :meth:`__mul__`.
    
    .. py:method:: __rxor__(other)
    
        Uses the exclusive-or operator (``^``) to implement
        **point-matrix multiplication** (reflected only).
        
        :param other: a 3D value or plug
    
    .. py:method:: pick(translate=None, rotate=None, scale=None, shear=None, default=None)
    
        Filters this matrix through one or more pickMatrix nodes, depending on
        combinations with 'default'. Flags are defined by omission, Maya-style.
        
        :shorthand: pk
        
        :param bool translate/t: use translate
        :param bool rotate/r: use rotate
        :param bool scale/s: use scale
        :param shear/sh: use shear
        :param default: take omitted fields from this matrix; can be a value
            or plug; defaults to None
        :type default: list, :class:`~paya.datatypes.matrix.Matrix`, str,
            :class:`~paya.plugtypes.attributeMatrix.Matrix`
        :return: The filtered matrix.
        :rtype: :class:`~paya.plugtypes.attributeMatrix.Matrix`
    
    .. py:method:: inverse()
    
        :return: The inverse of this matrix.
        :rtype: :class:`~paya.attributeMatrix.Matrix`
    
    .. py:method:: asOffset()
    
        Inverts this matrix once, to create an offset matrix. Equivalent to:
        
        .. code-block:: python
        
            self.get().inverse() * self
        
        :return: The offset matrix.
        :rtype: :class:`~paya.attributeMatrix.Matrix`
    
    .. py:method:: getAxis(axis, normalize=False)
    
        Extracts the specified axis from this matrix as a vector output. If
        this is the output attribute of a fourByFourMatrix node, the method
        will defer to methods in
        :class:`~paya.nodetypes.fourByFourMatrix.FourByFourMatrix`.
        
        Used to implement the following properties: **x**, **y**, **z** and
        **translate**/**t**. The property versions will always return
        non-normalized outputs.
        
        :param str axis: the axis to extract, one of 'x', 'y', 'z', '-x',
            '-y', '-z' or 'translate' / 't'.
        :param bool normalize: normalize the extracted vector; defaults
            to False
        :return: :class:`Math3D`
    
    .. py:method:: getX(normalize=False)
    
        Extracts the X vector. Used to implement the **x** property.
        
        :param bool normalize: normalize the output; defaults to False
        :return: the extracted vector
        :rtype: :class:`~paya.plugtypes.vector.Vector`
    
    .. py:method:: getY(normalize=False)
    
        Extracts the Y vector. Used to implement the **y** property.
        
        :param bool normalize: normalize the output; defaults to False
        :return: the extracted vector
        :rtype: :class:`~paya.plugtypes.vector.Vector`
    
    .. py:method:: getZ(normalize=False)
    
        Extracts the Z vector. Used to implement the **z** property.
        
        :param bool normalize: normalize the output; defaults to False
        :return: the extracted vector
        :rtype: :class:`~paya.plugtypes.vector.Vector`
    
    .. py:method:: getTranslate(normalize=False)
    
        Extracts the translation component. Used to implement the
        **translate** / **t** property.
        
        :param bool normalize: normalize the output; defaults to False
        :return: the extracted translation
        :rtype: :class:`~paya.plugtypes.math3D.Math3D`
    
    .. py:method:: transpose()
    
        :return: The transposition of this matrix.
        :rtype: :class:`~paya.attributeMatrix.Matrix`
    
    .. py:method:: decompose(rotateOrder='xyz')
    
        Connects and configures a ``decomposeMatrix`` node.
        
        :param rotateOrder/ro: the rotate order to apply; defaults to 'xyz'
        :type rotateOrder/ro: str, int, Math1D
        :return: dictionary of {channelName:decomposeMatrixOutput}
        :rtype: dict
    
    .. py:method:: decomposeAndApply(transform, translate=None, rotate=None, scale=None, shear=None, compensatePivots=False, compensateJointOrient=True, compensateRotateAxis=True, compensateJointScale=True, fast=False)
    
        Decomposes and applies this matrix to a transform.
        
        :param transform: the transform node to drive
        :type transform: str, :class:`~paya.nodetypes.transform.Transform`
        :param bool translate/t: apply translation
        :param bool rotate/r: apply rotation
        :param bool scale/s: apply scale
        :param bool shear/sh: apply shear
        :param bool fast: skip all compensations; defaults to False
        :param bool compensateJointScale/cjs: account for
            segmentScaleCompensate on joints; defaults to True
        :param bool compensateJointOrient/cjo: account for jointOrient on
            joints; defaults to True
        :param bool compensateRotateAxis/cra: account for ``rotateAxis``,
            set this to False to emulate Maya constraint behaviour; defaults
            to True
        :param bool compensatePivots/cp: compensate for pivots (non-joint
            transforms only); this is expensive, so defaults to False
        :return: For convenience, the return of :meth:`decompose` is passed
            along
        :rtype: dict
    
    .. py:method:: hold()
    
        Connects a holdMatrix node and returns its output.
        
        This is useful in situations where a method such as pick() has nothing
        to do, but must return a new output to protect code branching.
        
        :return: The output of a holdMatrix node.
        :rtype: :class:`HoldMatrix`
    
    .. py:method:: asEulerRotation(rotateOrder='xyz')
    
        Returns the euler decomposition of this matrix.
        
        :param rotateOrder/ro: The rotate order, defaults to ``'xyz'``
        :type rotateOrder/ro: int, str, Math1D
        :return: The Euler rotation output.
        :rtype: :class:`Math3D`
    
    .. py:method:: asQuaternion()
    
        Returns a quaternion output for this matrix's rotation.
        
        :return: The quaternion.
        :rtype: :class:`Quaternion`