================================
paya.plugtypes.compound.Compound
================================

.. py:module:: paya.plugtypes.compound

.. py:class:: Compound(*args, **kwargs)

    .. py:method:: splitInputs()
    
        Splits any compound-level input into per-child connections. The
        compound-level connection is maintained.
        
        :return: ``self``
    
    .. py:method:: lock(recursive=False, **kwargs)
    
        Overloads :class:`~pymel.core.general.Attribute` to implement the
        *recursive* option and return ``self``.
        
        :param bool recursive/r: if this is a compound, lock its children too;
            defaults to False
        :param \*\*kwargs: forwarded to
            :meth:`~pymel.core.general.Attribute.lock`
        :return: ``self``
        :rtype: :class:`~paya.plugtypes.attribute.Attribute`
    
    .. py:method:: unlock(recursive=False, force=False, **kwargs)
    
        Overloads :class:`~pymel.core.general.Attribute` to implement the
        *recursive* and *force* options and return ``self``.
        
        :param bool recursive/r: if this is a compound, unlock the children
            too; defaults to False
        :param bool force/f: if this is the child of a compound, unlock the
            compound parent too; defaults to False
        :param \*\*kwargs: forwarded to
            :meth:`~pymel.core.general.Attribute.unlock`
        :return: ``self``
        :rtype: :class:`~paya.plugtypes.attribute.Attribute`
    
    .. py:method:: hide(recursive=False)
    
        Turns off *keyable* and *channelBox* for this attribute.
        
        :param bool recursive/r: if this is a compound, edit the children too;
            defaults to False
        :return: ``self``
        :rtype: :class:`~paya.plugtypes.attribute.Attribute`
    
    .. py:method:: release(recursive=False)
    
        Unlocks this attribute and disconnects any inputs.
        
        :param bool recursive/r: if this is a compound, release child attributes
            too; defaults to False
        :return:
    
    .. py:method:: __iter__()
    
        Extends iteration to compounds. If this is a compound AND a multi,
        array iteration will take precedence. In those cases, use
        :meth:`~pymel.core.general.Attribute.getChildren` to disambiguate.