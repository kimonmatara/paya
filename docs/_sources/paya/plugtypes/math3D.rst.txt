============================
paya.plugtypes.math3D.Math3D
============================

.. py:module:: paya.plugtypes.math3D

.. py:class:: Math3D(*args, **kwargs)

    .. py:method:: createLocator(name=None)
    
        :shorthand: ``cl``
        
        :param name/n: one or more optional name elements; defaults to None
        :rtype name/n: None, list, int, str
        :return: A locator with this 3D compound piped into its
            ``translate`` channel.
        :rtype: :class:`~paya.nodetypes.transform.Transform`
    
    .. py:method:: get(plug=False, **kwargs)
    
        Overloads :meth:`paya.plugtypes.attribute.Attribute.get` to return
        :class:`~paya.datatypes.vector.Vector` instead of :class:`tuple`.
    
    .. py:method:: __add__(other, swap=False)
    
        Implements **addition** (``+``).
    
    .. py:method:: __radd__(other)
    
        Implements **reflected addition** (``-``).
    
    .. py:method:: __sub__(other, swap=False)
    
        Implements **subtraction** (``-``).
    
    .. py:method:: __rsub__(other)
    
        Implements **reflected subtraction** (``-``).
    
    .. py:method:: __mul__(other, swap=False)
    
        Implements **multiplication** (``*``).
    
    .. py:method:: __rmul__(other)
    
        Implements **reflected multiplication** (``*``).
    
    .. py:method:: __neg__()
    
        Implements **unary negation** (``-``).
    
    .. py:method:: __truediv__(other, swap=False)
    
        Implements **division** (``/``).
    
    .. py:method:: __rtruediv__(other)
    
        Implements **reflected division** (``/``).
    
    .. py:method:: __pow__(other, swap=False)
    
        Implements **power** (``**``).
    
    .. py:method:: __rpow__(other)
    
        Implements **reflected power** (``**``).
    
    .. py:method:: blend(other, weight=0.5, swap=False)
    
        Blends this output towards ``other``.
        
        :param other: the scalar value or plug towards which to blend
        :type other: 3D value or plug
        :param weight/w: the blend weight, where *other* takes over fully
            at 1.0; defaults to 0.5
        :type weight/w: :class:`AttributeMath1D`, :class:`Vector`, list, str
        :param bool swap: swap the operands
        :return: The blended output.
        :rtype: :class:`AttributeMath3D`