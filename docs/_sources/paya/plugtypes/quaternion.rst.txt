====================================
paya.plugtypes.quaternion.Quaternion
====================================

.. py:module:: paya.plugtypes.quaternion

.. py:class:: Quaternion(*args, **kwargs)

    .. py:method:: get(plug=False, default=None, **kwargs)
    
        Overloads :py:meth:`paya.plugtypes.attribute.Attribute.get` to return
        :class:`~paya.datatypes.quaternion.Quaternion` instances instead of
        tuples.
    
    .. py:method:: __add__(other, swap=False)
    
        Implements **addition** (``+``).
        
        :param other: a value or plug of dimension 1 or 4
    
    .. py:method:: __radd__(other)
    
        Implements **reflected addition** (``+``). See :meth:`__add__`.
    
    .. py:method:: __sub__(other, swap=False)
    
        Implements **subtraction** (``-``).
        
        :param other: a value or plug of dimension 1 or 4
    
    .. py:method:: __rsub__(other)
    
        Implements **reflected subtraction** (``-``). See :meth:`__sub__`.
    
    .. py:method:: __mul__(other, swap=False)
    
        Implements **multiplication** (``*``).
        
        :param other: a value or plug of dimension 1 or 4
    
    .. py:method:: __rmul__(other)
    
        Implements **reflected multiplication** (``*``). See :meth:`__mul__`.
    
    .. py:method:: __neg__()
    
        Implements unary negation (``-``) via ``quatNegate``.
    
    .. py:method:: inverse()
    
        :return: The inverse of this quaternion.
        :rtype: :class:`Quaternion`
    
    .. py:method:: normal()
    
        :return: The normalized quaternion.
        :rtype: :class:`Quaternion`
    
    .. py:method:: conjugate()
    
        :return: The conjugated quaternion.
        :rtype: :class:`Quaternion`
    
    .. py:method:: blend(other, weight=0.5, swap=False, angleInterpolation='Shortest')
    
        Blends this quaternion towards ``other``.
        
        :param other: the quaternion value or plug towards which to blend
        :type other: list, :class:`Quaternion`, :class:`Quaternion`
        :param weight/w: 'other' will be fully active at 1.0; defaults to 0.5
        :type weight/w: int, float, :class:`Math1D`
        :param bool swap: reverse operands, defaults to False
        :param angleInterpolation: the type of slerp interpolation to use,
            defaults to 'Shortest'
        :type angleInterpolation: str (an enum name from
            ``QuatSlerp.angleInterpolation``, int, or :class:`Math1D`
        :return: The blended output.
        :rtype: :class:`Quaternion`
    
    .. py:method:: asEulerRotation(rotateOrder='xyz')
    
        Returns this quaternion as an euler compound.
        
        :param rotateOrder/ro: the rotate order, defaults to 'xyz'
        :type rotateOrder/ro: int, str, :class:`Math1D`
        :return: The euler rotation.
        :rtype: :class:`Math3D`
    
    .. py:method:: asAxisAngle()
    
        Returns this quaternion as a tuple of axis, angle outputs.
        
        :return: The axis (vector) and angle outputs.
        :rtype: :class:`tuple`
    
    .. py:method:: asRotateMatrix()
    
        Returns this quaternion as a rotation matrix.
        
        :return: The rotation matrix.
        :rtype: :class:`~paya.attributeMath16D.AttributeMath16D`