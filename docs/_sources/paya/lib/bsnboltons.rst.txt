===================
paya.lib.bsnboltons
===================

.. py:module:: paya.lib.bsnboltons

This module is not for direct import / use. It defines the ``.targets``
interface on :class:`~paya.runtime.nodes.BlendShape`.

.. py:class:: NormalizationGroups(owner)

    .. py:method:: node()
    
        :return: The owner blend shape node.
        :rtype: :class:`~paya.runtime.nodes.BlendShape`

.. py:function:: subtargetIndexToValue(index)

    Given a logical subtarget (tween) index in the 5000 -> 6000 range, returns
    a float weight.
    
    :param index: the logical subtarget index
    :return: The weight.
    :rtype: float

.. py:function:: subtargetValueToIndex(value)

    Given a subtarget (tween) value, returns a logical index in the
    5000 -> 6000 range.
    
    :param value: the subtarget value
    :return: The index.
    :rtype: int

.. py:class:: Subtarget(index, owner)

    Interface for editing subtargets (tweens).
    
    .. rubric:: Updating geometry
    
    .. code-block:: python
    
        target = bsn.targets['L_smile']
        subtarget = target[1.0]
        subtarget.shape = 'new_geo'

    .. py:method:: getShape(create=False, connect=None)
    
        :param bool create/cr: recreate the target where possible; defaults to
            False
        :param bool connect/con: after recreating the target, connect it back
            to the target; defaults to False if this is a 'post' target,
            otherwise False
        :return: The shape connected into this target. This may be None if
            this is a 'post' mode target, or if targets were disconnected or
            deleted by the rigger.
        :rtype: :class:`~paya.runtime.nodes.GeometryShape`
    
    .. py:method:: setShape(shape, connect=None)
    
        :param shape: the geometry shape to use to drive this subtarget
        :type shape: str, :class:`~paya.runtime.nodes.DagNode`
        :param bool connect/con: keep a live connection to the shape;
            this defaults to False if this is a post-mode target, otherwise
            True; passing True on a post-mode target will throw an error
        :return: ``self``
        :rtype: :class:`Subtarget`
    
    .. py:method:: __int__()
    
        :return: The logical (sparse) 5000 - > 6000 index for this subtarget
            (``self.index``)
        :rtype: int
    
    .. py:method:: __float__()
    
        :return: The 0.0 -> 1.0 weight (value) for this subtarget
            (``self.value``)
        :rtype: float

.. py:class:: Target(index, owner)

    .. rubric:: Retrieving Subtargets (Tweens)
    
    .. code-block:: python
    
        # Start
        target = bsn.targets['L_smile']
    
        # Iterate subtargets
        for subtarget in target:
            # do something
    
        # List subtargets
        list(target)
    
        # By logical (sparse, 5000 -> 6000) index
        subtarget = target.getByLogicalIndex(logicalIndex)
    
        # By physical (contiguous) index
        subtarget = target.getByPhysicalIndex(physicalIndex)
        # or
        subtarget = list(taret)[physicalIndex]
    
        # By value (ratio)
        subtarget = target.getByValue(value)
        # or
        subtarget = target[value]
    
    .. rubric:: Adding Subtargets (Tweens)
    
    .. code-block:: python
    
        subtarget = target.add(0.5, tweenShape)
        # or
        target[0.5] = tweenShape # by value
        # or
        target[5500] = tweenShape # by logical index
    
    See :meth:`add` for more options.
    
    .. rubric:: Removing Subtargets (Tweens)
    
    .. code-block:: python
    
        target.removeByPhysicalIndex(physicalIndex)
        target.removeByLogicalIndex(logicalIndex)
        target.removeByValue(value)
    
        # or
        del(target[physicalIndex])
        del(target[value])
    
        # Clear all inbetweens (but not at 1.0)
        target.clearInbetweens()
    
    See :class:`Subtarget` for more.

    .. py:method:: isTransformSpace()
    
        :return: True if this is a transform-space target, else False.
        :rtype: bool
    
    .. py:method:: isTangentSpace()
    
        :return: True if this is a tangent-space target, else False.
        :rtype: bool
    
    .. py:method:: inPostMode()
    
        :return: True if this is a tangent- or transform-space target,
            otherwise False.
        :rtype: bool
    
    .. py:method:: getTransform()
    
        Setter for the ``transform`` / ``xf`` property.
        
        :raises NonTransformSpaceTargetError: this is not a transform-space
            target
        :raises TargetMatrixNotATransformError: there's an input into
            .targetMatrix, but it's from a utility node
        :return: if this is a transform-space target, the transform
            connected to it
        :rtype: None, :class:`~paya.runtime.nodes.Transform`
    
    .. py:method:: setTransform(transform)
    
        If this is a transform-space target, connects the ``.worldMatrix``
        of the specified transform into its ``.targetMatrix`` attribute.
        
        Setter for the ``transform`` / ``xf`` property.
        
        :param transform: the transform to connect
        :type transform: str, :class:`~paya.runtime.nodes.Transform`
        :raises NonTransformSpaceTargetError: this is not a transform-space
            target
        :return: ``self``
        :rtype: :class:`Target`
    
    .. py:method:: clearTransform()
    
        "
        If this is a transform-space target, clears any inputs on its
        ``.targetMatrix`` attribute.
        
        Deleter for the ``transform`` / ``xf`` property.
        
        :raises NonTransformSpaceTargetError: this is not a transform-space
            target
        :return: ``self``
        :rtype: :class:`Target`
    
    .. py:method:: getAlias()
    
        Returns the alias for this blend shape target. Getter for the
        ``alias`` property.
        
        :return: The alias for this target, if any.
        :rtype: str or None
    
    .. py:method:: setAlias(alias)
    
        Sets the alias for this blend shape target. Setter for the ``alias``
        property.
        
        :param str alias: the alias to set
        :return: ``self``
        :rtype: :class:`Target`
    
    .. py:method:: clearAlias()
    
        Removes the alias for this blend shape target (not usually advisable).
        Equivalent to ``setAlias(None)``. Deleter for the ``alias`` property.
        
        :return: ``self``
        :rtype: :class:`Target`
    
    .. py:method:: getLogicalFromPhysicalIndex(physicalIndex)
    
        :param int physicalIndex: the physical (contiguous) subtarget index
        :return: The logical (sparse, 5000 -> 6000) index.
        :rtype: int
    
    .. py:method:: getPhysicalFromLogicalIndex(logicalIndex)
    
        :param int logicalIndex: the logical (sparse, 5000 -> 6000) subtarget
            index
        :return: The physical (contiguous) index.
        :rtype: int
    
    .. py:method:: getLogicalIndexFromValue(value)
    
        :param float value: the 0.0 -> 1.0 subtarget value (ratio)
        :return: The matching logical (sparse, 5000 -> 6000) index.
        :rtype: int
    
    .. py:method:: getValueFromLogicalIndex(logicalIndex)
    
        :param int logicalIndex: the sparse, 5000 -> 6000 subtarget index
        :return: The matching tween value (ratio).
        :rtype: float
    
    .. py:method:: values()
    
        :return: The subtarget (tween) values (ratios).
        :rtype: [float]
    
    .. py:method:: indices()
    
        :return: The logical (sparse, 5000 -> 6000) target indices.
        :rtype: [int]
    
    .. py:method:: getByLogicalIndex(logicalIndex)
    
        Retrieves a subtarget (tween) by logical (sparse, 5000 -> 6000) index.
        
        :param int logicalIndex: the logical subtarget index
        :return: The subtarget.
        :rtype: :class:`Subtarget`
    
    .. py:method:: getByPhysicalIndex(physicalIndex)
    
        Retrieves a subtarget (tween) by logical (contiguous) index.
        
        :param physicalIndex: the physical subtarget index
        :return: The subtarget.
        :rtype: :class:`Subtarget`
    
    .. py:method:: getByValue(value)
    
        Retrieves a subtarget (tween) by value (ratio).
        
        :param float value: the value (ratio)
        :return: The subtarget.
        :rtype: :class:`Subtarget`
    
    .. py:method:: __len__()
    
        :return: The number of subtargets (number of inbetweens + 1)
        :rtype: int
    
    .. py:method:: __iter__()
    
        Yields :class:`Subtarget` instances.
    
    .. py:method:: __getitem__(logicalIndexOrValue)
    
        Retrieves subtargets by logical (5000 -> 6000) index or value (ratio).
        
        :param logicalIndexOrValue: the value or logical index
        :type logicalIndexOrValue: float, int
        :return: The subtarget.
        :rtype: :class:`Subtarget`
    
    .. py:method:: add(value, geometry, relative=False, topologyCheck=False)
    
        Adds a subtarget (tween) at the specified value (ratio).
        
        :param float value: the value at which to add the subtarget
        :param geometry: the geometry shape to assign
        :param bool topologyCheck/tc: check topology before applying; defaults
            to False
        :param bool relative/rel: create a 'relative' inbetween target;
            defaults to False
        :raises RuntimeError: the requested value (ratio) is already in use
        :return: The new Subtarget instance.
        :rtype: :class:`Subtarget`
    
    .. py:method:: remove(subtarget)
    
        Removes a subtarget.
        
        :param subtarget: The subtarget to remove.
        :type subtarget: :class:`Subtarget`
        :return: ``self``
        :rtype: :class:`Target`
    
    .. py:method:: removeByLogicalIndex(logicalIndex)
    
        Removes the subtarget (tween) at the specified logical index. The
        main subtarget (at 6000 / 1.0) can't be removed; use remove() on
        :class:`Targets` instead.
        
        :param int logicalIndex: the logical (sparse / occupied, 5000 -> 6000)
            subtarget index
        :return: ``self``
        :rtype: :class:`Target`
    
    .. py:method:: removeByPhysicalIndex(physicalIndex)
    
        Removes the subtarget (tween) at the specified physical index. The
        main subtarget can't be removed; use remove() on :class:`Targets`
        instead.
        
        :param int physicalIndex: the physical (contiguous) subtarget index
        :return: ``self``
        :rtype: :class:`Target`
    
    .. py:method:: removeByValue(value)
    
        Removes the subtarget (tween) at the specified value (ratio). The
        main subtarget (at 1.0) can't be removed; use remove() on
        :class:`Targets` instead.
        
        :param float value: the subtarget (tween) value (ratio)
        :return: ``self``
        :rtype: :class:`Target`
    
    .. py:method:: clearInbetweens()
    
        Removes all inbetweens.
        
        :return: ``self``
        :rtype: :class:`Target`
    
    .. py:method:: __delitem__(valueOrLogicalIndex)
    
        Removes a subtarget by logical (sparse / occupied, 5000 -> 6000) index
        or value (ratio).
        
        :param valueOrLogicalIndex: The value or logical index.
        :type valueOrLogicalIndex: float, int
    
    .. py:method:: __int__()
    
        :return: The logical (sparse) index for this target group.

.. py:class:: Targets(owner)

    Interface for editing blend shape targets, available on
    :class:`~paya.runtime.nodes.BlendShape` instances as ``.targets`` /
    ``.t``.
    
    .. rubric:: Retrieving Targets
    
    .. code-block:: python
    
        # Iteration
        for target in bsn.targets:
            # do something
    
        # Listing
        list(bsn.targets)
    
        # By logical (sparse / occupied) index:
        target = bsn.targets.getByLogicalIndex(logicalIndex)
        # or:
        target = bsn.targets[logicalIndex]
    
        # By physical (contiguous) index:
        target = bsn.targets.getByPhysicalIndex(physicalIndex)
        # or:
        target = list(bsn.targets)[physicalIndex]
    
        # By alias:
        target = bsn.targets.getByAlias(alias)
        # or:
        target = bsn.targets[alias]
    
    .. rubric:: Adding Targets
    
    .. code-block:: python
    
        target = bsn.targets.add(geometry)
        # or
        target[alias] = geometry
    
    See :meth:`add` for more options.
    
    .. rubric:: Removing Targets
    
    Use :meth:`removeByPhysicalIndex`, :meth:`removeByLogicalIndex`,
    :meth:`removeByAlias`, :meth:`__delitem__` or :meth:`clear`:
    
    .. code-block:: python
    
        # By logical index:
        bsn.targets.removeByLogicalIndex(logicalIndex)
        # or
        del(bsn.targets[logicalIndex])
    
        # By physical index
        bsn.targets.removeByPhysicalIndex(physicalIndex)
    
        # By instance
        target = bsn.targets.add(geometry)
        bsn.targets.remove(target)
    
        # By alias
        bsn.targets.removeByAlias('L_smile')
        # or
        del(bsn.targets['L_smile'])
    
        # Clear all targets
        bsn.clear()
    
    See :class:`Target` for additional methods for subtargets (tweens) etc.

    .. py:method:: node()
    
        :return: The owner blend shape node.
        :rtype: :class:`~paya.runtime.nodes.BlendShape`
    
    .. py:method:: getLogicalIndexFromAlias(alias)
    
        Given an alias, returns the associated logical (sparse / in-use)
        target index.
        
        :param str alias: the target alias
        :return: The logical (sparse / in-use) target index.
        :rtype: int
    
    .. py:method:: getLogicalFromPhysicalIndex(physicalIndex)
    
        :param physicalIndex: the physical (contiguous) target index
        :return: The logical (sparse / occupied) index.
        :rtype: int
    
    .. py:method:: getPhysicalFromLogicalIndex(logicalIndex)
    
        :param logicalIndex: the logical (sparse / occupied) target index
        :return: the physical (contiguous) index
        :rtype: int
    
    .. py:method:: getAliasFromLogicalIndex(index)
    
        Given a logical (sparse / in-use) target index, returns the alias.
        
        :param int index: the logical (sparse / in-use) target index
        :return: The target alias.
        :rtype: str or None
    
    .. py:method:: getByAlias(alias)
    
        :param alias: the alias for the target
        :return: The target.
        :rtype: :class:`Target`
    
    .. py:method:: getByLogicalIndex(logicalIndex)
    
        :param logicalIndex: the logical (sparse / occupied) index for
            the target
        :raises IndexError: the index doesn't exist
        :return: The target.
        :rtype: :class:`Target`
    
    .. py:method:: getByPhysicalIndex(physicalIndex)
    
        :param logicalIndex: the physical (listed) index for the target
        :raises IndexError: the index doesn't exist
        :return: The target.
        :rtype: :class:`Target`
    
    .. py:method:: aliases()
    
        :return: All available target aliases. ``None`` aliases are skipped.
        :rtype: [str]
    
    .. py:method:: indices()
    
        :return: Logical (sparse) indices for the targets.
        :rtype: [int]
    
    .. py:method:: __getitem__(aliasOrLogicalIndex)
    
        Retrieves a target by alias or logical (sparse / occupied) index.
        
        :param aliasOrLogicalIndex: the alias or logical (sparse /
            occupied) index
        :type aliasOrLogicalIndex: str, int
        :return: The target.
        :rtype: :class:`Target`
    
    .. py:method:: __len__()
    
        :return: The number of targets.
        :rtype: int
    
    .. py:method:: __iter__()
    
        Yields :class:`Target` instances.
    
    .. py:method:: add(targetGeo, alias=None, topologyCheck=False, transform=None, tangentSpace=None, initWeight=0.0, index=None)
    
        Adds a blend shape target.
        
        :param targetGeo: the target geometry
        :type targetGeo: str, :class:`~paya.runtime.nodes.GeometryShape`,
            :class:`~paya.runtime.nodes.Transform`
        :param alias: an optional alias for the target; if omitted, defaults
            to the geometry's base name
        :type alias: None, str
        :param bool topologyCheck/tc: check topology when applying; defaults
            to False
        :param transform/tr: if this is provided, and the blend shape node is
            in 'post-deformation' mode, a transform-space target will be
            configured; defaults to None
        :type transform/tr: None, str, :class:`~paya.runtime.nodes.DagNode`
        :param bool tangentSpace/ts: if the blend shape node is in
            'post-deformation' mode, configure a tangent-space target;
            defaults to False
        :param float initWeight/iw: the blend shape weight value on
            creation; defaults to 0.0
        param int index/i: a preferred logical (sparse) index for the target;
            this mustn't already exist; if omitted, defaults to the next non-
            contiguous index.
        :raises RuntimeError:
            -   both *transform* and *tangent* were specified
            -   either *transform* or *tangent* were specified and the blend
                shape node is not in 'post-deformation' mode
            -   the requested or derived alias is already in use
            -   the requested logical index is already in use
        :return: The target instance.
        :rtype: :class:`Target`
    
    .. py:method:: __setitem__(aliasOrLogicalIndex, shape)
    
        Performs quick target editing via direct geometry assignments. Note
        that, if a matching item is found, any existing inbetween shapes will
        be removed. To preserve them, perform the same operation on a
        subtarget via :class:`Target` instead.
        
        :param aliasOrLogicalIndex: the target alias or logical
            (sparse / occupied) index
        :type aliasOrLogicalIndex: str, int
        :param shape: the shape to assign
        :type shape: str, :class:`~paya.runtime.nodes.GeometryShape`,
            :class:`~paya.runtime.nodes.Transform`,
    
    .. py:method:: removeByAlias(alias)
    
        Removes a target by alias.
        
        :param str alias: the target alias
        :return: ``self``
        :rtype: :class:`Targets`
    
    .. py:method:: removeByPhysicalIndex(physicalIndex)
    
        Removes a target by physical (contiguous) index.
        
        :param int logicalIndex: the physical (contiguous) index
        :return: ``self``
        :rtype: :class:`Targets`
    
    .. py:method:: removeByLogicalIndex(logicalIndex)
    
        Removes a target by logical (sparse / occupied) index.
        
        :param int logicalIndex: the logical (sparse / occupied) index
        :return: ``self``
        :rtype: :class:`Targets`
    
    .. py:method:: remove(target)
    
        Removes a target.
        
        :param target: the target to remove
        :type target: :class:`Target`
        :return: ``self``
        :rtype: :class:`Targets`
    
    .. py:method:: __delitem__(aliasOrLogicalIndex)
    
        Removes a target by alias or logical (sparse / occupied) index.
        
        :param aliasOrLogicalIndex: the alias or logical index
        :type aliasOrLogicalIndex: str, int
    
    .. py:method:: clear()
    
        Removes all targets.
        
        :return: ``self``
        :rtype: :class:`Targets`