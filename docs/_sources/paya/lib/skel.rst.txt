=============
paya.lib.skel
=============

.. py:module:: paya.lib.skel

.. py:class:: Chain(*joints)

    .. py:staticmethod:: __new__(*joints)
    
        Create and return a new object.  See help(type) for accurate signature.
    
    .. py:method:: __init__(*joints)
    
        :param \*joints: the joint content for the
            :class:`~paya.lib.skel.Chain` instance
    
    .. py:classmethod:: getFromStartEnd(startJoint, endJoint)
    
        :param startJoint: the root joint for the chain
        :type startJoint: str, :class:`~paya.nodetypes.joint.Joint`
        :param endJoint: the end (tip) joint for the chain
        :type endJoint: str, :class:`~paya.nodetypes.joint.Joint`
        :return: A chain from the start joint to the end joint, inclusively.
        :rtype: :class:`Chain`
    
    .. py:classmethod:: getFromRoot(rootJoint)
    
        :param startJoint: the root joint for the chain
        :type startJoint: str, :class:`~paya.nodetypes.joint.Joint`
        :return: A chain from the specified root joint. The chain will
            terminate before the first branch.
        :rtype: :class:`Chain`
    
    .. py:classmethod:: createFromMatrices(matrices, under=None)
    
        Creates a chain from matrices. The joints will match the matrices
        exactly; no attempt is made to orient the chain.
        
        :param matrices: the matrices to use
        :param under/u: an optional parent for the chain; defaults to None
        :return: :class:`Chain`
    
    .. py:classmethod:: createFromPoints(points, upVector, downAxis='y', upAxis='x', under=None, tolerance=1e-07)
    
        Builds a chain from points. The side ('up') axis will be calculated
        using cross products, but those will be biased towards the reference
        up vector.
        
        :param points: a world position for each joint
        :param upVector: the reference up vector
        :param str downAxis/da: the 'bone' axis; defaults to
            ``paya.config.defaultDownAxis``
        :param str upAxis/ua: the axis to map to the up vector; defaults to
            ``paya.config.defaultUpAxis``
        :param under/u: an optional parent for the chain; defaults to None
        :param float tolerance/tol: see
            :func:`paya.lib.mathops.getAimingMatricesFromPoints`
        :return: The constructed chain.
        :rtype: :class:`Chain`
    
    .. py:classmethod:: createFromCurve(curve, numberOrFractions, upCurve=None, upVector=None, downAxis='y', upAxis='x', tolerance=1e-07)
    
        Draws a chain (once) along a curve. Either 'upCurve' or 'upVector'
        must be provided.
        
        :param curve: the curve along which to distribute joints
        :type curve: str or :class:`~pymel.core.general.PyNode`
        :param numberOrFractions: this can either be a list of length
            fractions, or a number
        :param upCurve/upc: a curve to aim towards; defaults to None
        :type upCurve/upc: str or :class:`~pymel.core.general.PyNode`
        :param upVector/upv: a reference up vector
        :type upVector/upv: list, tuple or
            :class:`~paya.datatypes.vector.Vector`
        :param str downAxis/da: the 'bone' axis; defaults to
            ``paya.config.defaultDownAxis``
        :param str upAxis/ua: the axis to map to the up vector(s); defaults to
            ``paya.config.defaultUpAxis``
        :param float tolerance/tol: see
            :func:`paya.lib.mathops.getAimingMatricesFromPoints`
        :return: The constructed chain.
        :rtype: :class:`Chain`
    
    .. py:method:: orient(upVector, downAxis='y', upAxis='x', tolerance=1e-07)
    
        Orients this chain.
        
        :param upVector: a reference up vector
        :type upVector: list, :class:`~paya.datatypes.vector.Vector`
        :param str downAxis/da: the aiming (bone) axis; defaults to
            :attr:`paya.config.defaultDownAxis`
        :param str upAxis: the axis to map to the up vector; defaults to
            :attr:`paya.config.defaultUpAxis`
        :param float tolerance/tol: see
            :func:`paya.lib.mathops.getAimingMatricesFromPoints`
        :return: ``self``
        :rtype: :class:`Chain`
    
    .. py:method:: bones()
    
        :return: A :class:`~paya.lib.skel.Bone` instance for every joint pair
            in the chain.
        :rtype: :class:`~paya.lib.skel.Bone`
    
    .. py:method:: points(plug=False)
    
        :param bool plug/p: return attributes instead of values; defaults to
            False
        :return: A world position for each joint in this chain.
        :rtype: :class:`list` of :class:`~paya.datatypes.point.Point`
    
    .. py:method:: contiguous()
    
        :return: True if every member of this chain is a child of its
            predecessor, otherwise False.
        :rtype: bool
    
    .. py:method:: roots()
    
        :return: The first joint, and any member which is not a child of its
            predecessor.
        :rtype: list
    
    .. py:method:: skinClusters()
    
        :return: Any skinClusters associated with any joint in this chain, in
            no particular order.
        :rtype: list
    
    .. py:method:: ikHandles()
    
        :return: IK handles affecting this chain.
        :rtype: :class:`list` of :class:`~paya.nodetypes.ikHandle.IkHandle`
    
    .. py:method:: downAxis()
    
        :return: The 'bone' axis of this chain (e.g. 'x')
        :rtype: str
    
    .. py:method:: rename(*elems, inheritName=True, suffix=None, start=1)
    
        Renames this chain. Numbers will be added before the suffix.
        
        :param \*elems: one or more name elements
        :type \*elems: list, str, int
        :param bool inheritName/inn: inherit from
            :class:`~paya.lib.names.Name` blocks; defualts to True
        :param bool suffix/suf: if string, append; if True, apply the joint
            suffix; if False; omit suffix; defaults to
            :attr:`paya.config.autoSuffix`
        :param int start: the number to start from; defaults to 1
        :return: ``self``
    
    .. py:method:: compose()
    
        Ensures that every member of this chain is a child of its predecessor.
    
    .. py:method:: explode()
    
        Reparents every joint under the parent of the first joint.
    
    .. py:method:: appendChain(otherChain, replaceTip=True)
    
        This is an in-place operation. Splices ``otherChain`` to the bottom of
        this chain and updates the membership.
        
        :param otherChain: the chain to append to this one
        :type otherChain: list or :class:`Chain`
        :param bool replaceTip/rt: replace this chain's tip joint; defaults
            to True
        :return: ``self``
        :rtype: :class:`Chain`
    
    .. py:method:: reset()
    
        Sets rotations on every joint of this chain to [0.0, 0.0, 0.0].
        
        :return: ``self``
    
    .. py:method:: createIkHandle(solver=None, **createOptions)
    
        Creates an IK handle for this chain.
        
        :param str solver/sol: the solver to use; defaults to 'ikRPsolver' if
            this chain has more than two joints, otherwise 'ikSCsolver'
        :param \*\*createOptions: all overflow arguments are forwarded to
            :meth:`~paya.nodetypes.ikHandle.IkHandle.create`
        :return: The IK handle.
        :rtype: :class:`~paya.nodetypes.ikHandle.IkHandle`
    
    .. py:method:: createIkHandles()
    
        Creates One IK handle per bone in this chain. The IK handles will
        all use a single-chain solver.
        
        :return: The IK handles
        :rtype: :class:`list` of :class:`~paya.nodetypes.ikHandle.IkHandle`
    
    .. py:method:: __repr__()
    
        Return repr(self).

.. py:class:: Bone(*joints)

    A specialised subclass of :class:`~paya.lib.skel.Chain` for two-joint
    chains.

.. py:class:: Triad(*joints)

    A specialised subclass of :class:`~paya.lib.skel.Chain` for three-joint
    chains.