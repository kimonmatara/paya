=================
paya.lib.controls
=================

.. py:module:: paya.lib.controls

.. py:function:: getControlShapes(control)

    :param control: the control to inspect
    :type control: str or :class:`~paya.nodetypes.transform.Transform`
    :return: Non-intermediate curve and locator shapes under the control.
    :rtype: [:class:`~paya.nodetypes.nurbsCurve.NurbsCurve` or
        :class:`~paya.nodetypes.locator.Locator`]

.. py:function:: getShapeMacroBundleFromControl(control)

    :param control: The control to inspect.
    :type control: str, :class:`~paya.nodetypes.transform.Transform`
    :return: A list of macros for the non-intermediate curve and locator
        shapes under the specified control.
    :rtype: list of dict

.. py:function:: normalizePoints(points)

    Normalizes shape points so that they fit inside a unit cube.
    
    :param points: the points to normalize
    :type points: list
    :return: The normalized points.
    :rtype: list of :class:`~paya.datatypes.point.Point`

.. py:function:: normalizeMacro(macro)

    In-place operation. Normalizes any point information inside *macro*.
    See :func:`normalizePoints`.
    
    :param dict macro: the macro to edit

.. py:function:: applyShapeMacroBundleToControls(bundle, controls, replace=False)

    Uses a list of macros to create shapes under a control. Existing
    colors and visibility inputs will be replicated.
    
    :param bundle: a list of control shape macros
    :type bundle: list of dict
    :param list controls: the controls to add shapes to
    :param bool replace/rep: delete existing shapes on the destination
        controls
    :return: list of :class:`~paya.nodetypes.shape.Shape`

.. py:class:: ControlShapesLibrary(*args, **kwargs)

    .. py:staticmethod:: __new__(*args, **kwargs)
    
        Create and return a new object.  See help(type) for accurate signature.
    
    .. py:method:: __init__()
    
        Initialize self.  See help(type(self)) for accurate signature.
    
    .. py:method:: load()
    
        Loads the library content fromn ``paya/lib/ctrlshapes.json``.
        
        :return: ``self``
    
    .. py:method:: dump()
    
        Dumps the library content into ``paya/lib/ctrlshapes.json``.
        
        :return: ``self``
    
    .. py:method:: applyToControls(name, controls, replace=True)
    
        Adds shapes to the specified controls from the named library entry.
        
        :param name: the name of the library entry to retrieve
        :param list controls: the controls to add shapes to
        :param bool replace/rep: replace existing shapes on the controls;
            defaults to True
        :return: The newly-generated control shape nodes.
        :rtype: list of :class:`~paya.nodetypes.shape.Shape`
    
    .. py:method:: addFromControl(control, name)
    
        Captures shape macros from the specified control and adds them under
        a new entry in the library.
        
        .. warning::
        
            If the name already exists in the library, it will be overwritten.
        
        .. note::
        
            Changes are not saved into ``paya/lib/ctrlshapes.json`` until
            :meth:`~paya.lib.controls.ControlShapesLibrary.dump` is called.
        
        :param control: the control to inspect
        :type control: str, :class:`~paya.nodetypes.transform.Transform`
        :param str name: the name for the new entry
        :raises NoControlShapesError: no control shapes were found under the
            control
        :return: ``self``

.. py:class:: ControlShapesManager(owner, attrName)

    Implements the ``controlShapes`` / ``cs`` interface attribute on
    :class:`~paya.nodetypes.transform.Transform`.
    
    'Control shapes' comprise any non-intermediate curve or locator shape
    under a transform.
    
    -   To copy shapes and / or color, use :meth:`copyTo`.
    -   To transform shapes, use :meth:`rotate` and :meth:`scale`.
    -   To assign shapes from the library, use :meth:`setFromLib`.
    -   To save shapes *into* the library, use :meth:`addToLib`.
    -   To interactively cycle through shapes, call :meth:`cycle` repeatedly.

    .. py:method:: __iter__()
    
        :return: an iterator of non-intermediate curve and locator shapes
        :rtype: iterator of :class:`~paya.nodetypes.shape.Shape`
    
    .. py:method:: __len__()
    
        :return: the number of non-intermediate curve and locator shapes under
            this control
        :rtype: int
    
    .. py:method:: __getitem__(index)
    
        :param index: the index of the non-intermediate curve or locator shape
            to retrieve
        :return: A non-intermediate curve or locator shape.
        :rtype: :class:`~paya.nodetypes.shape.Shape`
    
    .. py:method:: copyTo(*destControls, replace=True, worldSpace=False, mirrorAxis=None, color=None, shape=None)
    
        Copies control shapes and / or color from this control to one or more
        destination controls. The 'shape' and 'color' flags can be defined by
        omission, Maya-style; for example, to copy only color, just pass
        ``col=True``, and 'shape' will be set to ``False`` automatically
        unless explicitly set.
        
        :param bool shape/sh: copy shapes; if this is ``False``, all other
            arguments except ``color`` are ignored
        :param bool color/col: copy color
        :param \*destControls: one or more controls to copy shapes to
        :type \*destControls: list, str,
            :class:`~paya.nodetypes.transform.Transform`
        :param bool replace/rep: remove existing shapes on the destination
            controls; defaults to True
        :param bool worldSpace/ws: copy shapes in world space; defaults to
            False
        :param mirrorAxis/ma: a positive axis to flip when copying in local
            space, or along which to mirror when copying in world space, for
            example 'x';  defaults to ``None``
        :type mirrorAxis/ma: ``None``, str
        :return: The new control shapes.
        :rtype: list of :class:`~paya.nodetypes.shape.Shape`
    
    .. py:method:: getColor()
    
        :return: The ``overrideColor`` value of the first encountered shape
            with overrides enabled, or ``None`` if no shapes had overrides
            enabled.
        :rtype: NoneType or int
    
    .. py:method:: setColor(index)
    
        Sets ``overrideColor`` (by index) on all non-intermediate curve and
        locator shapes under this control.
        
        :param int index: the color index to apply
        :return: ``self``
    
    .. py:method:: clearColor(disableOverrides=True)
    
        Resets the override color on all control shapes.
        
        :param bool disableOverrides/dis: set ``overrideEnabled`` to False
            too; defaults to True
        :return: ``self``
    
    .. py:method:: clear()
    
        Removes all control shapes.
        :return: ``self``
    
    .. py:method:: __delitem__(index)
    
        :param int index: the index of the control shape to delete
    
    .. py:method:: scale(scale)
    
        Scales control shapes in local space.
        
        :param scale: an iterable of three scale values
        :type scale: list, tuple, :class:`~pymel.core.datatypes.Array`
        :return: ``self``
    
    .. py:method:: rotate(rotation)
    
        Rotates control shapes in local space. Locator shapes won't be rotated,
        but their ``localPosition`` will. Note that rotation is expected in
        degrees.
        
        :param rotation: an iterable of three rotation values, in degrees
        :type rotation: list, tuple, :class:`~pymel.core.datatypes.Array`
        :return: ``self``
    
    .. py:method:: setFromLib(name)
    
        Sets control shapes to the named library entry.
        
        :param str name: the name of the library entry, e.g. 'cube'
        :return: The newly-generated control shapes.
        :rtype: list of :class:`~paya.nodetypes.shape.Shape`
    
    .. py:method:: addToLib(name, dump=True)
    
        Captures control shapes into a library entry. If the library entry
        already exists it will be overwritten.
        
        :param str name: the name of the new library entry
        :param bool dump: write the shapes library to disk immediately;
            defaults to True
        :return: ``self``
    
    .. py:method:: cycle(backward=False)
    
        Steps through the library alphabetically and applies a different shape
        on each invocation. Useful for trying out different shapes quickly.
        
        :param bool backward/back: cycle backwards instead of forwards;
            defaults to False
        :return: The newly-generated control shapes.
        :rtype: list of :class:`~paya.nodetypes.shape.Shape`

.. py:function:: createControl(name=None, under=None, shape='cube', size=1.0, color=None, worldMatrix=None, keyable=None, channelBox=None, rotateOrder='xyz', asControl=True, offsetGroups='offset', pickWalkParent=None)

    Creates rig controls. Available on :mod:`paya.runtime`.
    
    :param name/n: one or more name elements
    :type name/n: None, str, int, list
    :param under/u: an optional parent for the control; defaults to None
    :type under/u: None, str, :class:`~paya.nodetypes.transform.Transform`
    :param str shape/sh: the name of a library shape to apply to the control;
        defaults to 'cube'
    :param color/col: an optional override color index for the control;
        defaults to None
    :type color/col: int, None
    :param float size/sz: a uniform scaling factor for the control shape;
        defaults to 1.0
    :param worldMatrix/wm: the world matrix for the control; if this is
        omitted then, if ``under`` is provided, the matrix is copied from the
        destination parent; otherwise, it defaults to the identity matrix
    :type worldMatrix/wm: list, :class:`~paya.datatypes.matrix.Matrix`, None
    :param list keyable/k: a list of channels to set to keyable on the
        control
    :param list channelBox/cb: a list of channels to set to settable on the
        control
    :param rotateOrder/ro: the control's rotate order; defaults to 'xyz'
    :type rotateOrder/ro: str, int
    :param bool asControl/ac: if this is ``False``, create the control as a
        group with no shapes and omit the controller tag; defaults to True
    :param offsetGroups: the suffixes of one or more offset groups to create;
        defaults to 'offset'
    :type offsetGroups: list, str
    :param pickWalkParent/pwp: an optional pick-walk parent for this control;
        ignored if *asControl* is False; defaults to None
    :type pickWalkParent/pwp: str,
        :class:`~paya.nodetypes.dependNode.DependNode`
    :return: The generated control.
    :rtype: :class:`~paya.nodetypes.transform.Transform`