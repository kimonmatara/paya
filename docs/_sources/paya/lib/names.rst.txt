==============
paya.lib.names
==============

.. py:module:: paya.lib.names

Node-naming utilities, usually called indirectly.

.. py:function:: legalise(name)

    Modifies a string so that Maya will accept it as a node name.
    
    :param str name: the string to conform
    :return: The Maya name.
    :rtype: :class:`str`

.. py:function:: conformElems(*elems, padding=<undefined>)

    Cleans up user name elements wrangled by :class:`Name`.
    
    :param \*elems: one or more name elements, packed or unpacked
    :type \*elems: int, str
    :param padding/pad: padding for any integer elements; defaults
        to ``config['padding']``
    :return: The conformed elements.
    :rtype: list

.. py:function:: shorten(name, stripNamespace=False, stripDagPath=False, stripTypeSuffix=False)

    Shortens a Maya name to various degrees. The name will be returned as-is
    unless one or more flags are set to ``True``.
    
    :param str name: the name to process
    :param bool stripNamespace/sns: remove namespace information; defaults to
        False
    :param bool stripDagPath/sdp: remove DAG path information; defaults to
        False
    :param bool stripTypeSuffix/sts: removes anything that looks like a type
        suffix; defaults to False
    :return: the modified name
    :rtype: str

.. py:class:: Name(*elems, suffix=<undefined>, padding=<undefined>, inherit=True, namespace=<undefined>, relativeNames=<undefined>, allowUnprefixedSuffixes=<undefined>)

    .. rubric:: Inheritance

    :class:`~contextlib.ContextDecorator`

    Context manager. Accumulates prefixes for default node names, and
    provides other useful overrides.
    
    This context manager can also be used as a decorator:
    
    .. code-block:: python
    
        @Name('build')
        def build(*args, **kwargs):
            pass
    
    Inside list comprehensions, it would take this form:
    
    .. code-block:: python
    
        locs = [Name('point', x+1, padding=3)(r.nodes.Locator.createNode)() for x in range(20)]
        # Produces point_001_LOCT, point_002_LOCT etc.
    
    :param \*elems: one or more name elements to combine into a prefix
    :type \*elems: :class:`str`, :class:`int`
    :param suffix/suf: if this is a string, it will be used a suffix for all
        nodes; if it's ``True``, appropriate suffixes will be looked up;
        if it's ``False``, no suffixes will be applied; defaults to
        enclosing overrides, or the namesake configuration flag
    :type suffix/suf: :class:`str`, :class:`bool`
    :param padding/pad: the padding depth for any integer elements;
        defaults to enclosing overrides, or the namesake configuration
        flag
    :type padding/pad: :class:`int`
    :param bool inherit/i: inherit elements from enclosing :class:`Name`
        blocks; defaults to ``True``
    :param namespace/ns: set the namespace for the block; if omitted,
        no namespace will be set
    :type namespace/ns: :class:`str`
    :param bool relativeNames/rel: switches to relative name lookups for
        the block; defaults to enclosing overrides
    :param bool allowUnprefixedSuffixes/aus: where no name elements have
        been accumulated, allows, for example, a transform to be named
        ``XFRM`` rather than ``transform1``; defaults to enclosing
        overrides or the namesake configuration flag

    .. py:classmethod:: make(*elems, nodeType=None, transform=None, suffix=<undefined>, allowUnprefixedSuffixes=<undefined>, padding=<undefined>, inherit=True, control=False)
    
        Constructs Maya node names.
        
        :param \*elems: one or more name elements to combine into a prefix
        :type \*elems: :class:`str`, :class:`int`
        :param nodeType/nt: a hint for the node type suffix; defaults to
            ``None``
        :type nodeType/nt: :class:`str`, ``None``
        :param bool transform/xf: indicate that the name is intended for a
            transform; defaults to ``None``
        :param suffix/suf: if this is a string, it will be used a suffix for all
            nodes; if it's ``True``, appropriate suffixes will be looked up;
            if it's ``False``, no suffixes will be applied; defaults to
            enclosing overrides, or the namesake configuration flag
        :type suffix/suf: :class:`str`, :class:`bool`
        :param bool allowUnprefixedSuffixes/aus: where no name elements have
            been accumulated, allows, for example, a transform to be named
            ``XFRM`` rather than ``transform1``; defaults to enclosing
            overrides or the namesake configuration flag
        :param padding/pad: the padding depth for any integer elements;
            defaults to enclosing overrides, or the namesake configuration
            flag
        :type padding/pad: :class:`int`
        :param bool inherit/i: inherit name elements from :class:`Name`
            blocks; defaults to ``True``
        :param bool control/ct: indicate that the name is for a control;
            defaults to ``False``
        :return: The constructed node name.
        :rtype: :class:`str`