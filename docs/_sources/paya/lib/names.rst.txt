==============
paya.lib.names
==============

.. py:module:: paya.lib.names

Node-naming utilities, usually called indirectly by custom class methods.

.. py:function:: legalise(name)

    Modifies a string so that Maya will accept it as a node name.
    
    :param str name: the string to conform
    :return: The Maya name.

.. py:function:: conformElems(*elems)

    Cleans up user name elements, typically specified through ``*args``
    and / or the ``name/n`` keyword argument.
    
    :param \*elems: one or more name elements, packed or unpacked
    :type \*elems: int, str
    :return: The conformed elements.
    :rtype: list

.. py:class:: Name(*elems)

    Context manager. Accumulates name elements hierarchically.
    
    :param elems: one or more name elements, packed or unpacked
    :type elems: int, str

    .. py:method:: __init__(*elems)
    
        Initialize self.  See help(type(self)) for accurate signature.

.. py:function:: make(*elems, name=None, inheritName=True, suffix=None, node=None, nodeType=None)

    Constructs Maya node names.
    
    :param \*elems: one or more name elements
    :type \*elems: int, str, list
    :param name/n: elements passed-through via a ``name`` argument;
        these will always be prepended to \*elems; defaults to None
    :type name/n: int, str, list, None
    :param bool inheritName/inn: inherit names from :class:`Name` blocks;
        defaults to True
    :param bool suffix/suf: if string, append; if ``True``, look up a type
        suffix; if ``False``, omit suffix; defaults to
        :attr:`~paya.config.autoSuffix`
    :param node: ignored if ``nodeType`` has been provided; a node to inspect
        to determine the node type suffix; defaults to None
    :type node: None, str, :class:`~pymel.core.general.PyNode`
    :param nodeType/nt: a reference node type for the suffix lookups; defaults
        to None
    :type nodeType/nt: None, str
    :return: A Maya node name.
    :rtype: str