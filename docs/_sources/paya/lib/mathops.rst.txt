================
paya.lib.mathops
================

.. py:module:: paya.lib.mathops

.. py:function:: isVectorValueOrPlug(item)

    :param item: the item to inspect
    :return: ``True`` if *item* is a vector value or attribute, otherwise
        False
    :rtype: bool

.. py:class:: NativeUnits

    Context manager. Switches Maya to centimetres and radians.

.. py:function:: nativeUnits(f)

    Decorator version of :class:`NativeUnits`.

.. py:function:: floatRange(start, end, numValues)

    A variant of Python's :class:`range` for floats.
    
    :param float start: the minimum value
    :param float end: the maximum value
    :param int numValues: the number of values to generate
    :return: A list of float values between ``start`` and ``end``,
        inclusively.
    :rtype: list

.. py:class:: LinearInterpolator(*args, **kwargs)

    Simple, dict-like interpolator implementation, similar to a linear
    animation curve in Maya. Works with any value type that can be handled by
    :func:`pymel.util.arrays.blend`, but types should not be mixed.
    
    :Example:
    
        .. code-block:: python
    
            interp = LinearInterpolator()
            interp[10] = 30
            interp[20] = 40
            print(interp[11])
            # Result: 31.0

.. py:function:: floatRange(start, end, numValues)

    A variant of Python's :class:`range` for floats.
    
    :param float start: the minimum value
    :param float end: the maximum value
    :param int numValues: the number of values to generate
    :return: A list of float values between ``start`` and ``end``,
        inclusively.
    :rtype: list

.. py:function:: chaseNones(source)

    Resolves ``None`` members in an iterable by filling in with neighbouring
    values. If the first member is ``None``, the next defined value is used.
    If any internal member is ``None``, the last resolved value is used.
    
    :param source: the iterable to fill-in
    :return: A list with no ``None`` members.
    :rtype: list

.. py:function:: blendNones(source, ratios=None)

    A blending version of :func:`chaseNones`.
    
    :param source: the iterable to fill-in
    :param ratios: if provided, it should be a list of ratios from 0.0 to
        1.0 (one per member) to bias the blending; if omitted, it will be
        autogenerated using :func:`floatRange`; defaults to None
    :return: A list with no ``None`` members.
    :rtype: list

.. py:function:: resolveNumberOrFractionsArg(arg)

    Loosely conforms a ``numberOrFractions`` user argument. If the
    argument is an integer, a range of floats is returned. Otherwise,
    the argument is passed through without further checking.

.. py:function:: expandVectorArgs(*args)

    Expands *args*, stopping at anything that looks like a vector value
    or plug.
    
    :param \*args: the arguments to expand
    :return: The expanded arguments.

.. py:function:: conformVectorArg(arg, listLength=None)

    Conforms *arg* into a single vector value or plug, or to a list of vectors
    of the required length (to assign, say, a reference vector to every point
    in a chaining operation).
    
    This is loosely checked. Edge cases, like the user passing non-vector
    values, aren't caught.
    
    :param arg: the user vector argument to wrangle
    :type arg: tuple, list, str, :class:`~paya.runtime.plugs.Vector`,
        :class:`~paya.runtime.data.Vector`
    :param listLength/ll: if this is specified, then the argument will be
        conformed, by iterable multiplication, to a list of this length;
        if it's omitted, a single vector will be returned; defaults to None
    :return: The conformed vector argument.
    :rtype: list, :class:`~paya.runtime.plugs.Vector`,
        :class:`~paya.runtime.data.Vector`

.. py:function:: multMatrices(*matrices)

    Performs efficient multiplication of any combination of matrix values or
    plugs. Consecutive values are reduced and consecutive plugs are grouped
    into ``multMatrix`` nodes.
    
    If any of the matrices are plugs, the return will also be a plug.
    Otherwise, it will be a value.
    
    :param \*matrices: the matrices to multiply (unpacked)
    :type \*matrices: :class:`~paya.runtime.data.Matrix`, :class:`~paya.runtime.plugs.Matrix`, list or str
    :return: The matrix product.
    :rtype: :class:`paya.runtime.data.Matrix` or :class:`paya.runtime.plugs.Matrix`

.. py:function:: createScaleMatrix(*args)

    Quick method to create static or dynamic scale matrices. Takes one, three
    or six arguments.
    
    :shorthand: ``csm``
    :param \*args:
        If one argument is passed, the same scaling factor will be applied to
        the XYZ base vectors.
    
        If three arguments are passed, they will each be applied to the XYZ
        base vectors.
    
        If six arguments are passed then they will be interpreted as
        *axis: scalar* pairs.
    
    :return: The scale matrix.
    :rtype: :class:`paya.runtime.data.Matrix` or
        :class:`paya.runtime.plugs.Matrix`.

.. py:function:: createMatrix(*rowHints, preserveSecondLength=False, thirdLength=None, translate=None, plug=None)

    Constructs static or dynamic transformation matrices.
    
    :shorthand: ``cm``
    
    :param \*rowHints: If provided, this must comprise exactly **four** or
        **five** arguments, in both cases passed as unpacked pairs of
        row identifier: vector input or value.
    
        If **four** arguments are passed, they will be used to construct an
        orthogonal matrix, with the first vector as the 'aim' and the second
        as the 'up', for example:
    
        .. code-block:: python
    
            matrix = r.createMatrix('y', loc1.t, 'x', loc2.t)
    
        If **six** arguments are passed, they will be used to directly
        populate the matrix rows. This may result in a non-orthornormal
        (shear) matrix.
    
        .. code-block:: python
    
            matrix = r.createMatrix('y', loc1.t, 'x', loc2.t, 'z', loc3.t)
    
        If this argument is omitted, an identity matrix will be returned.
    
    :param translate/t: A **translate** component for the matrix; this can be
        a point value or plug; defaults to None
    :type translate/t: :class:`str`, :class:`list`, :class:`tuple`,
        :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.data.Point`,
        :class:`~paya.runtime.plugs.Math3D`
    :param bool preserveSecondLength/psl: ignored if six arguments were passed;
        preserve the second vector's length when performing orthogonal
        construction; defaults to True
    :param thirdLength/tl: ignored is six arguments were passed; if provided,
        defines the third (derived) vector's length; defaults to None
    :type thirdLength/tl: None, :class:`float`, :class:`int`,
        :class:`~paya.runtime.plugs.Math1D`, :class:`str`
    :param bool plug/p: if you already know whether the passed arguments contain
        plugs, specify it here to avoid extraneous checks; if no arguments
        have been passed, this will specify whether the returned identity
        matrix is a plug or value; defaults to None
    :return: The constructed matrix.
    :rtype: :class:`paya.runtime.plugs.Matrix` or
        :class:`paya.runtime.data.Matrix`, depending on inputs.

.. py:function:: deflipVectors(vectors)

    Returns a list where each vector is flipped if that would bring it closer
    to the preceding one. This is a value-only method.
    
    :param vectors: the source vectors (values)
    :type vectors: [tuple, list, :class:`~paya.runtime.data.Vector`]
    :return: The deflipped vectors.
    :rtype: [:class:`~paya.runtime.data.Vector`]

.. py:function:: getAimVectors(points)

    :param points: the points
    :type points: [list, tuple, :class:`~paya.runtime.data.Point`,
        :class:`~paya.runtime.plugs.Vector`]
    :raises ValueError: Fewer than two points were provided.
    :return: Aiming vectors derived from the input points. The output list
        will always be one member shorter than the input list.

.. py:function:: pointsIntoUnitCube(points)

    :param points: the points to normalize
    :type points: [tuple, list, :class:`~paya.runtime.data.Point`]
    :return: The points, fit inside a unit cube.
    :rtype: [:class:`~paya.runtime.data.Point`]

.. py:function:: getFramedAimAndUpVectors(points, upVector, tolerance=1e-07)

    Value-only method.
    
    Returns paired lists of aim and up vectors based on points and
    *upVector*, which can be a single vector or one vector per point.
    
    The final up vectors are derived using cross products, and biased
    towards the provided hints. Where the points are in-line, cross products
    are either blended from neighbours or swapped out for the user up vectors.
    
    :param points: the starting points
    :type points: [tuple, list, :class:`~paya.runtime.data.Point`]
    :param upVector: one up hint vector, or one vector per point
    :type upVector: tuple, list, :class:`~paya.runtime.data.Vector`
    :param bool tolerance/tol: any cross products below this length will be
        interpolated from neighbours; defaults to 1e-7
    :return: A list of aim vectors and a list of up vectors.
    :rtype: ([:class:`~paya.runtime.data.Vector`],
        [:class:`~paya.runtime.data.Vector`])

.. py:function:: getChainedAimMatrices(points, aimAxis, upAxis, upVector, squashStretch=False, globalScale=None, framed=False, tolerance=1e-07)

    :param points: the starting points
    :param aimAxis: the matrix axes to align to the aiming vectors,
        for example '-y'.
    :param upAxis: the matrix axes to align to the resolved up vectors,
        for example 'x'
    :param upVector: either one up vector hint, or a list of up vectors
        (one per point)
    :type:
        tuple, list, :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.plugs.Vector`,
        [tuple, list, :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.plugs.Vector`]
    :param bool squashStretch: allow squash-and-stretch on the aiming vectors;
        defaults to False
    :param globalScale/gs: an optional plug for the scale component; defaults
        to None
    :param bool framed/fra: if there are no plugs in the passed
        parameters, perform cross product framing via
        :func:`getFramedAimAndUpVectors` (recommended when drawing chains
        with triads, for example legs); defaults to False
    :param float tolerance/tol: if *framed* is on, any cross products
        below this length will be interpolated from neighbours; defaults to
        1e-7
    :raises NotImplementedError: *framed* was requested but some of
        the arguments were plugs
    :return: Chained-aiming matrices, suitable for drawing or driving chains
        or control hierarchies.
    :rtype: [:class:`~paya.runtime.plugs.Matrix`]