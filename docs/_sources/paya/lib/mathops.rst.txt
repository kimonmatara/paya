================
paya.lib.mathops
================

.. py:module:: paya.lib.mathops

.. py:function:: absAxis(axis)

    Equivalent to:
    
    .. code-block:: python
    
        axis.strip('-')
    
    :param str axis: the axis to strip
    :return: The stripped axis.
    :rtype: :class:`str`

.. py:function:: missingAxis(*axes)

    Given two axes (lowercase), returns the missing one. Negative signs are
    stripped / ignored.
    
    :param \*axes: the two available axes
    :type \*axes: :class:`str`, :class:`list` [:class:`str`]
    :return: The missing axis.
    :rtype: :class:`str`

.. py:function:: inventRotateOrder(downAxis, upAxis)

    Returns an 'optimal' rotate order based on the given down and up axes.
    
    :param str downAxis: the down axis, e.g. ``'y'``
    :param str upAxis: the up axis, e.g. ``'x'``
    :return: The rotate order, e.g. ``'yxz'``.
    :rtype: :class:``str``

.. py:function:: degToUI(val)

    :param float val: An angle value in degrees.
    :return: If the UI is set to radians, *val* converted to radians;
        otherwise, the original *val*.
    :rtype: :class:`float`

.. py:function:: getUIAngleUnit()

    :return: The current angle unit. Note that this will be returned in a
        format that can be passed along to the data type constructors (e.g.
        'degrees') rather than how it's returned by
        :func:`~pymel.internal.pmcmds.currentUnit` (e.g. 'deg').
    :rtype: :class:`str`

.. py:function:: getUIDistanceUnit()

    :return: The current distance unit. Note that this will be returned in a
        format that can be passed along to the data type constructors (e.g.
        'centimeters') rather than how it's returned by
        :func:`~pymel.internal.pmcmds.currentUnit` (e.g. 'cm').
    :rtype: :class:`str`

.. py:function:: getUITimeUnit()

    :return: The current time unit. Note that this will be returned in a
        format that can be passed along to the data type constructors (e.g.
        '24FPS') rather than how it's returned by
        :func:`~pymel.internal.pmcmds.currentUnit` (e.g. 'film').
    :rtype: :class:`str`

.. py:function:: onRadians()

    :return: ``True`` if the UI is set to radians, otherwise ``False``.
    :rtype: ``bool``

.. py:function:: info(item, defaultUnitType=None, quiet=False)

    Returns a dict with the following keys (ordered):
    
    -   ``'item'``: The *item*, conformed to the most specific Paya type
        possible.
    
    -   ``'dimension'``: One of ``1``, ``2``, ``3``, ``4`` or ``16``.
    
    -   ``'unitType'``: One of ``'angle'``, ``'distance'``, ``'time'`` or
        ``None``.
    
    -   ``'isPlug'``: ``True`` or ``False``.
    
    Value conforming is performed in the following way:
    
    -   If *item* is a :class:`bool`, it's returned as-is.
    -   If *item* is a :class:`float` or :class:`int`, it's returned as-is
        unless a *defaultUnitType* is specified, in which case a
        :class:`~paya.runtime.data.Angle`,
        :class:`~paya.runtime.data.Distance` or
        :class:`~paya.runtime.data.Time` instance is returned. UI units
        are used in every case.
    -   If *item* is a list of floats or ints, then:
    
        -   If its dimension is 3 then, if *defaultUnitType* is set to
            ``'angle'``, it's instantiated as
            :class:`~paya.runtime.data.EulerRotation`; otherwise, as
            :class:`~paya.runtime.data.Vector`.
    
        -   If its dimension is 4, then it's always returned as a
            :class:`~paya.runtime.data.Quaternion`.
    
        -   If its dimension is 16, then it's always returned as a
            :class:`~paya.runtime.data.Matrix`.
    
        -   In all other cases, it's returned as a list with members intact.
    
    Plugs are returned as :class:`~paya.runtime.plugs.Attribute` instances,
    with the subtype / unit strictly based on :class:`~maya.OpenMaya.MPlug`
    analysis performed by :mod:`paya.pluginfo`.
    
    :param item: The item to inspect and conform.
    :param defaultUnitType/dut: one of ``'angle'``, ``'distance'``, ``'time'``
        or ``None``.
    :type defaultUnitType/dut: :class:`str`, ``None``
    :param bool quiet: don't throw an error if *item* can't be conformed to
        a math type, just pass-through the incomplete dictionary with the
        ``'item'`` field populated with the original item
    :return: The dictionary.
    :rtype: :class:`dict`

.. py:function:: floatRange(start, end, numValues)

    A variant of Python's :class:`range` for floats and float plugs.
    
    :param start: the minimum value
    :type start: float, :class:`~paya.runtime.plugs.Math1D`
    :param end: the maximum value
    :type end: float, :class:`~paya.runtime.plugs.Math1D`
    :param int numValues: the number of values to generate
    :return: A list of float values between ``start`` and ``end``,
        inclusively.
    :rtype: [:class:`float` | :class:`~paya.runtime.plugs.Math1D`]

.. py:class:: LinearInterpolator(*args, **kwargs)

    .. rubric:: Inheritance

    :class:`~collections.UserDict` :class:`~collections.abc.MutableMapping` :class:`~collections.abc.Mapping` :class:`~collections.abc.Collection` :class:`~collections.abc.Sized` :class:`~collections.abc.Iterable` :class:`~collections.abc.Container`

    Simple, dict-like interpolator implementation, similar to a linear
    animation curve in Maya. Works with any value type that can be handled by
    :func:`pymel.util.arrays.blend`, but types should not be mixed.
    
    :Example:
    
        .. code-block:: python
    
            interp = LinearInterpolator()
            interp[10] = 30
            interp[20] = 40
            print(interp[11])
            # Result: 31.0

.. py:function:: chaseNones(source)

    Resolves ``None`` members in an iterable by filling in with neighbouring
    values. If the first member is ``None``, the next defined value is used.
    If any internal member is ``None``, the last resolved value is used.
    
    :param source: the iterable to fill-in
    :return: A list with no ``None`` members.
    :rtype: list

.. py:function:: blendNones(source, ratios=None)

    A blending version of :func:`chaseNones`.
    
    :param source: the iterable to fill-in
    :param ratios: if provided, it should be a list of ratios from 0.0 to
        1.0 (one per member) to bias the blending; if omitted, it will be
        autogenerated using :func:`floatRange`; defaults to None
    :return: A list with no ``None`` members.
    :rtype: list

.. py:function:: blendScalars(scalarA, scalarB, weight=0.5)

    Blends between two scalar values or plugs.
    
    :param scalarA: the first scalar
    :type scalarA: float, str, :class:`~paya.runtime.plugs.Math1D`
    :param scalarB: the second scalar
    :type scalarB: float, str, :class:`~paya.runtime.plugs.Math1D`
    :param weight/w: the weight; when this is at 1.0, *scalarB*
        will have fully taken over; defaults to 0.t
    :type weight/w: float, str, :class:`~paya.runtime.plugs.Math1D`
    :return:

.. py:function:: multMatrices(*matrices)

    Performs efficient multiplication of any combination of matrix values or
    plugs. Consecutive values are reduced and consecutive plugs are grouped
    into ``multMatrix`` nodes.
    
    If any of the matrices are plugs, the return will also be a plug.
    Otherwise, it will be a value.
    
    :param \*matrices: the matrices to multiply (unpacked)
    :type \*matrices: :class:`~paya.runtime.data.Matrix`, :class:`~paya.runtime.plugs.Matrix`, list or str
    :return: The matrix product.
    :rtype: :class:`paya.runtime.data.Matrix` or :class:`paya.runtime.plugs.Matrix`

.. py:function:: createMatrix(*rowHints, manageScale=True, preserveSecondLength=False, thirdLength=None, translate=None, plug=None)

    Constructs static or dynamic transformation matrices.
    
    :shorthand: ``cm``
    
    :param \*rowHints: If provided, this must comprise exactly **four** or
        **five** arguments, in both cases passed as unpacked pairs of
        row identifier: vector input or value.
    
        If **four** arguments are passed, they will be used to construct an
        orthogonal matrix, with the first vector as the 'aim' and the second
        as the 'up', for example:
    
        .. code-block:: python
    
            matrix = r.createMatrix('y', loc1.t, 'x', loc2.t)
    
        If **six** arguments are passed, they will be used to directly
        populate the matrix rows. This may result in a non-orthornormal
        (shear) matrix.
    
        .. code-block:: python
    
            matrix = r.createMatrix('y', loc1.t, 'x', loc2.t, 'z', loc3.t)
    
        If this argument is omitted, an identity matrix will be returned.
    
    :param translate/t: A **translate** component for the matrix; this can be
        a point value or plug; defaults to None
    :type translate/t: :class:`str`, :class:`list`, :class:`tuple`,
        :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.data.Point`,
        :class:`~paya.runtime.plugs.Math3D`
    :param bool manageScale/ms: set this to ``False`` to allow scale to be
        defined by incidental operations; useful when you intend to discard
        scale later anyway; defaults to ``True``
    :param bool preserveSecondLength/psl: ignored if six arguments were passed;
        preserve the second vector's length when performing orthogonal
        construction; defaults to True
    :param thirdLength/tl: ignored is six arguments were passed; if provided,
        defines the third (derived) vector's length; defaults to None
    :type thirdLength/tl: None, :class:`float`, :class:`int`,
        :class:`~paya.runtime.plugs.Math1D`, :class:`str`
    :param bool plug/p: if you already know whether the passed arguments contain
        plugs, specify it here to avoid extraneous checks; if no arguments
        have been passed, this will specify whether the returned identity
        matrix is a plug or value; defaults to None
    :return: The constructed matrix.
    :rtype: :class:`paya.runtime.plugs.Matrix` or
        :class:`paya.runtime.data.Matrix`, depending on inputs.

.. py:function:: createScaleMatrix(*args)

    Quick(er) method to create static or dynamic scale matrices. Takes one,
    three or six arguments.
    
    :shorthand: ``csm``
    :param \*args:
        If one argument is passed, the same scaling factor will be applied to
        the XYZ base vectors.
    
        If three arguments are passed, they will each be applied to the XYZ
        base vectors.
    
        If six arguments are passed then they will be interpreted as
        *axis: scalar* pairs.
    
    :return: The scale matrix.
    :rtype: :class:`paya.runtime.data.Matrix` or
        :class:`paya.runtime.plugs.Matrix`.

.. py:function:: deflipVectors(vectors)

    Returns a list where each vector is flipped if that would bring it closer
    to the preceding one. This is a value-only method.
    
    :param vectors: the source vectors (values)
    :type vectors: [tuple, list, :class:`~paya.runtime.data.Vector`]
    :return: The deflipped vectors.
    :rtype: [:class:`~paya.runtime.data.Vector`]

.. py:function:: getAimVectors(points)

    :param points: the points
    :type points: [list, tuple, :class:`~paya.runtime.data.Point`,
        :class:`~paya.runtime.plugs.Vector`]
    :raises ValueError: Fewer than two points were provided.
    :return: Aiming vectors derived from the input points. The output list
        will always be one member shorter than the input list.

.. py:function:: pointsIntoUnitCube(points)

    :param points: the points to normalize
    :type points: [tuple, list, :class:`~paya.runtime.data.Point`]
    :return: The points, fit inside a unit cube.
    :rtype: [:class:`~paya.runtime.data.Point`]

.. py:function:: getFramedAimAndUpVectors(points, upVector, tolerance=1e-07)

    Value-only method.
    
    Returns paired lists of aim and up vectors based on points and
    *upVector*, which can be a single vector or one vector per point.
    
    The final up vectors are derived using cross products, and biased
    towards the provided hints. Where the points are in-line, cross products
    are either blended from neighbours or swapped out for the user up vectors.
    
    :param points: the starting points
    :type points: [tuple, list, :class:`~paya.runtime.data.Point`]
    :param upVector: one up hint vector, or one vector per point
    :type upVector: tuple, list, :class:`~paya.runtime.data.Vector`
    :param bool tolerance/tol: any cross products below this length will be
        interpolated from neighbours; defaults to 1e-7
    :return: A list of aim vectors and a list of up vectors.
    :rtype: ([:class:`~paya.runtime.data.Vector`],
        [:class:`~paya.runtime.data.Vector`])

.. py:function:: getChainedAimMatrices(points, aimAxis, upAxis, upVector, squashStretch=False, globalScale=None, framed=False, tolerance=1e-07)

    :param points: the starting points
    :param aimAxis: the matrix axes to align to the aiming vectors,
        for example '-y'.
    :param upAxis: the matrix axes to align to the resolved up vectors,
        for example 'x'
    :param upVector: either one up vector hint, or a list of up vectors
        (one per point)
    :type:
        tuple, list, :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.plugs.Vector`,
        [tuple, list, :class:`~paya.runtime.data.Vector`, :class:`~paya.runtime.plugs.Vector`]
    :param bool squashStretch: allow squash-and-stretch on the aiming vectors;
        defaults to False
    :param globalScale/gs: an optional plug for the scale component; defaults
        to None
    :param bool framed/fra: if there are no plugs in the passed
        parameters, perform cross product framing via
        :func:`getFramedAimAndUpVectors` (recommended when drawing chains
        with triads, for example legs); defaults to False
    :param float tolerance/tol: if *framed* is on, any cross products
        below this length will be interpolated from neighbours; defaults to
        1e-7
    :raises NotImplementedError: *framed* was requested but some of
        the arguments were plugs
    :return: Chained-aiming matrices, suitable for drawing or driving chains
        or control hierarchies.
    :rtype: [:class:`~paya.runtime.plugs.Matrix`]

.. py:function:: parallelTransport(normal, tangents, fromEnd=False)

    Implements **parallel transport** as described in the
    `Houdini demonstration by Manuel Casasola Merkle
    <https://www.sidefx.com/tutorials/parallel-transport/>`_
    based on the `paper by Hanson and Ma
    <https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.65.7632&rep=rep1&type=pdf>`_.
    
    If any of the arguments are plugs, the outputs will be plugs as well. The
    first output normal is a pass-through of the *normal* argument.
    
    :param normal: the starting normal (or up vector)
    :type normal: list, tuple, :class:`~paya.runtime.data.Vector`,
        :class:`~paya.runtime.plugs.Vector`
    :param tangents: the tangent samples along the curve
    :type tangents: [list, tuple, :class:`~paya.runtime.data.Vector`,
        :class:`~paya.runtime.plugs.Vector`]
    :param bool fromEnd/fe: indicate that *normal* is at the end, not the
        start, of the sequence, and solve accordingly; defaults to False
    :return: The resolved normals / up vectors.
    :rtype: [:class:`paya.runtime.data.Vector`],
        [:class:`paya.runtime.plugs.Vector`]

.. py:function:: blendCurveNormalSets(normalsA, normalsB, tangents, ratios=None, unwindSwitch=0)

    Blends between two sets of normals along a curve. The number of
    tangents, normalsA, normalsB and ratios must be the same. If any inputs
    are plugs then the outputs will also be plugs.
    
    :param normalsA: the first set of normals
    :type normalsA: [list, tuple,
        :class:`~paya.runtime.data.Vector`,
        :class:`~paya.runtime.plugs.Vector`]
    :param normalsB: the first set of normals
    :type normalsB: [list, tuple,
        :class:`~paya.runtime.data.Vector`,
        :class:`~paya.runtime.plugs.Vector`]
    :param tangents: the curve tangents around which to rotate the normals
    :type tangents: [list, tuple,
        :class:`~paya.runtime.data.Vector`,
        :class:`~paya.runtime.plugs.Vector`]
    :param ratios/rat: per-normal blend ratios; if omitted, a uniform range of
        floats will be generated automatically; defaults to None
    :type ratios/rat: None, [float, :class:`~paya.runtime.plugs.Math1D`]
    :param unwindSwitch/uws: an integer value or attribute to pick between:
    
        - 0 for shortest angle unwinding (the default)
        - 1 for positive angle unwinding
        - 2 for negative angle unwinding
    
    :type unwindSwitch/uws: int, :class:`~paya.runtime.plugs.Math1D`
    :type unwindSwitch/uws: int, :class:`~paya.runtime.plugs.Math1D`
    :raises ValueError: Unequal argument lengths.
    :return: The blended set of curve normals.
    :rtype: :class:`~paya.runtime.data.Vector`,
        :class:`~paya.runtime.plugs.Vector`

.. py:function:: bidirectionalParallelTransport(startNormal, endNormal, tangents, ratios=None, unwindSwitch=0)

    Blends between a forward and backward parallel-transport solution. If
    either *startNormal* or *endNormal* are ``None``, the solution will
    only be performed in one direction and returned on its own.
    
    :param startNormal: the normal at the start of the blend range
    :type startNormal: list, tuple,
        :class:`~paya.runtime.data.Vector`,
        :class:`~paya.runtime.plugs.Vector`
    :param endNormal: list, tuple,
        :class:`~paya.runtime.data.Vector`,
        :class:`~paya.runtime.plugs.Vector`
    :param tangents: tangents along the blend range; one normal will
        be generated per tangent; the more tangents, the higher the
        accurace of the parallel transport solve
    :param ratios: if provided, should be a list of float values or plugs
        (one per tangent); if omitted, a uniform float range will be generated
        automatically; defaults to None
    :type ratios: None, [float, :class:`~paya.runtime.plugs.Math1D`]
    :param unwindSwitch/uws: an integer value or attribute to pick between:
    
        - 0 for shortest angle unwinding (the default)
        - 1 for positive angle unwinding
        - 2 for negative angle unwinding
    
    :type unwindSwitch/uws: int, :class:`~paya.runtime.plugs.Math1D`
    :raises ValueError: One of:
    
        - Unequal numbers of tangents and ratios (if provided)
        - Both *startNormal* and *endNormal* are ``None``
    
    :return: The normals.
    :rtype: [:class:`~paya.runtime.plugs.Vector`]

.. py:function:: bevelTriadPoints(points, bevelLength)

    Given three point values or plugs, returns four points, to include
    a 'bevel' cutoff of the specified length.
    
    .. warning::
    
        Beta; does *not* guard against reversals.
    
    :param points: three points
    :type points: :class:`list` [:class:`list` [:class:`float`],
        :class:`str`, :class:`~paya.runtime.data.Point`,
        :class:`~paya.runtime.plugs.Vector`]
    :param bevelLength: the length of the bevel side
    :type bevelLength: :class:`float`, :class:`~paya.runtime.plugs.Math1D`
    :return: Four points.
    :rtype: [:class:`~paya.runtime.data.Point`,
        :class:`~paya.runtime.data.Point`]

.. py:function:: unbevelTriadPoints(points)

    Reverses the result of :func:`bevelTriadPoints`.
    
    .. warning::
    
        Beta; does *not* guard against reversals.
    
    :param points: four points
    :type points: :class:`list` [:class:`list` [:class:`float`],
        :class:`str`, :class:`~paya.runtime.data.Point`,
        :class:`~paya.runtime.plugs.Vector`]
    :return: Three points.
    :rtype: [:class:`~paya.runtime.data.Point`,
        :class:`~paya.runtime.data.Point`,

.. py:function:: getBevelVector(v1, v2, upVector, forceUpVector=False)

    :param v1: the first vector
    :param v2: the second vector
    :param upVector: a fallback up vector to use when the two vectors
        are aligned.
    :return: Returns the 'connecting' (bevel) vector from *v1*
        to *v2*. The vector will be normalized.