================
paya.lib.mathops
================

.. py:module:: paya.lib.mathops

Defines supporting methods for maths rigging and, more broadly, mixed value /
plug workflows.

.. py:function:: getBaseVector(axis)

    Given an axis letter (or 't' for 'translate'), returns an appropriate
    :class:`~paya.datatypes.Vector` or :class:`~paya.datatypes.Point` instance.
    
    :param str axis: the axis for which to retrieve a
        :class:`~paya.datatypes.Vector` or :class:`~paya.datatypes.Point`;
        must be one of: 'x', 'y', 'z', '-x', '-y', '-z' or 't'
        (for 'translate')
    :return: The vector or point.
    :rtype: :class:`~paya.datatypes.Vector` or :class:`~paya.datatypes.Point`

.. py:function:: isTupleOrListOfScalarValues(x)

    :param x: the item to inspect
    :return: True if x is a tuple or list of scalar values, otherwise False.
    :rtype: bool

.. py:class:: NativeUnits

    Context manager. Switches Maya to centimetres and radians.

.. py:function:: nativeUnits(f)

    Decorator version of :class:`NativeUnits`.

.. py:function:: info(item)

    Returns a tuple of three members:
    -   The item conformed to the highest-level type available
    -   The item's mathematical dimension (e.g. 16 for matrices)
    -   ``True`` if the item is a plug, otherwise ``False``
    
    In short: item, dimension, isplug.
    
    :param item: the item to process
    :type item: any type
    :return: :class:`tuple`

.. py:function:: conform(x)

    If x is a **value**, then:
    
        - If its dimension is 3, it's returned as a :class:`~paya.datatypes.Vector`
        - If its dimension is 4, it's returned as a :class:`~paya.datatypes.Quaternion`
        - If its dimension is 16, it's returned as a :class:`~paya.datatypes.Matrix`
        - In all other cases, it's returned as-is
    
    If x is a **plug**, then it's returned as an instance of the appropriate
    :class:`~paya.plugtypes.Attribute`
    
    :param x: the item to conform
    :return: The conformed item.
    :rtype: :class:`~paya.datatypes.Vector`,
        :class:`~paya.datatypes.Quaternion`, :class:`~paya.datatypes.Matrix`
        or :class:`~paya.plugtypes.Attribute`

.. py:function:: multMatrices(*matrices)

    Performs efficient multiplication of any combination of matrix values or
    plugs. Consecutive values are reduced and consecutive plugs are grouped
    into ``multMatrix`` nodes.
    
    If any of the matrices are plugs, the return will also be a plug.
    Otherwise, it will be a value.
    
    :param \*matrices: the matrices to multiply (unpacked)
    :type \*matrices: :class:`Matrix`, :class:`AttributeMath16D`, list or str
    :return: The matrix product.
    :rtype: :class:`Matrix` or :class:`AttributeMath16D`