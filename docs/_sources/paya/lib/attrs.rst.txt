==============
paya.lib.attrs
==============

.. py:module:: paya.lib.attrs

.. py:function:: expandAttrListToParentsAndChildren(attrList, instances=True)

    Given a list of attributes, expands to include compound children.
    
    :param attrList: the list of attributes to expand
    :type attrList: list of str or
        :class:`~paya.plugtypes.attribute.Attribute`
    :param bool instances: return
        :class:`~paya.plugtypes.attribute.Attribute` instances rather than
        strings; defaults to True 
    :return: The expanded attribute list.
    :rtype: list of str or :class:`~paya.plugtypes.attribute.Attribute`

.. py:function:: reorder(node, *attrNames)

    Rebuilds attributes in the specified order. The attributes must be
    dynamic, animatable and not compounds or multis. Lock states are dodged
    and connections are preserved:
    
    :param node: the node that carries the attributes
    :type node: str, :class:`~paya.nodetypes.dependNode.DependNode`
    :param attrNames: the names of the attributes to reorder, in the preferred
        order
    :type attrNames: list of str, str
    :return: The rebuilt attributes.
    :rtype: list of :class:`~paya.plugtypes.attribute.Attribute`

.. py:class:: Section(sectionAttr, owner)

    .. py:method:: __init__(sectionAttr, owner)
    
        Initialize self.  See help(type(self)) for accurate signature.
    
    .. py:method:: node()
    
        :return: The owner node.
        :rtype: :class:`~paya.nodetypes.dependNode.DependNode`
    
    .. py:method:: attr()
    
        :return: The section attribute.
        :rtype: :class:`~paya.plugtypes.enum.Enum`
    
    .. py:method:: sendAbove(attrName)
    
        Send this section and its members above the specified attribute in
        the channel box.
        
        :param str attrName: the reference attribute name
        :return: ``self``
        :rtype: :class:`Section`
    
    .. py:method:: sendBelow(attrName)
    
        Send this section and its members below the specified attribute in
        the channel box.
        
        :param str attrName: the reference attribute name
        :return: ``self``
        :rtype: :class:`Section`
    
    .. py:method:: collect(*attrNames, top=False)
    
        :param attrNames: the names of the attributes to move into this
            section
        :type attrNames: list of str
        :param bool top: insert the attributes before existing members rather
            than after; defaults to False
        :return: ``self``
        :rtype: :class:`Section`
    
    .. py:method:: __str__()
    
        :return: The section name.
        :rtype: str
    
    .. py:method:: __repr__()
    
        Return repr(self).

.. py:class:: Sections(owner, attrName)

    .. py:method:: __getitem__(indexOrKey)
    
        :param indexOrKey: the section index or name
        :type indexOrKey: int or str
        :return: A manager object for the section.
        :rtype: :class:`Section`
    
    .. py:method:: names()
    
        :return: The names of all available sections.
        :rtype: list of str
    
    .. py:method:: __iter__()
    
        :return: an iterator of :class:`Section` objects
    
    .. py:method:: __len__()
    
        :return: the number of section attributes on the node
        :rtype: int
    
    .. py:method:: __contains__(sectionName)
    
        :param sectionName: the section name
        :return: True if the section name exists, otherwise False
    
    .. py:method:: add(sectionName)
    
        Creates a new attribute section.
        
        :param sectionName: the name of the section
        :return: A manager object for the new section.
        :rtype: :class:`Section`
    
    .. py:method:: __delitem__(indexOrKey)
    
        :param indexOrKey: can be a list index or a section name
        :type indexOrKey: str or int
    
    .. py:method:: clear()
    
        Removes all section attributes from the node. Member attributes are
        not removed.