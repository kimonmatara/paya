====================================
paya.nodetypes.dependNode.DependNode
====================================

.. py:module:: paya.nodetypes.dependNode

.. py:class:: DependNode(*args, **kwargs)

    .. py:method:: makeName(*elems, name=None, inheritNames=True, suffix=None)
    
        Generates a context-appropriate Maya name. Results will vary
        depending on whether this method is called on a class or on a
        node instance.
        
        :param \*elems: one or more name elements
        :param name/n: elements contributed via ``name`` keyword
            arguments; these will always be prepended; defaults to None
        :type name/n: None, str, int, or list
        :param suffix/suf: if string, append; if ``True``, look up a type
            suffix and apply it; if ``False``, omit; defaults to
            :attr:`~paya.config.autoSuffix`
        :type suffix/suf: None, bool, str
        :param bool inheritNames/inn: inherit names from
            :class:`~paya.lib.names.Name` blocks; defaults to True
        :return: The node name.
        :rtype: str
    
    .. py:classmethod:: createNode(name=None, suffix=None, inheritNames=True)
    
        Object-oriented version of :func:`pymel.core.general.createNode` with
        managed naming.
        
        :param name/n: one or more name elements; defaults to None
        :type name/n: None, str, int, or list
        :param suffix/suf: if string, append; if ``True``, look up a type
            suffix and apply it; if ``False``, omit; defaults to
            :attr:`~paya.config.autoSuffix`
        :type suffix/suf: None, bool, str
        :param bool inheritNames/inn: inherit names from
            :class:`~paya.lib.names.Name` blocks; defaults to True
        :return: The constructed node.
        :rtype: :class:`~pymel.core.general.PyNode`