====================================
paya.nodetypes.nurbsCurve.NurbsCurve
====================================

.. py:module:: paya.nodetypes.nurbsCurve

.. py:class:: NurbsCurve(*args, **kwargs)

    .. py:classmethod:: createFromMacro(macro, under=None, conformShapeNames=True, name=None, dispCV=False)
    
        Recreates a curve from the type of dictionary returned by
        :meth:`~paya.nodetypes.nurbsCurve.NurbsCurve.macro`.
        
        :param macro: the macro dictionary to use
        :param under/u: an optional parent for the curve; defaults to None
        :type under/u: None, str, :class:`~paya.nodetypes.transform.Transform`
        :param bool conformShapeNames/csn: ignored if *under* is None; clean
            up destination shape names after reparenting to the specified
            transform; defaults to True
        :param name/n: one or more name elements; defaults to None
        :type name/n: list, tuple, str
        :param bool dispCV/dcv: display curve CVs; defaults to False
        :return: The curve.
        :rtype: :class:`~paya.nodetypes.nurbsCurve.NurbsCurve`
    
    .. py:method:: macro(normalize=False)
    
        :param bool normalize/nr: normalize curve points (used by the shapes
            library); defaults to False
        :return: A simplified dictionary representation of this curve shape
            that can be used to reconstruct it. Point information will be in
            local (object) space. Name is ignored.
        :rtype: dict
    
    .. py:method:: takeClosestPoint(refPoint)
    
        :param refPoint: the reference point
        :return: The closest point along the curve to 'refPoint`.
        :rtype: :class:`~paya.datatypes.point.Point`
    
    .. py:method:: takePointAtParam(param)
    
        :param param: the parameter to sample
        :type param: float, int,
            :class:`~paya.comptypes.nurbsCurveParameter.NurbsCurveParameter`
        :return: A world-space point at the specified parameter.
        :rtype: :class:`~paya.datatypes.point.Point`
    
    .. py:method:: takeParamAtFraction(fraction)
    
        :param float fraction: the length fraction to sample
        :return: A parameter at the given length fraction.
        :rtype:
            :class:`~paya.comptypes.nurbsCurveParameter.NurbsCurveParameter`
    
    .. py:method:: takePointAtFraction(fraction)
    
        :param fraction: the length fraction to sample
        :return: A world-space point at the given length fraction.
        :rtype: :class:`~paya.datatypes.point.Point`
    
    .. py:method:: distributePoints(numberOrFractions)
    
        Return world-space points distributed along the length of the curve.
        
        :param numberOrFractions: this can either be a list of length
            fractions, or a number
        :type numberOrFractions: tuple, list or int
        :return: The distributed points.
        :rtype: :class:`list` of :class:`~paya.datatypes.point.Point`