==================================
paya.nodetypes.transform.Transform
==================================

.. py:module:: paya.nodetypes.transform

.. py:class:: Transform(*args, **kwargs)

    .. py:classmethod:: create(dagPath=None, name=None, under=None, displayLocalAxis=False, rotateOrder='xyz', worldMatrix=None)
    
        Creates transform nodes.
        
        :param dagPath/dp: an explicit DAG path; if provided, the minimum
            number of nodes required to match this DAG path will be
            generated; ``displayLocalAxis``, ``rotateOrder`` and
            ``worldMatrix`` will only be applied to the last (innermost)
            group; defaults to None
        :type dagPath/dp: None, str
        :param name/n: one or more name elements; ignored if ``dagPath`` is
            provided; defaults to None
        :type name/n: int, str, list, tuple or None
        :param under/u: an optional parent for the transform; if this is
            combined with ``dagPath``, then this node's DAG path will be
            prepended; defaults to None
        :type under/u: None, str, :class:`~paya.nodetypes.transform.Transform`
        :param bool displayLocalAxis/dla: display the transform's local axes;
            defaults to False
        :param rotateOrder/ro: the transform's rotate order; defaults to 'xyz'
        :type rotateOrder/ro: int, str or None
        :param worldMatrix/wm: an optional world matrix for the transform,
            applied to the SRT channels; defaults to None
        :type worldMatrix/wm: None, list, tuple or
            :class:`~paya.datatypes.matrix.Matrix`
        :return: The transform.
        :rtype: :class:`~paya.nodetypes.transform.Transform`
    
    .. py:method:: releaseSRT()
    
        Unlocks and disconnects every SRT channel, recursively.
        
        :return: ``self``
    
    .. py:method:: getWorldPosition(plug=False, useLocatorShape=True)
    
        Returns the world translation of this transform. Pivots are ignored.
        
        :shorthand: ``gwp``
        :param bool plug/p: return an attribute instead of a value; if
            'useLocatorShape' is True then, where available, the locator
            shape's 'worldPosition' attribute will be returned; otherwise,
            a 'worldPosition' attribute will be retrieved, or initialised,
            on the transform itself, with its input configured as self.t ^
            self.pm[0]; defaults to False
        :param bool useLocatorShape/uls: True
        :return: The position attribute or value.
        :rtype: :class:`~paya.datatypes.point.Point` or
            :class:`~paya.plugtypes.vector.Vector`
    
    .. py:method:: getWorldMatrix(plug=False)
    
        :param bool plug/p: return a plug instead of a value; defaults to
            False
        :return: The world matrix of this transform, as a value or plug.
        :rtype: :class:`paya.datatypes.matrix.Matrix` or
            :class:`paya.plugtypes.matrix.Matrix`
    
    .. py:method:: getRotateAxisMatrix(plug=False)
    
        Returns the rotate axis as a rotation matrix.
        
        :param bool plug/p: return an attribute instead of a value; this will
            be cooked only once, and afterwards retrieved via a
            'rotateAxisMatrix' attribute on the node; defaults to False
        :return: The rotate axis matrix.
        :rtype: :class:`paya.datatypes.matrix.Matrix` or
            :class:`paya.plugtypes.matrix.Matrix`
    
    .. py:method:: createOffsetGroups(*suffixes)
    
        :param \*suffixes: one or more offset group suffixes; defaults to
            'offset'
        :type \*suffixes: list, tuple, str
        :return: One or more transformationally-matched offset groups for this
            transform, in order of innermost to outermost.
        :type: list of :class:`~paya.nodetypes.transform.Transform`
    
    .. py:method:: conformShapeNames()
    
        Conforms the names of this transform's shape children to the Maya
        convention. Intermediate shapes are ignored, except where renaming
        them is needed to enforce logical numbering amongst the non-
        intermediate ones.
        
        :return: ``self``
        :rtype: :class:`~paya.nodetypes.transform.Transform`