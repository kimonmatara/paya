=============
paya.pluginfo
=============

.. py:module:: paya.pluginfo

Internal. Contains routines to get information on
:class:`~maya.OpenMaya.MPlug` instances and administer abstract Paya plug
classes.

.. py:function:: parseMFnEnums()

    Runs on startup.
    
    :return: A mapping of ``{enum name: paya class name}`` for every enum on
        :class:`maya.OpenMaya.MFn`
    :rtype: :class:`dict`

.. py:function:: parseMFnDataEnums()

    Runs on startup.
    
    :return: A mapping of ``{enum name: paya class name}`` for every enum on
        :class:`maya.OpenMaya.MFnData`
    :rtype: :class:`dict`

.. py:function:: parseMFnNumericDataEnums()

    Runs on startup.
    
    :return: A mapping of ``{enum name: paya class name}`` for every enum on
        :class:`maya.OpenMaya.MFnNumericData`
    :rtype: :class:`dict`

.. py:function:: parseMFnUnitAttributeEnums()

    Runs on startup.
    
    :return: A mapping of ``{enum name: paya class name}`` for every enum on
        :class:`maya.OpenMaya.MFnUnitAttribute`
    :rtype: :class:`dict`

.. py:function:: parsePerKeyInfo()

    Runs on startup.
    
    :return: A ``{paya class name: info dict}`` mapping, where ``info``
        comprises:
    
        ::
    
            {
                'mathDimension': int, # e.g. 3; may be omitted
                'type': list, # the class path,
                'mathUnitType': str # one of 'angle', 'distance', 'time'; may be omitted
            }
    :rtype: :class:`dict`

.. py:function:: getPath(key, invent=True)

    :param str key: the name of a Paya class for which to retrieve
        an inheritance path
    :param bool invent: if the class is not classified, invent a basic
        classification; defaults to ``True``
    :return: The inheritance path.
    :rtype: :class:`list` [:class:`str`]