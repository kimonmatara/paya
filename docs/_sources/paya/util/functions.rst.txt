===================
paya.util.functions
===================

.. py:module:: paya.util.functions

.. py:class:: Undefined

    An instance of this class, ``undefined`` in this module, is used across
    Paya for keyword argument defaults for which ``None`` would not represent
    omission.

.. py:class:: short(**mapping)

    Decorator with keyword arguments, used to mimic Maya's 'shorthand'
    flags.
    
    :Example:
    
        .. code-block:: python
    
            @short(numJoints='nj')
            def makeJoints(numJoints=16):
                [...]
    
            # This can then be called as:
            makeJoints(nj=5)

    .. py:method:: __call__(f)
    
        Call self as a function.

.. py:function:: resolveFlags(*flags, radio=None)

    Resolves passed-in user option values by omission, Maya style.
    
    :Example:
    
        .. code-block:: python
    
            userVals = resolveFlags(True, None, None)
            # True, False, False
    
            userVals = resolveFlags(False, None, None)
            # False, True, True
    
            userVals = resolveFlags(None, None, None)
            # True, True, True
    
            userVals = resolveFlags(True, None, False)
            # True, True, False
    
            userVals = resolveFlags(None, None, None, radio=0)
            # True, False, False
    
            userVals = resolveFlags(None, False, None, radio=0)
            # True, False, False
    
            userVals = resolveFlags(True, None, True, radio=0)
            # ValueError: Multiple radio selection.
    
    :param \*flags: the passed-in user option values, in order
    :type \*flags: :class:`bool`, ``None``
    :param radio: if this is defined, it should be an integer specifying
        which item should be ``True`` in a single-selection radio setup;
        defaults to ``None``
    :return: The resolved flag values, in order.
    :rtype: :class:`tuple` [:class:`bool`]

.. py:function:: conditionalExpandArgs(*args, gate=None)

    Flattens tuples and lists in user arguments into a single list.
    
    :param \*args: the arguments to expand
    :param gate/g: if provided, this should be a callable that takes
        one argument and returns ``True`` if the item should be expanded
        or not (useful for preserving vectors in list form etc.); will
        only be used for tuples and lists; defaults to None
    :return: The flattened args.
    :rtype: list

.. py:function:: sigCollectsKwargs(signature)

    :param signature: the signature object
    :type signature: :class:`inspect.Signature`
    :return: ``True`` if the signature object collects keyword arguments,
        otherwise ``False``.

.. py:function:: sigWithAddedKwargs(signature, **kwargs)

    :param signature: the original signature object
    :type signature: :class:`inspect.Signature`
    :param \*\*kwargs: defines keywords arguments, with defaults, to add to
        the signature copy.
    :return: A copy of *signature* with the passed keyword arguments mixed-in.