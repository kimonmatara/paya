============================
paya.datatypes.vector.Vector
============================

.. py:module:: paya.datatypes.vector

.. py:class:: Vector(*args, **kwargs)

    .. py:method:: __add__(other)
    
        Implements **addition** (``+``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__add__` to add
        support for 1D or 3D plugs.
    
    .. py:method:: __radd__(other)
    
        Implements **reflected addition** (``+``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__radd__` to add
        support for 1D or 3D plugs.
    
    .. py:method:: __sub__(other)
    
        Implements **subtraction** (``-``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__sub__` to add
        support for 1D or 3D plugs.
    
    .. py:method:: __rsub__(other)
    
        Implements **reflected subtraction** (``-``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__rsub__` to add
        support for 1D or 3D plugs.
    
    .. py:method:: __mul__(other)
    
        Implements **multiplication** (``*``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__mul__` to add
        support for 1D, 3D and 16D (matrix) plugs.
    
    .. py:method:: __rmul__(other)
    
        Implements **reflected multiplication** (``*``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__rmul__` to add
        support for 1D and 3D plugs.
    
    .. py:method:: __truediv__(other)
    
        Implements **division** (``/``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__truediv__` to add
        support for 1D and 3D plugs.
    
    .. py:method:: __rtruediv__(other)
    
        Implements **reflected division** (``/``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__rtruediv__` to add
        support for 1D and 3D plugs.
    
    .. py:method:: __xor__(other)
    
        Uses the exclusive-or operator (``^``) to implement
        **point-matrix multiplication**.
        
        :param other: a matrix plug or value
        :type other: list, :class:`~paya.datatypes.matrix.Matrix`, :class:`~paya.plugtypes.matrix.Matrix`
    
    .. py:method:: __pow__(other)
    
        Implements **power** (``**``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__pow__` to add
        support for 1D and 3D plugs.
    
    .. py:method:: __rpow__(other)
    
        Implements **reflected power** (``**``).
        
        Overloads :meth:`pymel.core.datatypes.Vector.__rpow__` to add
        support for 1D and 3D plugs.
    
    .. py:method:: blend(other, weight=0.5, swap=False)
    
        Blends this output towards ``other``.
        
        :param other: the scalar value or plug towards which to blend
        :type other: 3D value or plug
        :param weight/w: the blend weight, where *other* takes over fully
            at 1.0; defaults to 0.5
        :type weight/w: :class:`~paya.plugtypes.attributeMath1D.AttributeMath1D`, :class:`Vector`, list, str
        :param bool swap: swap the operands
        :return: The blended output.
        :rtype: :class:`~paya.plugtypes.attributeMath3D.AttributeMath3D`
    
    .. py:method:: dot(other, normalize=False)
    
        Returns the dot product of this vector and 'other'.
        
        Extends the base PyMEL method in these ways:
        
        -   Adds the 'normalize' keyword argument
        -   Works with plugs as well as values (if 'other' is a plug,
            the output will also be a plug)
        
        :param other: the other vector
        :type other: :class:`~paya.plugtypes.attributeMath3D.AttributeMath3D`, :class:`Vector`,
            :class:`Point`, list, str
        :param bool normalize/nr: normalize the output; defaults to False
        :return: The dot product.
        :rtype: :class:`Vector` or :class:`~paya.plugtypes.attributeMath1D.AttributeMath1D`
    
    .. py:method:: cross(other, normalize=False)
    
        Returns the cross product of this vector and 'other'.
        
        Extends the base PyMEL method in these ways:
        
        -   Adds the 'normalize' keyword argument
        -   Works with plugs as well as values (if 'other' is a plug,
            the output will also be a plug)
        
        :param other: the other vector
        :type other: :class:`~paya.plugtypes.attributeMath3D.AttributeMath3D`, :class:`Vector`,
            :class:`Point`, list, str
        :param bool normalize/nr: normalize the output; defaults to False
        :return: The cross product.
        :rtype: :class:`Vector` or :class:`~paya.plugtypes.attributeMath3D.AttributeMath3D`
    
    .. py:method:: angle(other)
    
        Returns the unsigned, 180-degree-range angle between this vector and
        ``other``.
        
        Extends the base PyMEL method in these ways:
        
        -   Works with plugs as well as values (if 'other' is a plug,
            the output will also be a plug)
        
        :param other: the other vector
        :type other: :class:`~paya.plugtypes.attributeMath3D.AttributeMath3D`, :class:`Vector`,
            :class:`Point`, list, str
        :return: The angle.
        :rtype: :class:`~paya.plugtypes.attributeMath1D.AttributeMath1D` or float