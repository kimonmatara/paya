============================
paya.datatypes.matrix.Matrix
============================

.. py:module:: paya.datatypes.matrix

.. py:class:: Matrix(*args, **kwargs)

    .. py:method:: createLocator(scale=1.0)
    
        Creates a locator and drives its SRT channels using this matrix.
        
        :shorthand: ``cl``
        
        :param float scale: the locator display scale; defaults to 1.0
        :return: The locator.
        :rtype: :class:`~paya.nodetypes.transform.Transform`
    
    .. py:method:: decompose(rotateOrder='xyz')
    
        Decomposes this matrix.
        
        :param rotateOrder/ro: the rotate order to apply; defaults to 'xyz'
        :type rotateOrder/ro: str, int
        :return: dictionary of {channelName: :class:`~paya.datatypes.point.Point`,
            :class:`~paya.datatypes.vector.Vector`
            or :class:`~paya.datatypes.eulerRotation.EulerRotation`}
        :rtype: dict
    
    .. py:method:: __add__(other)
    
        Implements **addition** (``+``).
        
        Overloads :meth:`pymel.core.datatypes.Matrix.__add__` to add
        support for 16D plugs.
    
    .. py:method:: __radd__(other)
    
        Implements **reflected addition** (``+``).
        
        Overloads :meth:`pymel.core.datatypes.Matrix.__add__` to add
        support for 16D plugs.
    
    .. py:method:: __mul__(other)
    
        Implements **multiplication** (``*``).
        
        Overloads :meth:`pymel.core.datatypes.Matrix.__mul__` to add
        support for 16D plugs.
    
    .. py:method:: __rmul__(other)
    
        Implements **reflected multiplication** (``*``).
        
        Overloads :meth:`pymel.core.datatypes.Matrix.__rmul__` to add
        support for 3D and 16D plugs as well as simple types.
    
    .. py:method:: __rxor__(other)
    
        Uses the exclusive-or operator (``^``) to implement
        **point-matrix multiplication** for 3D values and plugs.
    
    .. py:method:: pick(translate=None, rotate=None, scale=None, shear=None, default=None)
    
        Filters this matrix, similar to Maya's pickMatrix. If 'default' is
        used, and it's a plug, the output will also be a plug.
        
        Flags are defined by omission, Maya-style.
        
        :shorthand: pk
        
        :param bool translate/t: use translate
        :param bool rotate/r: use rotate
        :param bool scale/s: use scale
        :param shear/sh: use shear
        :param default: take omitted fields from this matrix; can be a value
            or plug; defaults to None
        :type default: list, :class:`~paya.datatypes.matrix.Matrix`, str, :class:`~paya.plugtypes.matrix.Matrix`
        :return: The filtered matrix.
        :rtype: :class:`~paya.datatypes.matrix.Matrix` or :class:`~paya.plugtypes.matrix.Matrix`
    
    .. py:classmethod:: asOffset()
    
        Implemented for parity with :meth:`paya.plugtypes.matrix.Matrix.asOffset`.
        Returns an identity matrix.
    
    .. py:method:: getAxis(axis, normalize=False)
    
        Extracts the specified axis from this matrix as a vector or point
        value. Used to implement the following properties: **x**, **y**,
        **z** and **translate**/**t**. The property versions will always
        return non-normalized values.
        
        :param str axis: the axis to extract, one of 'x', 'y', 'z', '-x',
            '-y', '-z' or 'translate' / 't'
        :param bool normalize: normalize the extracted vector; defaults
            to False
        :return: :class:`~paya.datatypes.vector.Vector`, :class:`~paya.datatypes.point.Point`
    
    .. py:method:: setAxis(axis, vals)
    
        Sets the values for the specified axis row. Used to implement the
        following properties: **x**, **y**, **z** and **translate**/**t**.
        
        :param str axis: the axis to extract, one of 'x', 'y', 'z', '-x',
            '-y', '-z' or 'translate' / 't'.
        :param vals: the values to assign to the row
        :type vals: :class:`~paya.datatypes.vector.Vector`,
            :class:`~paya.datatypes.point.Point`, list
    
    .. py:method:: getX(normalize=False)
    
        Equivalent to ``getAxis('x')``.
        Getter for the **x** property.
    
    .. py:method:: setX(vals)
    
        Equivalent to ``setAxis('x')``.
        Setter for the **x** property.
    
    .. py:method:: getY(normalize=False)
    
        Equivalent to ``getAxis('y')``.
        Getter for the **y** property.
    
    .. py:method:: setY(vals)
    
        Equivalent to ``setAxis('y')``.
        Setter for the **y** property.
    
    .. py:method:: getZ(normalize=False)
    
        Equivalent to ``getAxis('z')``.
        Getter for the **z** property.
    
    .. py:method:: setZ(vals)
    
        Equivalent to ``setAxis('z')``.
        Setter for the **z** property.
    
    .. py:method:: getTranslate(normalize=False)
    
        Equivalent to ``getAxis('translate')``.
        Getter for the **translate**/**t** property.
    
    .. py:method:: setTranslate(vals)
    
        Equivalent to ``setAxis('translate')``.
        Setter for the **translate**/**t** property.