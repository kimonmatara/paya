==========
paya.pools
==========

.. py:module:: paya.pools

.. py:class:: ClassPoolBrowser(pool)

    Browsing wrapper for a class pool instance. Classes can be retrieved
    using dotted or keyed syntax.

.. py:class:: ClassPool

    Abstract base class for collections of custom Paya classes.

    .. py:method:: browse()
    
        :return: A browser object for this pool.
        :rtype: :class:`ClassPoolBrowser`.
    
    .. py:method:: dirPath()
    
        :return: The full directory path for the template package.
        :rtype: str
    
    .. py:method:: longName()
    
        :return: The long name of this pool, for example 'nodetypes'.
        :rtype: str
    
    .. py:method:: shortName()
    
        :return: The short name of this pool, for example 'nodes'.
        :rtype: str
    
    .. py:method:: purge(quiet=False)
    
        Purges cached information.
    
    .. py:method:: getMeta(clsname)
    
        :param str clsname: the name of the class being retrieved
        :return: An appropriate metaclass for the requested class.
        :rtype: type
    
    .. py:method:: inventBasesDict(clsname)
    
        :param clsname: the name of the class being retrieved
        :raise NotImplementedError: Invention is not implemented for this pool.
        :return: Bases and a dict that can be used to construct a stand-in
            class in the absence of a template.
        :rtype: (tuple, dict)
    
    .. py:method:: conformBases(clsname, bases)
    
        Given a tuple of bases, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param tuple bases: either an empty tuple, or bases retrieved from a
            template class
        :return: The bases.
        :rtype: (type,)
    
    .. py:method:: conformDict(clsname, dct)
    
        Given a class dictionary, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param dict dct: either an empty dictionary, or the dictionary of
            a template class
        :return: The dictionary.
        :rtype: dict
    
    .. py:method:: getBasesDictFromTemplate(clsname)
    
        Looks for a template for the requested class and, if one is found,
        returns its conformed bases and dictionary.
        
        :param clsname: the name of the class being retrieved
        :return: The bases and dictionary.
        :rtype: (tuple, dict)
    
    .. py:method:: buildClass(clsname)
    
        Builds a final class. If a template is available, it is used.
        Otherwise, if this pool implements invention, the class is invented.
        If this pool doesn't implement invention, an exception is raised.
        
        :param str clsname: the name of the class to build
        :raises MissingTemplateError: A template couldn't be found, and this
            pool doesn't implement invention.
        :return: The built class.
        :rtype: type
    
    .. py:method:: getByName(clsname)
    
        Retrieves a Paya class by name.
        
        Previously-constructed classes are returned from a cache. If the class
        is not in the cache then, if there's a template for it, information
        from the template will be used to build the class. If there's no
        template then, if this pool implements invention, the class will be
        invented. Otherwise, an exception will be raised.
        
        :param str clsname: the name of the class to retrieve
        :raises MissingTemplateError: A template couldn't be found, and this
            pool doesn't implement invention.
        :return: The retrieved class.
        :rtype: type

.. py:class:: ShadowPool

    Abstract base class for pools that directly shadow PyMEL namesakes.

    .. rubric:: Inheritance

    :class:`~paya.pools.ClassPool`

    .. py:method:: getFromPyMELInstance(inst)
    
        Given a PyMEL instance, returns an appropriate Paya class for
        reassignment.
    
    .. py:method:: inventBasesDict(clsname)
    
        :param clsname: the name of the class being retrieved
        :raise NotImplementedError: Invention is not implemented for this pool.
        :return: Bases and a dict that can be used to construct a stand-in
            class in the absence of a template.
        :rtype: (tuple, dict)
    
    .. py:method:: conformDict(clsname, dct)
    
        Given a class dictionary, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param dict dct: either an empty dictionary, or the dictionary of
            a template class
        :return: The dictionary.
        :rtype: dict
    
    .. py:method:: conformBases(clsname, bases)
    
        Given a tuple of bases, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param tuple bases: either an empty tuple, or bases retrieved from a
            template class
        :return: The bases.
        :rtype: (type,)
    
    .. py:method:: getMeta(clsname)
    
        :param str clsname: the name of the class being retrieved
        :return: An appropriate metaclass for the requested class.
        :rtype: type
    
    .. py:method:: getPmBase(clsname)
    
        :param str clsname: the class being retrieved
        :return: A PyMEL base for the requested class.
        :rtype: type

.. py:class:: NodeClassPool

    Administers custom Paya classes for nodes. A browser for this pool can
    be accessed on :mod:`paya.runtime` as ``.nodes``.

    .. rubric:: Inheritance

    :class:`~paya.pools.ShadowPool` :class:`~paya.pools.ClassPool`

    .. py:method:: conformDict(clsname, dct)
    
        Given a class dictionary, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param dict dct: either an empty dictionary, or the dictionary of
            a template class
        :return: The dictionary.
        :rtype: dict

.. py:class:: CompClassPool

    Administers custom Paya classes for components. A browser for this pool can
    be accessed on :mod:`paya.runtime` as ``.comps``.

    .. rubric:: Inheritance

    :class:`~paya.pools.ShadowPool` :class:`~paya.pools.ClassPool`

.. py:class:: PlugClassPool

    Administers custom Paya classes for plugs (attributes). Relies on
    :mod:`~paya.plugtree`. A browser for this pool can
    be accessed on :mod:`paya.runtime` as ``.plugs``.

    .. rubric:: Inheritance

    :class:`~paya.pools.ShadowPool` :class:`~paya.pools.ClassPool`

    .. py:method:: getFromPyMELInstance(inst)
    
        Given a PyMEL instance, returns an appropriate Paya class for
        reassignment.
    
    .. py:method:: getPmBase(clsname)
    
        :param str clsname: the class being retrieved
        :return: A PyMEL base for the requested class.
        :rtype: type
    
    .. py:method:: conformBases(clsname, bases)
    
        Given a tuple of bases, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param tuple bases: either an empty tuple, or bases retrieved from a
            template class
        :return: The bases.
        :rtype: (type,)

.. py:function:: getRootDataClasses()

    :return: Terminating classes detected from :mod:`pymel.core.datatypes`.

.. py:class:: DataClassPool

    Administers custom Paya classes for data types (e.g. vectors). An instance
    of this pool can be accessed on :mod:`paya.runtime` as ``.data``.

    .. rubric:: Inheritance

    :class:`~paya.pools.ShadowPool` :class:`~paya.pools.ClassPool`

.. py:class:: ParsedNodeSubtypePoolMeta(clsname, bases, dct)



    .. rubric:: Inheritance

    :class:`~builtins.type`

.. py:class:: ParsedNodeSubtypePool



    .. rubric:: Inheritance

    :class:`~paya.pools.NodeClassPool` :class:`~paya.pools.ShadowPool` :class:`~paya.pools.ClassPool`

    .. py:method:: inventBasesDict(clsname)
    
        :raises NotImplementedError: Not supported on parsed-subtype pools.
    
    .. py:method:: buildClass(clsname)
    
        Builds a final class. If a template is available, it is used.
        Otherwise, if this pool implements invention, the class is invented.
        If this pool doesn't implement invention, an exception is raised.
        
        :param str clsname: the name of the class to build
        :raises MissingTemplateError: A template couldn't be found, and this
            pool doesn't implement invention.
        :return: The built class.
        :rtype: type
    
    .. py:method:: conformDict(clsname, dct)
    
        Given a class dictionary, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param dict dct: either an empty dictionary, or the dictionary of
            a template class
        :return: The dictionary.
        :rtype: dict
    
    .. py:method:: conformBases(clsname, bases)
    
        Given a tuple of bases, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param tuple bases: either an empty tuple, or bases retrieved from a
            template class
        :return: The bases.
        :rtype: (type,)

.. py:class:: ParsedNetworkSubtypePool

    Administers subtypes for 'network' nodes.

    .. rubric:: Inheritance

    :class:`~paya.pools.ParsedNodeSubtypePool` :class:`~paya.pools.NodeClassPool` :class:`~paya.pools.ShadowPool` :class:`~paya.pools.ClassPool`

.. py:class:: ParsedContainerSubtypePool

    Administers subtypes for 'container' nodes.

    .. rubric:: Inheritance

    :class:`~paya.pools.ParsedNodeSubtypePool` :class:`~paya.pools.NodeClassPool` :class:`~paya.pools.ShadowPool` :class:`~paya.pools.ClassPool`