==========
paya.pools
==========

.. py:module:: paya.pools

.. py:class:: ClassPoolBrowser(pool)

    Browsing wrapper for a class pool instance. Classes can be retrieved
    using dotted or keyed syntax.

.. py:class:: ClassPool

    Abstract base class for collections of custom Paya classes.

    .. py:method:: browse()
    
        :return: A browser object for this pool.
        :rtype: :class:`ClassPoolBrowser`.
    
    .. py:method:: dirPath()
    
        :return: The full directory path for the template package.
        :rtype: str
    
    .. py:method:: longName()
    
        :return: The long name of this pool, for example 'nodetypes'.
        :rtype: str
    
    .. py:method:: shortName()
    
        :return: The short name of this pool, for example 'nodes'.
        :rtype: str
    
    .. py:method:: purge(quiet=False)
    
        Purges cached information.
    
    .. py:method:: readClass(clsname)
    
        Locates, sources and returns a class by name. No rebuilding or
        cache management is performed.
        
        :param str clsname: the name of the class to retrieve
        :return: The retrieved class.
        :rtype: :class:`str`
    
    .. py:method:: getByName(clsname)
    
        Retrieves a class by name. Lookups are cached.
        
        :param str clsname: The name of the class to retrieved.
        :return: The retrieved class.
        :rtype: :class:`str`

.. py:class:: RebuiltClassPool

    .. rubric:: Inheritance

    :class:`~paya.pools.ClassPool`



    .. py:method:: getMeta(clsname)
    
        :param str clsname: the name of the class being retrieved
        :return: An appropriate metaclass for the requested class.
        :rtype: type
    
    .. py:method:: inventBasesDict(clsname)
    
        :param clsname: the name of the class being retrieved
        :raise NotImplementedError: Invention is not implemented for this pool.
        :return: Bases and a dict that can be used to construct a stand-in
            class in the absence of a template.
        :rtype: (tuple, dict)
    
    .. py:method:: conformBases(clsname, bases)
    
        Given a tuple of bases, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param tuple bases: either an empty tuple, or bases retrieved from a
            template class
        :return: The bases.
        :rtype: (type,)
    
    .. py:method:: conformDict(clsname, dct)
    
        Given a class dictionary, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param dict dct: either an empty dictionary, or the dictionary of
            a template class
        :return: The dictionary.
        :rtype: dict
    
    .. py:method:: buildClass(clsname)
    
        Builds a final class. If a template is available, it is used.
        Otherwise, if this pool implements invention, the class is invented.
        If this pool doesn't implement invention, an exception is raised.
        
        :param str clsname: the name of the class to build
        :raises MissingTemplateError: A template couldn't be found, and this
            pool doesn't implement invention.
        :return: The built class.
        :rtype: type
    
    .. py:method:: getByName(clsname)
    
        Retrieves a class by name. Lookups are cached.
        
        :param str clsname: The name of the class to retrieved.
        :return: The retrieved class.
        :rtype: :class:`str`

.. py:class:: ShadowPool

    .. rubric:: Inheritance

    :class:`~paya.pools.RebuiltClassPool` :class:`~paya.pools.ClassPool`

    Abstract base class for pools that directly shadow PyMEL namesakes.

    .. py:method:: getFromPyMELInstance(inst)
    
        Given a PyMEL instance, returns an appropriate Paya class for
        reassignment.
    
    .. py:method:: inventBasesDict(clsname)
    
        :param clsname: the name of the class being retrieved
        :raise NotImplementedError: Invention is not implemented for this pool.
        :return: Bases and a dict that can be used to construct a stand-in
            class in the absence of a template.
        :rtype: (tuple, dict)
    
    .. py:method:: conformDict(clsname, dct)
    
        Given a class dictionary, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param dict dct: either an empty dictionary, or the dictionary of
            a template class
        :return: The dictionary.
        :rtype: dict
    
    .. py:method:: conformBases(clsname, bases)
    
        Given a tuple of bases, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param tuple bases: either an empty tuple, or bases retrieved from a
            template class
        :return: The bases.
        :rtype: (type,)
    
    .. py:method:: getMeta(clsname)
    
        :param str clsname: the name of the class being retrieved
        :return: An appropriate metaclass for the requested class.
        :rtype: type
    
    .. py:method:: getPmBase(clsname)
    
        :param str clsname: the class being retrieved
        :return: A PyMEL base for the requested class.
        :rtype: type

.. py:class:: NodeClassPool

    .. rubric:: Inheritance

    :class:`~paya.pools.ShadowPool` :class:`~paya.pools.RebuiltClassPool` :class:`~paya.pools.ClassPool`

    Administers custom Paya classes for nodes. A browser for this pool can
    be accessed on :mod:`paya.runtime` as ``.nodes``.

    .. py:method:: conformDict(clsname, dct)
    
        Given a class dictionary, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param dict dct: either an empty dictionary, or the dictionary of
            a template class
        :return: The dictionary.
        :rtype: dict

.. py:class:: CompClassPool

    .. rubric:: Inheritance

    :class:`~paya.pools.ShadowPool` :class:`~paya.pools.RebuiltClassPool` :class:`~paya.pools.ClassPool`

    Administers custom Paya classes for components. A browser for this pool can
    be accessed on :mod:`paya.runtime` as ``.comps``.

.. py:class:: PlugClassPool

    .. rubric:: Inheritance

    :class:`~paya.pools.ShadowPool` :class:`~paya.pools.RebuiltClassPool` :class:`~paya.pools.ClassPool`

    Administers custom Paya classes for plugs (attributes). Relies on
    :mod:`~paya.pluginfo`. A browser for this pool can
    be accessed on :mod:`paya.runtime` as ``.plugs``.

    .. py:method:: getFromPyMELInstance(inst)
    
        Given a PyMEL instance, returns an appropriate Paya class for
        reassignment.
    
    .. py:method:: getPmBase(clsname)
    
        :param str clsname: the class being retrieved
        :return: A PyMEL base for the requested class.
        :rtype: type
    
    .. py:method:: conformBases(clsname, bases)
    
        Given a tuple of bases, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param tuple bases: either an empty tuple, or bases retrieved from a
            template class
        :return: The bases.
        :rtype: (type,)

.. py:function:: getRootDataClasses()

    :return: Terminating classes detected from :mod:`pymel.core.datatypes`.

.. py:class:: DataClassPool

    .. rubric:: Inheritance

    :class:`~paya.pools.ShadowPool` :class:`~paya.pools.RebuiltClassPool` :class:`~paya.pools.ClassPool`

    Administers custom Paya classes for data types (e.g. vectors). An instance
    of this pool can be accessed on :mod:`paya.runtime` as ``.data``.

.. py:class:: ParsedNodeSubtypePoolMeta(clsname, bases, dct)

    .. rubric:: Inheritance

    :class:`~builtins.type`



.. py:class:: ParsedNodeSubtypePool

    .. rubric:: Inheritance

    :class:`~paya.pools.NodeClassPool` :class:`~paya.pools.ShadowPool` :class:`~paya.pools.RebuiltClassPool` :class:`~paya.pools.ClassPool`



    .. py:method:: inventBasesDict(clsname)
    
        :raises NotImplementedError: Not supported on parsed-subtype pools.
    
    .. py:method:: getCrossPoolRoot()
    
        :return: A class from a 'base' class pool, to be used as the basis
            for all classes returned by this one.
        :rtype: :class:`type`
    
    .. py:method:: attrName()
    
        :return: The name of the string node attribute that will be inspected
            for the type name.
        :rtype: :class:`str`
    
    .. py:method:: buildClass(clsname)
    
        Builds a final class. If a template is available, it is used.
        Otherwise, if this pool implements invention, the class is invented.
        If this pool doesn't implement invention, an exception is raised.
        
        :param str clsname: the name of the class to build
        :raises MissingTemplateError: A template couldn't be found, and this
            pool doesn't implement invention.
        :return: The built class.
        :rtype: type
    
    .. py:method:: conformDict(clsname, dct)
    
        Given a class dictionary, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param dict dct: either an empty dictionary, or the dictionary of
            a template class
        :return: The dictionary.
        :rtype: dict
    
    .. py:method:: conformBases(clsname, bases)
    
        Given a tuple of bases, returns a modified, where necessary,
        version that can be used to construct a final class.
        
        :param str clsname: the name of the class being retrieved
        :param tuple bases: either an empty tuple, or bases retrieved from a
            template class
        :return: The bases.
        :rtype: (type,)

.. py:class:: ParsedNetworkSubtypePool

    .. rubric:: Inheritance

    :class:`~paya.pools.ParsedNodeSubtypePool` :class:`~paya.pools.NodeClassPool` :class:`~paya.pools.ShadowPool` :class:`~paya.pools.RebuiltClassPool` :class:`~paya.pools.ClassPool`

    Administers subtypes for 'network' nodes.

.. py:class:: PartClassPool

    .. rubric:: Inheritance

    :class:`~paya.pools.ClassPool`

