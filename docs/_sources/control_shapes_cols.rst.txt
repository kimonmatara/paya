*************************
Control Shapes and Colors
*************************

==============
Library Shapes
==============

To apply a Paya library shape to a control, use :meth:`Transform.setCtShapesFromLib()
<paya.nodetypes.transform.Transform.setCtShapesFromLib>`:

.. code-block:: python

    control = r.PyNode('L_eye_CTRL')
    control.setCtShapesFromLib('sphere')


.. tip::

    *   If you're applying the same library shape to several controls at once, passing those controls to
        :meth:`paya.runtime.controlShapes.applyToControls()
        <paya.lib.controlshapes.ControlShapesLibrary.applyToControls>` will execute faster than calling
        :meth:`~paya.nodetypes.transform.Transform.setCtShapesFromLib` on each control.

        See :class:`~paya.lib.controlshapes.ControlShapesLibrary` for a full reference of methods on the library object.

Call :meth:`~paya.nodetypes.transform.Transform.cycleCtShapes` repeatedly on a control to preview different library
shapes. The current shape name will be printed on each invocation:

.. code-block:: python

    control.cycleCtShapes()
    # cube
    control.cycleCtShapes()
    # sphere

To capture a control's shape(s) as a library entry, use :meth:`Transform.addCtShapesToLib()
<paya.nodetypes.transform.Transform.addCtShapesToLib>`:

.. code-block:: python

    control.addCtShapesToLib('my_shape_name')


===================
Transforming Shapes
===================

Control shapes can be rotated and scaled using
:meth:`Transform.rotateCtShapes() <paya.nodetypes.transform.Transform.rotateCtShapes>` and
:meth:`Transform.scaleCtShapes() <paya.nodetypes.transform.Transform.scaleCtShapes>`, respectively. Where the shape is a
curve, its control points are moved. On locators the ``localPosition`` and ``localScale`` attributes are edited instead.

======================
Setting Control Colors
======================

Control colors can be retrieved and set by-index using
:meth:`Transform.colorCtShapes() <paya.nodetypes.transform.Transform.colorCtShapes>`:

.. code-block:: python

    print(control.colorCtShapes()) # query mode
    # 16

    control.colorCtShapes(4) # edit mode

Paya modifies control colors via via synced edits to ``overrideColor`` across the control's shapes. To remove all
display overrides, use ``colorCtShapes(None)``.

=========================
Copying Shapes and Colors
=========================

Control shapes and colors can be copied in a variety of ways using :meth:`Transform.copyCtShapesTo()
<paya.nodetypes.transform.Transform.copyCtShapesTo>`.

*   To copy shapes and colours in local space, simply specify the destination controls and omit all other arguments.
*   To copy in world space, pass ``worldSpace=True``.
*   To copy in local space with a specific axis flipped, specify the axis via ``mirrorAxis``.
*   To mirror-copy control shapes in world-space, specify the axis via ``mirrorAxis`` (typically 'x') and add
    ``worldSpace=True``.
*   To copy shapes but not colours, pass ``shape=True`` or ``color=False``.
*   To copy colours but not shapes, pass ``color=True`` or ``shape=False``.

Here's an example of simple interactive copying:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            sel = r.ls(sl=1)
            sel[0].copyCtShapesTo(sel[1:])

    .. tab:: Viewport

        .. figure:: local_shape_copy.gif
            :align: center

Here's an example of interactive copying with world-space mirroring:

.. tabs::

    .. tab:: Paya

        .. code-block:: python

            # Called several times, e.g. via a shelf button

            control = r.ls(sl=1)[0]
            oppositeControl = 'R'+str(control)[1:]

            control.copyCtShapesTo(oppositeControl, worldSpace=True,
                                        mirrorAxis='x', color=False)

    .. tab:: Viewport

        .. figure:: world_space_mirroring.gif
            :align: center